
/home/xavier/Documents/UniSherbrooke/FinDeBack/Buzz_particle_argon/argon/target/1.5.2/argon/argon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d61c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003dd24  000d61c4  0001dd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a64  2003dd8c  2003dd8c  0002dd8c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d622c  000d622c  0002622c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6254  000d6254  00026254  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c79e3  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fcaa  00000000  00000000  000edc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002318  00000000  00000000  000fd8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00033a2b  00000000  00000000  000ffbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000279cd  00000000  00000000  00133628  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010215f  00000000  00000000  0015aff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b54f  00000000  00000000  0025d154  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000040f8  00000000  00000000  002786a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6c4  00000000  00000000  0027c79c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd3d 	bl	d5aac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd42 	bl	d5ac2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd24 	.word	0x2003dd24
   d4048:	000d61c4 	.word	0x000d61c4
   d404c:	2003dd8c 	.word	0x2003dd8c
   d4050:	2003dd8c 	.word	0x2003dd8c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fa4f 	bl	d54fc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d61c0 	.word	0x000d61c0
   d4080:	000d617c 	.word	0x000d617c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb34 	b.w	d46f0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb27 	bl	d46dc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b9f5 	b.w	d5480 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bea3 	b.w	d4de0 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bea1 	b.w	d4de0 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <bbzdarray_destroy>:
}

/****************************************/
/****************************************/

void bbzdarray_destroy(bbzheap_idx_t d) {
   d40b0:	b570      	push	{r4, r5, r6, lr}
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
   d40b2:	f000 fa07 	bl	d44c4 <bbzheap_obj_at>
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
   d40b6:	4b10      	ldr	r3, [pc, #64]	; (d40f8 <bbzdarray_destroy+0x48>)
   d40b8:	681a      	ldr	r2, [r3, #0]
   d40ba:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d40be:	2116      	movs	r1, #22
   d40c0:	434b      	muls	r3, r1
   d40c2:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d40c6:	3218      	adds	r2, #24
   d40c8:	3302      	adds	r3, #2
   d40ca:	4413      	add	r3, r2
    while (1) {
        bbzheap_tseg_makeinvalid(*sd);
        if (!bbzheap_aseg_hasnext(sd)) break;
   d40cc:	f643 75ff 	movw	r5, #16383	; 0x3fff
void bbzdarray_destroy(bbzheap_idx_t d) {
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
    while (1) {
        bbzheap_tseg_makeinvalid(*sd);
   d40d0:	8a9c      	ldrh	r4, [r3, #20]
   d40d2:	f3c4 060e 	ubfx	r6, r4, #0, #15
   d40d6:	829e      	strh	r6, [r3, #20]
   d40d8:	f3c4 030d 	ubfx	r3, r4, #0, #14
        if (!bbzheap_aseg_hasnext(sd)) break;
   d40dc:	42ab      	cmp	r3, r5
   d40de:	d005      	beq.n	d40ec <bbzdarray_destroy+0x3c>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d40e0:	434b      	muls	r3, r1
   d40e2:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d40e6:	3302      	adds	r3, #2
   d40e8:	4413      	add	r3, r2
    }
   d40ea:	e7f1      	b.n	d40d0 <bbzdarray_destroy+0x20>
    bbzheap_obj_makeinvalid(*((bbzobj_t*)da));
   d40ec:	7803      	ldrb	r3, [r0, #0]
   d40ee:	f023 0308 	bic.w	r3, r3, #8
   d40f2:	7003      	strb	r3, [r0, #0]
   d40f4:	bd70      	pop	{r4, r5, r6, pc}
   d40f6:	bf00      	nop
   d40f8:	2003e3f4 	.word	0x2003e3f4

000d40fc <bbzdarray_get>:
/****************************************/
/****************************************/

uint8_t bbzdarray_get(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t* v) {
   d40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d40fe:	4607      	mov	r7, r0
   d4100:	460c      	mov	r4, r1
   d4102:	4615      	mov	r5, r2
    if (!bbztype_isdarray(*bbzheap_obj_at(d))) return 0;
   d4104:	f000 f9de 	bl	d44c4 <bbzheap_obj_at>
   d4108:	7803      	ldrb	r3, [r0, #0]
   d410a:	f003 0307 	and.w	r3, r3, #7
   d410e:	2b04      	cmp	r3, #4
   d4110:	d001      	beq.n	d4116 <bbzdarray_get+0x1a>
   d4112:	2000      	movs	r0, #0
   d4114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4116:	4638      	mov	r0, r7
   d4118:	f000 f9d4 	bl	d44c4 <bbzheap_obj_at>
   d411c:	7803      	ldrb	r3, [r0, #0]
   d411e:	0659      	lsls	r1, r3, #25
   d4120:	d5f7      	bpl.n	d4112 <bbzdarray_get+0x16>
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d4122:	4638      	mov	r0, r7
   d4124:	f000 f9ce 	bl	d44c4 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d4128:	4b1b      	ldr	r3, [pc, #108]	; (d4198 <bbzdarray_get+0x9c>)
   d412a:	6819      	ldr	r1, [r3, #0]
   d412c:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d4130:	2216      	movs	r2, #22
   d4132:	4353      	muls	r3, r2
   d4134:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d4138:	3118      	adds	r1, #24
   d413a:	3302      	adds	r3, #2
   d413c:	440b      	add	r3, r1
   d413e:	2700      	movs	r7, #0
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
   d4140:	f643 7cff 	movw	ip, #16383	; 0x3fff
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d4144:	4610      	mov	r0, r2

uint8_t bbzdarray_get(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t* v) {
    if (!bbztype_isdarray(*bbzheap_obj_at(d))) return 0;
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
   d4146:	260a      	movs	r6, #10
   d4148:	fbb4 f6f6 	udiv	r6, r4, r6
   d414c:	fa1f fe87 	uxth.w	lr, r7
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
   d4150:	4576      	cmp	r6, lr
   d4152:	d802      	bhi.n	d415a <bbzdarray_get+0x5e>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    if (idx == qot &&
   d4154:	4576      	cmp	r6, lr
   d4156:	d1dc      	bne.n	d4112 <bbzdarray_get+0x16>
   d4158:	e00d      	b.n	d4176 <bbzdarray_get+0x7a>
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
   d415a:	8a9a      	ldrh	r2, [r3, #20]
   d415c:	f3c2 020d 	ubfx	r2, r2, #0, #14
   d4160:	4562      	cmp	r2, ip
   d4162:	f107 0701 	add.w	r7, r7, #1
   d4166:	d0f5      	beq.n	d4154 <bbzdarray_get+0x58>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d4168:	fb00 f302 	mul.w	r3, r0, r2
   d416c:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d4170:	3302      	adds	r3, #2
   d4172:	440b      	add	r3, r1
   d4174:	e7ea      	b.n	d414c <bbzdarray_get+0x50>
    }
    if (idx == qot &&
        bbzheap_aseg_elem_isvalid(sd->values[rem])) {
   d4176:	210a      	movs	r1, #10
   d4178:	fbb4 f2f1 	udiv	r2, r4, r1
   d417c:	fb01 4412 	mls	r4, r1, r2, r4
   d4180:	b2a4      	uxth	r4, r4
   d4182:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   d4186:	b293      	uxth	r3, r2
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    if (idx == qot &&
   d4188:	0412      	lsls	r2, r2, #16
   d418a:	d5c2      	bpl.n	d4112 <bbzdarray_get+0x16>
        bbzheap_aseg_elem_isvalid(sd->values[rem])) {
        *v = bbzheap_aseg_elem_get(sd->values[rem]);
   d418c:	f3c3 030e 	ubfx	r3, r3, #0, #15
   d4190:	802b      	strh	r3, [r5, #0]
        return 1;
   d4192:	2001      	movs	r0, #1
    }
    return 0;
}
   d4194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4196:	bf00      	nop
   d4198:	2003e3f4 	.word	0x2003e3f4

000d419c <bbzdarray_size>:
}

/****************************************/
/****************************************/

uint16_t bbzdarray_size(bbzheap_idx_t d) {
   d419c:	b570      	push	{r4, r5, r6, lr}
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d419e:	f000 f991 	bl	d44c4 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d41a2:	4b15      	ldr	r3, [pc, #84]	; (d41f8 <bbzdarray_size+0x5c>)
   d41a4:	681a      	ldr	r2, [r3, #0]
   d41a6:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d41aa:	2116      	movs	r1, #22
   d41ac:	434b      	muls	r3, r1
   d41ae:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d41b2:	3218      	adds	r2, #24
   d41b4:	3302      	adds	r3, #2
   d41b6:	4413      	add	r3, r2

/****************************************/
/****************************************/

uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
   d41b8:	2000      	movs	r0, #0
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
                return size;
            }
            ++size;
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
   d41ba:	f643 75ff 	movw	r5, #16383	; 0x3fff

/****************************************/
/****************************************/

uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
   d41be:	2400      	movs	r4, #0
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
   d41c0:	f933 6014 	ldrsh.w	r6, [r3, r4, lsl #1]
   d41c4:	2e00      	cmp	r6, #0
   d41c6:	db06      	blt.n	d41d6 <bbzdarray_size+0x3a>
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
   d41c8:	8a9a      	ldrh	r2, [r3, #20]
   d41ca:	ea6f 3292 	mvn.w	r2, r2, lsr #14
   d41ce:	ea6f 3282 	mvn.w	r2, r2, lsl #14
   d41d2:	829a      	strh	r2, [r3, #20]
                return size;
   d41d4:	bd70      	pop	{r4, r5, r6, pc}
   d41d6:	3401      	adds	r4, #1
            }
            ++size;
   d41d8:	3001      	adds	r0, #1
uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d41da:	2c0a      	cmp	r4, #10
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
                return size;
            }
            ++size;
   d41dc:	b280      	uxth	r0, r0
uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d41de:	d1ef      	bne.n	d41c0 <bbzdarray_size+0x24>
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
                return size;
            }
            ++size;
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
   d41e0:	8a9b      	ldrh	r3, [r3, #20]
   d41e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d41e6:	42ab      	cmp	r3, r5
   d41e8:	d005      	beq.n	d41f6 <bbzdarray_size+0x5a>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d41ea:	434b      	muls	r3, r1
   d41ec:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d41f0:	3302      	adds	r3, #2
   d41f2:	4413      	add	r3, r2
    }
   d41f4:	e7e3      	b.n	d41be <bbzdarray_size+0x22>
    return size;
}
   d41f6:	bd70      	pop	{r4, r5, r6, pc}
   d41f8:	2003e3f4 	.word	0x2003e3f4

000d41fc <bbztable_set>:
/****************************************/
/****************************************/

uint8_t bbztable_set(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t v) {
   d41fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4200:	b089      	sub	sp, #36	; 0x24
   d4202:	4615      	mov	r5, r2
   d4204:	4683      	mov	fp, r0
   d4206:	9102      	str	r1, [sp, #8]
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d4208:	f000 f95c 	bl	d44c4 <bbzheap_obj_at>
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d420c:	4e87      	ldr	r6, [pc, #540]	; (d442c <bbztable_set+0x230>)
uint8_t bbztable_set(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t v) {
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d420e:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d4212:	6834      	ldr	r4, [r6, #0]
   d4214:	2216      	movs	r2, #22
uint8_t bbztable_set(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t v) {
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d4216:	b21f      	sxth	r7, r3
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d4218:	fb13 f302 	smulbb	r3, r3, r2
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
   d421c:	f04f 38ff 	mov.w	r8, #4294967295
                     bbzheap_idx_t v) {
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d4220:	1ae3      	subs	r3, r4, r3
   d4222:	f203 4442 	addw	r4, r3, #1090	; 0x442
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
   d4226:	46c2      	mov	sl, r8
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
   d4228:	f8cd 8004 	str.w	r8, [sp, #4]
   d422c:	4643      	mov	r3, r8
        if (seg >= 0) break;
        /* Are we done? */
        if (!bbzheap_tseg_hasnext(sd)) break;
        /* Get next segment */
        si = bbzheap_tseg_next_get(sd);
        sd = bbzheap_tseg_at(si);
   d422e:	9203      	str	r2, [sp, #12]
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
   d4230:	f04f 0900 	mov.w	r9, #0
    int16_t seg = -1, slot = -1;
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
            if (!bbzheap_tseg_elem_isvalid(sd->keys[i])) {
   d4234:	f834 2019 	ldrh.w	r2, [r4, r9, lsl #1]
   d4238:	b290      	uxth	r0, r2
   d423a:	0412      	lsls	r2, r2, #16
   d423c:	d406      	bmi.n	d424c <bbztable_set+0x50>
                if (fseg < 0) {
   d423e:	2b00      	cmp	r3, #0
   d4240:	da17      	bge.n	d4272 <bbztable_set+0x76>
                    /* First free slot found */
                    fseg = si;
                    fslot = i;
   d4242:	fa0f f389 	sxth.w	r3, r9
   d4246:	9301      	str	r3, [sp, #4]
   d4248:	463b      	mov	r3, r7
   d424a:	e012      	b.n	d4272 <bbztable_set+0x76>
                }
            }
            else if (bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
   d424c:	f3c0 000e 	ubfx	r0, r0, #0, #15
   d4250:	9305      	str	r3, [sp, #20]
   d4252:	f000 f937 	bl	d44c4 <bbzheap_obj_at>
   d4256:	9004      	str	r0, [sp, #16]
                                bbzheap_obj_at(k)) == 0) {
   d4258:	9802      	ldr	r0, [sp, #8]
   d425a:	f000 f933 	bl	d44c4 <bbzheap_obj_at>
                    /* First free slot found */
                    fseg = si;
                    fslot = i;
                }
            }
            else if (bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
   d425e:	9a04      	ldr	r2, [sp, #16]
   d4260:	4601      	mov	r1, r0
   d4262:	4610      	mov	r0, r2
   d4264:	f000 f8e4 	bl	d4430 <bbztype_cmp>
   d4268:	9b05      	ldr	r3, [sp, #20]
   d426a:	b910      	cbnz	r0, d4272 <bbztable_set+0x76>
                                bbzheap_obj_at(k)) == 0) {
                /* Key found */
                seg = si;
                slot = i;
   d426c:	fa0f f889 	sxth.w	r8, r9
   d4270:	46ba      	mov	sl, r7
   d4272:	f109 0901 	add.w	r9, r9, #1
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
   d4276:	f1b9 0f05 	cmp.w	r9, #5
   d427a:	d1db      	bne.n	d4234 <bbztable_set+0x38>
                seg = si;
                slot = i;
            }
        }
        /* Did we find the key? */
        if (seg >= 0) break;
   d427c:	f1ba 0f00 	cmp.w	sl, #0
   d4280:	da5d      	bge.n	d433e <bbztable_set+0x142>
        /* Are we done? */
        if (!bbzheap_tseg_hasnext(sd)) break;
   d4282:	8aa7      	ldrh	r7, [r4, #20]
   d4284:	f643 71ff 	movw	r1, #16383	; 0x3fff
   d4288:	f3c7 020d 	ubfx	r2, r7, #0, #14
   d428c:	428a      	cmp	r2, r1
   d428e:	d007      	beq.n	d42a0 <bbztable_set+0xa4>
        /* Get next segment */
        si = bbzheap_tseg_next_get(sd);
   d4290:	4617      	mov	r7, r2
        sd = bbzheap_tseg_at(si);
   d4292:	6834      	ldr	r4, [r6, #0]
   d4294:	9a03      	ldr	r2, [sp, #12]
   d4296:	fb07 4412 	mls	r4, r7, r2, r4
   d429a:	f204 4442 	addw	r4, r4, #1090	; 0x442
    }
   d429e:	e7c7      	b.n	d4230 <bbztable_set+0x34>
                sd->mdata = 0;
            }
        }
    }
    /* Ignore setting nil on new elements */
    else if(!bbztype_isnil(*bbzheap_obj_at(v))) {
   d42a0:	4628      	mov	r0, r5
   d42a2:	9303      	str	r3, [sp, #12]
   d42a4:	f000 f90e 	bl	d44c4 <bbzheap_obj_at>
   d42a8:	7802      	ldrb	r2, [r0, #0]
   d42aa:	9b03      	ldr	r3, [sp, #12]
   d42ac:	f012 0f07 	tst.w	r2, #7
   d42b0:	d043      	beq.n	d433a <bbztable_set+0x13e>
        if(fseg >= 0) {
   d42b2:	2b00      	cmp	r3, #0
   d42b4:	db1b      	blt.n	d42ee <bbztable_set+0xf2>
            /* 2. We did not find the key, and found an empty slot */
            bbzheap_tseg_elem_set(bbzheap_tseg_at(fseg)->keys[fslot], k);
   d42b6:	2216      	movs	r2, #22
   d42b8:	fb13 f302 	smulbb	r3, r3, r2
   d42bc:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d42c0:	6832      	ldr	r2, [r6, #0]
   d42c2:	9901      	ldr	r1, [sp, #4]
   d42c4:	3302      	adds	r3, #2
   d42c6:	441a      	add	r2, r3
   d42c8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   d42cc:	9902      	ldr	r1, [sp, #8]
   d42ce:	ea6f 4141 	mvn.w	r1, r1, lsl #17
   d42d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
   d42d6:	8311      	strh	r1, [r2, #24]
            bbzheap_tseg_elem_set(bbzheap_tseg_at(fseg)->values[fslot], v);
   d42d8:	6832      	ldr	r2, [r6, #0]
   d42da:	4413      	add	r3, r2
   d42dc:	9a01      	ldr	r2, [sp, #4]
   d42de:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d42e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d42e6:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d42ea:	845d      	strh	r5, [r3, #34]	; 0x22
   d42ec:	e025      	b.n	d433a <bbztable_set+0x13e>
        }
        else {
            /* 3. We did not find the key, nor an empty slot */
            /* Create a new segment */
            uint16_t s;
            if(!bbzheap_tseg_alloc(&s)) return 0;
   d42ee:	f10d 001e 	add.w	r0, sp, #30
   d42f2:	f000 f8f1 	bl	d44d8 <bbzheap_tseg_alloc>
   d42f6:	2800      	cmp	r0, #0
   d42f8:	f000 8094 	beq.w	d4424 <bbztable_set+0x228>
            bbzheap_tseg_next_set(sd, s);
   d42fc:	8aa2      	ldrh	r2, [r4, #20]
   d42fe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d4302:	f402 4140 	and.w	r1, r2, #49152	; 0xc000
   d4306:	f3c3 020d 	ubfx	r2, r3, #0, #14
   d430a:	430a      	orrs	r2, r1
   d430c:	82a2      	strh	r2, [r4, #20]
            /* Set key and value */
            bbzheap_tseg_elem_set(bbzheap_tseg_at(s)->keys[0], k);
   d430e:	6832      	ldr	r2, [r6, #0]
   d4310:	2116      	movs	r1, #22
   d4312:	fb01 2313 	mls	r3, r1, r3, r2
   d4316:	9a02      	ldr	r2, [sp, #8]
   d4318:	ea6f 4242 	mvn.w	r2, r2, lsl #17
   d431c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
   d4320:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
            bbzheap_tseg_elem_set(bbzheap_tseg_at(s)->values[0], v);
   d4324:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d4328:	6833      	ldr	r3, [r6, #0]
   d432a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d432e:	fb01 3312 	mls	r3, r1, r2, r3
   d4332:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d4336:	f8a3 544c 	strh.w	r5, [r3, #1100]	; 0x44c
        }
    }
    /* Success */
    return 1;
   d433a:	2001      	movs	r0, #1
   d433c:	e072      	b.n	d4424 <bbztable_set+0x228>
        * Also, sd points to the last segment visited, and si is its index.
        */
    if(seg >= 0) {
        /* 1. We found the key, change associated value */
        /* NOTE: Setting a value to nil is equivalent to erasing the element from the table */
        if(!bbztype_isnil(*bbzheap_obj_at(v)))
   d433e:	4628      	mov	r0, r5
   d4340:	f000 f8c0 	bl	d44c4 <bbzheap_obj_at>
   d4344:	7802      	ldrb	r2, [r0, #0]
   d4346:	f002 0207 	and.w	r2, r2, #7
   d434a:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   d434e:	2316      	movs	r3, #22
   d4350:	f108 0104 	add.w	r1, r8, #4
   d4354:	b17a      	cbz	r2, d4376 <bbztable_set+0x17a>
            bbzheap_tseg_elem_set(bbzheap_tseg_at(seg)->values[slot], v);
   d4356:	fb1a fa03 	smulbb	sl, sl, r3
   d435a:	f5ca 6a85 	rsb	sl, sl, #1064	; 0x428
   d435e:	6833      	ldr	r3, [r6, #0]
   d4360:	f10a 0a02 	add.w	sl, sl, #2
   d4364:	449a      	add	sl, r3
   d4366:	eb0a 0141 	add.w	r1, sl, r1, lsl #1
   d436a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d436e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d4372:	834d      	strh	r5, [r1, #26]
   d4374:	e7e1      	b.n	d433a <bbztable_set+0x13e>
        else {
            /* Setting nil, erase element */
            bbzheap_tseg_at(seg)->keys[slot] = 0;
   d4376:	fb1a fa03 	smulbb	sl, sl, r3
   d437a:	f5ca 6a85 	rsb	sl, sl, #1064	; 0x428
   d437e:	6833      	ldr	r3, [r6, #0]
   d4380:	f10a 0a02 	add.w	sl, sl, #2
   d4384:	4453      	add	r3, sl
   d4386:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   d438a:	f888 2018 	strb.w	r2, [r8, #24]
   d438e:	f888 2019 	strb.w	r2, [r8, #25]
            bbzheap_tseg_at(seg)->values[slot] = 0;
   d4392:	6833      	ldr	r3, [r6, #0]
   d4394:	449a      	add	sl, r3
   d4396:	eb0a 0141 	add.w	r1, sl, r1, lsl #1
   d439a:	768a      	strb	r2, [r1, #26]
   d439c:	76ca      	strb	r2, [r1, #27]
            /* Is segment empty? */
            for(uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
                if(bbzheap_tseg_elem_isvalid(sd->keys[i])) return 1;
   d439e:	f934 3010 	ldrsh.w	r3, [r4, r0, lsl #1]
   d43a2:	2b00      	cmp	r3, #0
   d43a4:	dbc9      	blt.n	d433a <bbztable_set+0x13e>
   d43a6:	3001      	adds	r0, #1
        else {
            /* Setting nil, erase element */
            bbzheap_tseg_at(seg)->keys[slot] = 0;
            bbzheap_tseg_at(seg)->values[slot] = 0;
            /* Is segment empty? */
            for(uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
   d43a8:	2805      	cmp	r0, #5
   d43aa:	d1f8      	bne.n	d439e <bbztable_set+0x1a2>
                if(bbzheap_tseg_elem_isvalid(sd->keys[i])) return 1;
            }
            /* If we get here, it's because the segment is empty */
            /* Is it the first segment? */
            if(si == bbzheap_obj_at(t)->t.value) {
   d43ac:	4658      	mov	r0, fp
   d43ae:	f000 f889 	bl	d44c4 <bbzheap_obj_at>
   d43b2:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d43b6:	429f      	cmp	r7, r3
   d43b8:	d10f      	bne.n	d43da <bbztable_set+0x1de>
                /* Yes; is it the only segment for this table? */
                if(bbzheap_tseg_hasnext(sd)) {
   d43ba:	8aa3      	ldrh	r3, [r4, #20]
   d43bc:	f643 72ff 	movw	r2, #16383	; 0x3fff
   d43c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d43c4:	4293      	cmp	r3, r2
   d43c6:	d0b8      	beq.n	d433a <bbztable_set+0x13e>
                    /* No, there's more segments */
                    /* Update the table segment index */
                    bbzheap_obj_at(t)->t.value = bbzheap_tseg_next_get(sd);
   d43c8:	4658      	mov	r0, fp
   d43ca:	f000 f87b 	bl	d44c4 <bbzheap_obj_at>
   d43ce:	8aa3      	ldrh	r3, [r4, #20]
   d43d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d43d4:	f8a0 3001 	strh.w	r3, [r0, #1]
   d43d8:	e020      	b.n	d441c <bbztable_set+0x220>
                }
            }
            else {
                /* No, the segment is not the first */
                /* Find the preceding segment */
                uint16_t pi = bbzheap_obj_at(t)->t.value;
   d43da:	4658      	mov	r0, fp
   d43dc:	f000 f872 	bl	d44c4 <bbzheap_obj_at>
                bbzheap_tseg_t* pd = bbzheap_tseg_at(pi);
   d43e0:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d43e4:	6835      	ldr	r5, [r6, #0]
   d43e6:	2216      	movs	r2, #22
   d43e8:	4353      	muls	r3, r2
   d43ea:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d43ee:	3518      	adds	r5, #24
   d43f0:	3302      	adds	r3, #2
   d43f2:	442b      	add	r3, r5
                while(bbzheap_tseg_next_get(pd) != si) {
                    pi = bbzheap_tseg_next_get(pd);
                    pd = bbzheap_tseg_at(pi);
   d43f4:	4610      	mov	r0, r2
            else {
                /* No, the segment is not the first */
                /* Find the preceding segment */
                uint16_t pi = bbzheap_obj_at(t)->t.value;
                bbzheap_tseg_t* pd = bbzheap_tseg_at(pi);
                while(bbzheap_tseg_next_get(pd) != si) {
   d43f6:	8a99      	ldrh	r1, [r3, #20]
   d43f8:	f3c1 020d 	ubfx	r2, r1, #0, #14
   d43fc:	4297      	cmp	r7, r2
   d43fe:	d006      	beq.n	d440e <bbztable_set+0x212>
                    pi = bbzheap_tseg_next_get(pd);
                    pd = bbzheap_tseg_at(pi);
   d4400:	fb00 f302 	mul.w	r3, r0, r2
   d4404:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d4408:	3302      	adds	r3, #2
   d440a:	442b      	add	r3, r5
   d440c:	e7f3      	b.n	d43f6 <bbztable_set+0x1fa>
                }
                /* Set the next of the preceding to the next of current */
                bbzheap_tseg_next_set(pd, bbzheap_tseg_next_get(sd));
   d440e:	8aa2      	ldrh	r2, [r4, #20]
   d4410:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
   d4414:	f3c2 020d 	ubfx	r2, r2, #0, #14
   d4418:	4311      	orrs	r1, r2
   d441a:	8299      	strh	r1, [r3, #20]
                /* Invalidate the current segment */
                sd->mdata = 0;
   d441c:	2300      	movs	r3, #0
   d441e:	7523      	strb	r3, [r4, #20]
   d4420:	7563      	strb	r3, [r4, #21]
   d4422:	e78a      	b.n	d433a <bbztable_set+0x13e>
            bbzheap_tseg_elem_set(bbzheap_tseg_at(s)->values[0], v);
        }
    }
    /* Success */
    return 1;
}
   d4424:	b009      	add	sp, #36	; 0x24
   d4426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d442a:	bf00      	nop
   d442c:	2003e3f4 	.word	0x2003e3f4

000d4430 <bbztype_cmp>:

/****************************************/
/****************************************/

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
   d4430:	7802      	ldrb	r2, [r0, #0]
   d4432:	780b      	ldrb	r3, [r1, #0]
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
   d4434:	f012 0207 	ands.w	r2, r2, #7
   d4438:	d105      	bne.n	d4446 <bbztype_cmp+0x16>
        if(bbztype_isnil(*b)) return 0;
   d443a:	f013 0307 	ands.w	r3, r3, #7
   d443e:	bf18      	it	ne
   d4440:	2301      	movne	r3, #1
   d4442:	4258      	negs	r0, r3
   d4444:	4770      	bx	lr
        else return -1;
    }
    if(bbztype_isnil(*b)) return 1;
   d4446:	f013 0307 	ands.w	r3, r3, #7
   d444a:	d033      	beq.n	d44b4 <bbztype_cmp+0x84>
    /* If both operands are integer, perform integer comparison */
    if(bbztype_isint(*a) && bbztype_isint(*b)) {
   d444c:	2a01      	cmp	r2, #1
   d444e:	d10b      	bne.n	d4468 <bbztype_cmp+0x38>
   d4450:	2b01      	cmp	r3, #1
   d4452:	d131      	bne.n	d44b8 <bbztype_cmp+0x88>
        if(a->i.value < b->i.value) return -1;
   d4454:	f9b0 2001 	ldrsh.w	r2, [r0, #1]
   d4458:	f9b1 3001 	ldrsh.w	r3, [r1, #1]
   d445c:	429a      	cmp	r2, r3
   d445e:	db2d      	blt.n	d44bc <bbztype_cmp+0x8c>

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
        if(bbztype_isnil(*b)) return 0;
   d4460:	bfcc      	ite	gt
   d4462:	2001      	movgt	r0, #1
   d4464:	2000      	movle	r0, #0
   d4466:	e010      	b.n	d448a <bbztype_cmp+0x5a>
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
#else
    if(bbztype_isfloat(*a) || bbztype_isfloat(*b)) {
   d4468:	2a02      	cmp	r2, #2
   d446a:	d005      	beq.n	d4478 <bbztype_cmp+0x48>
   d446c:	2b02      	cmp	r3, #2
   d446e:	d003      	beq.n	d4478 <bbztype_cmp+0x48>
        if(a->f.value > b->f.value) return  1;
        return 0;
    }
#endif
    /* If operands are strings, perform equality comparison */
    if(bbztype_isstring(*a) && bbztype_isstring(*b)) {
   d4470:	2a03      	cmp	r2, #3
   d4472:	d10c      	bne.n	d448e <bbztype_cmp+0x5e>
   d4474:	2b03      	cmp	r3, #3
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
#else
    if(bbztype_isfloat(*a) || bbztype_isfloat(*b)) {
   d4476:	d121      	bne.n	d44bc <bbztype_cmp+0x8c>
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    if (bbztype_istable(*a) && bbztype_istable(*b)) {
        uint16_t x = a->t.value;
   d4478:	f8b0 2001 	ldrh.w	r2, [r0, #1]
        uint16_t y = b->t.value;
   d447c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        if(x < y) return -1;
   d4480:	429a      	cmp	r2, r3
   d4482:	d31b      	bcc.n	d44bc <bbztype_cmp+0x8c>

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
        if(bbztype_isnil(*b)) return 0;
   d4484:	bf8c      	ite	hi
   d4486:	2001      	movhi	r0, #1
   d4488:	2000      	movls	r0, #0
   d448a:	b240      	sxtb	r0, r0
   d448c:	4770      	bx	lr
        uint16_t y = b->s.value;
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    if (bbztype_istable(*a) && bbztype_istable(*b)) {
   d448e:	2a04      	cmp	r2, #4
   d4490:	d101      	bne.n	d4496 <bbztype_cmp+0x66>
   d4492:	2b04      	cmp	r3, #4
   d4494:	e7ef      	b.n	d4476 <bbztype_cmp+0x46>
        uint16_t y = b->t.value;
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    if(bbztype_isuserdata(*a) && bbztype_isuserdata(*b)) {
   d4496:	2a06      	cmp	r2, #6
   d4498:	d110      	bne.n	d44bc <bbztype_cmp+0x8c>
   d449a:	2b06      	cmp	r3, #6
   d449c:	d10e      	bne.n	d44bc <bbztype_cmp+0x8c>
        uintptr_t x = a->u.value;
   d449e:	f8d0 3001 	ldr.w	r3, [r0, #1]
        uintptr_t y = b->u.value;
   d44a2:	f8d1 0001 	ldr.w	r0, [r1, #1]
        if(x < y) return -1;
   d44a6:	4283      	cmp	r3, r0
   d44a8:	d308      	bcc.n	d44bc <bbztype_cmp+0x8c>

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
        if(bbztype_isnil(*b)) return 0;
   d44aa:	4283      	cmp	r3, r0
   d44ac:	bf94      	ite	ls
   d44ae:	2000      	movls	r0, #0
   d44b0:	2001      	movhi	r0, #1
   d44b2:	4770      	bx	lr
        else return -1;
    }
    if(bbztype_isnil(*b)) return 1;
   d44b4:	2001      	movs	r0, #1
   d44b6:	4770      	bx	lr
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
#else
    if(bbztype_isfloat(*a) || bbztype_isfloat(*b)) {
   d44b8:	2b02      	cmp	r3, #2
   d44ba:	e7dc      	b.n	d4476 <bbztype_cmp+0x46>
        else return -1;
    }
    if(bbztype_isnil(*b)) return 1;
    /* If both operands are integer, perform integer comparison */
    if(bbztype_isint(*a) && bbztype_isint(*b)) {
        if(a->i.value < b->i.value) return -1;
   d44bc:	f04f 30ff 	mov.w	r0, #4294967295
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    return -1;
}
   d44c0:	4770      	bx	lr
	...

000d44c4 <bbzheap_obj_at>:

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d44c4:	4b03      	ldr	r3, [pc, #12]	; (d44d4 <bbzheap_obj_at+0x10>)
   d44c6:	681b      	ldr	r3, [r3, #0]
   d44c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d44cc:	3318      	adds	r3, #24
}
   d44ce:	4418      	add	r0, r3
   d44d0:	4770      	bx	lr
   d44d2:	bf00      	nop
   d44d4:	2003e3f4 	.word	0x2003e3f4

000d44d8 <bbzheap_tseg_alloc>:
    }
    /* Success */
    return 1;
}

uint8_t bbzheap_tseg_alloc(bbzheap_idx_t* s) {
   d44d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Look for empty slot */
    int16_t qot = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d44dc:	492e      	ldr	r1, [pc, #184]	; (d4598 <bbzheap_tseg_alloc+0xc0>)
   d44de:	680f      	ldr	r7, [r1, #0]
   d44e0:	697e      	ldr	r6, [r7, #20]
   d44e2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
   d44e6:	1b9b      	subs	r3, r3, r6
   d44e8:	b21b      	sxth	r3, r3
   d44ea:	2216      	movs	r2, #22
   d44ec:	f207 4542 	addw	r5, r7, #1090	; 0x442
   d44f0:	fbb3 f3f2 	udiv	r3, r3, r2
    for(int16_t i = 0;
   d44f4:	2400      	movs	r4, #0
    return 1;
}

uint8_t bbzheap_tseg_alloc(bbzheap_idx_t* s) {
    /* Look for empty slot */
    int16_t qot = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d44f6:	fa0f fe83 	sxth.w	lr, r3
   d44fa:	f06f 0c15 	mvn.w	ip, #21
    for(int16_t i = 0;
   d44fe:	b222      	sxth	r2, r4
   d4500:	4572      	cmp	r2, lr
   d4502:	da25      	bge.n	d4550 <bbzheap_tseg_alloc+0x78>
        i < qot;
        ++i) {
        if(!bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) {
   d4504:	f9b5 9014 	ldrsh.w	r9, [r5, #20]
   d4508:	fb0c f204 	mul.w	r2, ip, r4
   d450c:	f1b9 0f00 	cmp.w	r9, #0
   d4510:	f202 422a 	addw	r2, r2, #1066	; 0x42a
   d4514:	f104 0801 	add.w	r8, r4, #1
   d4518:	f1a5 0516 	sub.w	r5, r5, #22
   d451c:	db16      	blt.n	d454c <bbzheap_tseg_alloc+0x74>
            /* Empty slot found */
            /* Set result */
            *s = (uint16_t)i;
   d451e:	8004      	strh	r4, [r0, #0]
            return bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_at(i));
   d4520:	680b      	ldr	r3, [r1, #0]
   d4522:	3318      	adds	r3, #24
   d4524:	4413      	add	r3, r2
/****************************************/
/****************************************/

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
   d4526:	f04f 32ff 	mov.w	r2, #4294967295
   d452a:	751a      	strb	r2, [r3, #20]
   d452c:	755a      	strb	r2, [r3, #21]
   d452e:	2200      	movs	r2, #0
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
        x->keys[j] = 0;
   d4530:	4611      	mov	r1, r2
   d4532:	eb03 0042 	add.w	r0, r3, r2, lsl #1
   d4536:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
   d453a:	3201      	adds	r2, #1

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d453c:	2a05      	cmp	r2, #5
        x->keys[j] = 0;
   d453e:	7041      	strb	r1, [r0, #1]
        x->values[j] = 0;
   d4540:	7281      	strb	r1, [r0, #10]
   d4542:	72c1      	strb	r1, [r0, #11]

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d4544:	d1f5      	bne.n	d4532 <bbzheap_tseg_alloc+0x5a>
        ++i) {
        if(!bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) {
            /* Empty slot found */
            /* Set result */
            *s = (uint16_t)i;
            return bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_at(i));
   d4546:	2001      	movs	r0, #1
   d4548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d454c:	4644      	mov	r4, r8
   d454e:	e7d6      	b.n	d44fe <bbzheap_tseg_alloc+0x26>
        }
    }
    /* Make sure there is room */
    if(vm->heap.ltseg - sizeof(bbzheap_tseg_t) < vm->heap.rtobj) return 0;
   d4550:	693c      	ldr	r4, [r7, #16]
   d4552:	f1a6 0216 	sub.w	r2, r6, #22
   d4556:	42a2      	cmp	r2, r4
   d4558:	d31b      	bcc.n	d4592 <bbzheap_tseg_alloc+0xba>
    /* Set result */
    *s = (uint16_t)qot;
   d455a:	8003      	strh	r3, [r0, #0]
    /* Update pointer to leftmost valid segment */
    vm->heap.ltseg -= sizeof(bbzheap_tseg_t);
   d455c:	680b      	ldr	r3, [r1, #0]
   d455e:	6958      	ldr	r0, [r3, #20]
   d4560:	f1a0 0216 	sub.w	r2, r0, #22
   d4564:	615a      	str	r2, [r3, #20]
/****************************************/
/****************************************/

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
   d4566:	f04f 33ff 	mov.w	r3, #4294967295
   d456a:	f800 3c02 	strb.w	r3, [r0, #-2]
   d456e:	f800 3c01 	strb.w	r3, [r0, #-1]
   d4572:	2300      	movs	r3, #0
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
        x->keys[j] = 0;
   d4574:	4619      	mov	r1, r3
   d4576:	eb00 0243 	add.w	r2, r0, r3, lsl #1
   d457a:	3301      	adds	r3, #1

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d457c:	2b05      	cmp	r3, #5
        x->keys[j] = 0;
   d457e:	f802 1c16 	strb.w	r1, [r2, #-22]
   d4582:	f802 1c15 	strb.w	r1, [r2, #-21]
        x->values[j] = 0;
   d4586:	f802 1c0c 	strb.w	r1, [r2, #-12]
   d458a:	f802 1c0b 	strb.w	r1, [r2, #-11]

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d458e:	d1f2      	bne.n	d4576 <bbzheap_tseg_alloc+0x9e>
   d4590:	e7d9      	b.n	d4546 <bbzheap_tseg_alloc+0x6e>
            *s = (uint16_t)i;
            return bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_at(i));
        }
    }
    /* Make sure there is room */
    if(vm->heap.ltseg - sizeof(bbzheap_tseg_t) < vm->heap.rtobj) return 0;
   d4592:	2000      	movs	r0, #0
    /* Set result */
    *s = (uint16_t)qot;
    /* Update pointer to leftmost valid segment */
    vm->heap.ltseg -= sizeof(bbzheap_tseg_t);
    return bbzheap_tseg_alloc_prepare_seg((bbzheap_tseg_t*)vm->heap.ltseg);
}
   d4594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4598:	2003e3f4 	.word	0x2003e3f4

000d459c <bbzheap_obj_alloc_prepare_obj>:
}

/****************************************/
/****************************************/

static uint8_t bbzheap_obj_alloc_prepare_obj(uint8_t t, bbzobj_t* x) {
   d459c:	b508      	push	{r3, lr}
    /* Set valid bit and type */
    x->mdata = ((t << BBZTYPE_TYPEIDX) & BBZTYPE_MASK) | BBZHEAP_OBJ_MASK_VALID;
   d459e:	f000 0307 	and.w	r3, r0, #7
   d45a2:	f043 0308 	orr.w	r3, r3, #8
    /* Take care of special initialisations */
    if (t == BBZTYPE_TABLE) {
   d45a6:	2804      	cmp	r0, #4
/****************************************/
/****************************************/

static uint8_t bbzheap_obj_alloc_prepare_obj(uint8_t t, bbzobj_t* x) {
    /* Set valid bit and type */
    x->mdata = ((t << BBZTYPE_TYPEIDX) & BBZTYPE_MASK) | BBZHEAP_OBJ_MASK_VALID;
   d45a8:	700b      	strb	r3, [r1, #0]
    /* Take care of special initialisations */
    if (t == BBZTYPE_TABLE) {
   d45aa:	d106      	bne.n	d45ba <bbzheap_obj_alloc_prepare_obj+0x1e>
        if (!bbzheap_tseg_alloc(&x->t.value)) return 0;
   d45ac:	1c48      	adds	r0, r1, #1
   d45ae:	f7ff ff93 	bl	d44d8 <bbzheap_tseg_alloc>
    else if (t == BBZTYPE_CLOSURE) {
        bbzclosure_unmake_lambda(*x);
        (x)->l.value.actrec = BBZHEAP_CLOSURE_DFLT_ACTREC; // Default activation record
    }
    /* Success */
    return 1;
   d45b2:	3000      	adds	r0, #0
   d45b4:	bf18      	it	ne
   d45b6:	2001      	movne	r0, #1
   d45b8:	bd08      	pop	{r3, pc}
    x->mdata = ((t << BBZTYPE_TYPEIDX) & BBZTYPE_MASK) | BBZHEAP_OBJ_MASK_VALID;
    /* Take care of special initialisations */
    if (t == BBZTYPE_TABLE) {
        if (!bbzheap_tseg_alloc(&x->t.value)) return 0;
    }
    else if (t == BBZTYPE_CLOSURE) {
   d45ba:	2805      	cmp	r0, #5
        bbzclosure_unmake_lambda(*x);
        (x)->l.value.actrec = BBZHEAP_CLOSURE_DFLT_ACTREC; // Default activation record
   d45bc:	bf04      	itt	eq
   d45be:	23ff      	moveq	r3, #255	; 0xff
   d45c0:	708b      	strbeq	r3, [r1, #2]
    }
    /* Success */
    return 1;
   d45c2:	2001      	movs	r0, #1
}
   d45c4:	bd08      	pop	{r3, pc}
	...

000d45c8 <bbzheap_obj_alloc>:

uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
   d45c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d45cc:	4c20      	ldr	r4, [pc, #128]	; (d4650 <bbzheap_obj_alloc+0x88>)
   d45ce:	6827      	ldr	r7, [r4, #0]
   d45d0:	693d      	ldr	r5, [r7, #16]
   d45d2:	f107 0e18 	add.w	lr, r7, #24
   d45d6:	ebce 0205 	rsb	r2, lr, r5
}

uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
   d45da:	231c      	movs	r3, #28
   d45dc:	46a4      	mov	ip, r4
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d45de:	b292      	uxth	r2, r2
   d45e0:	2605      	movs	r6, #5
   d45e2:	fbb2 f6f6 	udiv	r6, r2, r6
}

uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
   d45e6:	42b3      	cmp	r3, r6
   d45e8:	d220      	bcs.n	d462c <bbzheap_obj_alloc+0x64>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d45ea:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   d45ee:	eb0e 0804 	add.w	r8, lr, r4
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
        ++i) {
        if(!bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d45f2:	f81e 2004 	ldrb.w	r2, [lr, r4]
   d45f6:	f012 0f08 	tst.w	r2, #8
   d45fa:	d105      	bne.n	d4608 <bbzheap_obj_alloc+0x40>
            /* Empty slot found */
            /* Set result */
            *o = i;
   d45fc:	800b      	strh	r3, [r1, #0]

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d45fe:	f8dc 1000 	ldr.w	r1, [ip]
   d4602:	3118      	adds	r1, #24
        ++i) {
        if(!bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
            /* Empty slot found */
            /* Set result */
            *o = i;
            return bbzheap_obj_alloc_prepare_obj(t, bbzheap_obj_at(i));
   d4604:	4421      	add	r1, r4
   d4606:	e01b      	b.n	d4640 <bbzheap_obj_alloc+0x78>
        }
        else {
            if (t == BBZTYPE_STRING &&
   d4608:	2803      	cmp	r0, #3
   d460a:	d10c      	bne.n	d4626 <bbzheap_obj_alloc+0x5e>
   d460c:	f002 0207 	and.w	r2, r2, #7
   d4610:	2a03      	cmp	r2, #3
   d4612:	d108      	bne.n	d4626 <bbzheap_obj_alloc+0x5e>
                bbztype_isstring(*bbzheap_obj_at(i)) &&
   d4614:	880c      	ldrh	r4, [r1, #0]
   d4616:	f8b8 2001 	ldrh.w	r2, [r8, #1]
   d461a:	4294      	cmp	r4, r2
   d461c:	d103      	bne.n	d4626 <bbzheap_obj_alloc+0x5e>
                *o == bbzheap_obj_at(i)->s.value) {
                *o = i;
   d461e:	800b      	strh	r3, [r1, #0]
                return 1;
   d4620:	2001      	movs	r0, #1
   d4622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
        ++i) {
   d4626:	3301      	adds	r3, #1
   d4628:	b29b      	uxth	r3, r3
   d462a:	e7dc      	b.n	d45e6 <bbzheap_obj_alloc+0x1e>
            }
        }
    }
    /* No empty slot found, must create a new one */
    /* ...but first, make sure there is room */
    if(vm->heap.rtobj + sizeof(bbzobj_t) > vm->heap.ltseg) { return 0; }
   d462c:	1d6b      	adds	r3, r5, #5
   d462e:	697d      	ldr	r5, [r7, #20]
   d4630:	42ab      	cmp	r3, r5
   d4632:	d809      	bhi.n	d4648 <bbzheap_obj_alloc+0x80>
    /* Set result */
    *o = (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d4634:	800e      	strh	r6, [r1, #0]
    vm->heap.rtobj += sizeof(bbzobj_t);
   d4636:	f8dc 3000 	ldr.w	r3, [ip]
   d463a:	6919      	ldr	r1, [r3, #16]
   d463c:	1d4a      	adds	r2, r1, #5
   d463e:	611a      	str	r2, [r3, #16]
    return bbzheap_obj_alloc_prepare_obj(t, (bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t)));
}
   d4640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* ...but first, make sure there is room */
    if(vm->heap.rtobj + sizeof(bbzobj_t) > vm->heap.ltseg) { return 0; }
    /* Set result */
    *o = (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
    vm->heap.rtobj += sizeof(bbzobj_t);
    return bbzheap_obj_alloc_prepare_obj(t, (bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t)));
   d4644:	f7ff bfaa 	b.w	d459c <bbzheap_obj_alloc_prepare_obj>
            }
        }
    }
    /* No empty slot found, must create a new one */
    /* ...but first, make sure there is room */
    if(vm->heap.rtobj + sizeof(bbzobj_t) > vm->heap.ltseg) { return 0; }
   d4648:	2000      	movs	r0, #0
    /* Set result */
    *o = (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
    vm->heap.rtobj += sizeof(bbzobj_t);
    return bbzheap_obj_alloc_prepare_obj(t, (bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t)));
}
   d464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d464e:	bf00      	nop
   d4650:	2003e3f4 	.word	0x2003e3f4

000d4654 <_Z9bbz_delayv>:

    Serial.printlnf("Dat number %d", dat_num);
    bbzvm_ret0();
}

void bbz_delay(){
   d4654:	b507      	push	{r0, r1, r2, lr}
    delay((uint16_t)bbzheap_obj_at(bbzvm_locals_at(1))->i.value);
   d4656:	4b0a      	ldr	r3, [pc, #40]	; (d4680 <_Z9bbz_delayv+0x2c>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	f10d 0206 	add.w	r2, sp, #6
   d465e:	2101      	movs	r1, #1
   d4660:	8998      	ldrh	r0, [r3, #12]
   d4662:	f7ff fd4b 	bl	d40fc <bbzdarray_get>
   d4666:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d466a:	f7ff ff2b 	bl	d44c4 <bbzheap_obj_at>
   d466e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   d4672:	f000 ff83 	bl	d557c <delay>

    bbzvm_ret0();
   d4676:	f000 f919 	bl	d48ac <bbzvm_ret0>
}
   d467a:	b003      	add	sp, #12
   d467c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4680:	2003e3f4 	.word	0x2003e3f4

000d4684 <_Z16bzz_print_numberv>:
 * Date:
 */

#include "bbzparticle.h"

void bzz_print_number(){
   d4684:	b513      	push	{r0, r1, r4, lr}
    bbzvm_assert_lnum(1);
   d4686:	4c11      	ldr	r4, [pc, #68]	; (d46cc <_Z16bzz_print_numberv+0x48>)
   d4688:	6823      	ldr	r3, [r4, #0]
   d468a:	8998      	ldrh	r0, [r3, #12]
   d468c:	f7ff fd86 	bl	d419c <bbzdarray_size>
   d4690:	2802      	cmp	r0, #2
   d4692:	d003      	beq.n	d469c <_Z16bzz_print_numberv+0x18>
   d4694:	2003      	movs	r0, #3
   d4696:	f000 f87b 	bl	d4790 <bbzvm_seterror>
   d469a:	e015      	b.n	d46c8 <_Z16bzz_print_numberv+0x44>

    int dat_num = (uint16_t)bbzheap_obj_at(bbzvm_locals_at(1))->i.value;
   d469c:	6823      	ldr	r3, [r4, #0]
   d469e:	f10d 0206 	add.w	r2, sp, #6
   d46a2:	2101      	movs	r1, #1
   d46a4:	8998      	ldrh	r0, [r3, #12]
   d46a6:	f7ff fd29 	bl	d40fc <bbzdarray_get>
   d46aa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d46ae:	f7ff ff09 	bl	d44c4 <bbzheap_obj_at>
   d46b2:	f8b0 4001 	ldrh.w	r4, [r0, #1]

    Serial.printlnf("Dat number %d", dat_num);
   d46b6:	f000 fe2d 	bl	d5314 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d46ba:	4623      	mov	r3, r4
   d46bc:	4a04      	ldr	r2, [pc, #16]	; (d46d0 <_Z16bzz_print_numberv+0x4c>)
   d46be:	2101      	movs	r1, #1
   d46c0:	f000 ffc7 	bl	d5652 <_ZN5Print11printf_implEbPKcz>
    bbzvm_ret0();
   d46c4:	f000 f8f2 	bl	d48ac <bbzvm_ret0>
}
   d46c8:	b002      	add	sp, #8
   d46ca:	bd10      	pop	{r4, pc}
   d46cc:	2003e3f4 	.word	0x2003e3f4
   d46d0:	000d5b48 	.word	0x000d5b48

000d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>:
   d46d4:	460a      	mov	r2, r1
   d46d6:	2101      	movs	r1, #1
   d46d8:	f000 bfbb 	b.w	d5652 <_ZN5Print11printf_implEbPKcz>

000d46dc <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

    //bbz_particle_start(NULL);
   d46dc:	b508      	push	{r3, lr}
    Serial.printlnf("DEVICE CRASHED");

   d46de:	f000 fe19 	bl	d5314 <_Z16_fetch_usbserialv>
   d46e2:	4902      	ldr	r1, [pc, #8]	; (d46ec <loop+0x10>)
   d46e4:	f7ff fff6 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
   d46e8:	bd08      	pop	{r3, pc}
   d46ea:	bf00      	nop
   d46ec:	000d5b67 	.word	0x000d5b67

000d46f0 <setup>:

    bbzvm_ret0();
}

// setup() runs once, when the device is first turned on.
void setup() {
   d46f0:	b538      	push	{r3, r4, r5, lr}

    Serial.printlnf("Start");
   d46f2:	f000 fe0f 	bl	d5314 <_Z16_fetch_usbserialv>
   d46f6:	4914      	ldr	r1, [pc, #80]	; (d4748 <setup+0x58>)
   d46f8:	f7ff ffec 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>

    bbz_particle_init();
   d46fc:	f000 f836 	bl	d476c <_Z17bbz_particle_initv>

    Serial.printlnf("Registering functions");
   d4700:	4b12      	ldr	r3, [pc, #72]	; (d474c <setup+0x5c>)
   d4702:	681b      	ldr	r3, [r3, #0]
   d4704:	2401      	movs	r4, #1
   d4706:	f883 4599 	strb.w	r4, [r3, #1433]	; 0x599

    bbzvm_function_register(BBZSTRING_ID(print), bzz_print_number);
   d470a:	f000 fe03 	bl	d5314 <_Z16_fetch_usbserialv>
   d470e:	4605      	mov	r5, r0
   d4710:	f001 f805 	bl	d571e <_ZN11SystemClass10freeMemoryEv>
   d4714:	4a0e      	ldr	r2, [pc, #56]	; (d4750 <setup+0x60>)
   d4716:	4603      	mov	r3, r0
   d4718:	4621      	mov	r1, r4
   d471a:	4628      	mov	r0, r5
   d471c:	f000 ff99 	bl	d5652 <_ZN5Print11printf_implEbPKcz>

    Serial.printlnf("First done ");
   d4720:	490c      	ldr	r1, [pc, #48]	; (d4754 <setup+0x64>)
   d4722:	2002      	movs	r0, #2
   d4724:	f000 f9bc 	bl	d4aa0 <bbzvm_function_register>
    bbzvm_function_register(BBZSTRING_ID(delay), bbz_delay);

   d4728:	f000 fdf4 	bl	d5314 <_Z16_fetch_usbserialv>
   d472c:	490a      	ldr	r1, [pc, #40]	; (d4758 <setup+0x68>)
   d472e:	f7ff ffd1 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>

   d4732:	490a      	ldr	r1, [pc, #40]	; (d475c <setup+0x6c>)
   d4734:	2003      	movs	r0, #3
   d4736:	f000 f9b3 	bl	d4aa0 <bbzvm_function_register>
    Serial.printlnf("INIT DONE");
}

   d473a:	f000 fdeb 	bl	d5314 <_Z16_fetch_usbserialv>
   d473e:	4908      	ldr	r1, [pc, #32]	; (d4760 <setup+0x70>)
   d4740:	f7ff ffc8 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
   d4744:	bd38      	pop	{r3, r4, r5, pc}
   d4746:	bf00      	nop
   d4748:	000d5b76 	.word	0x000d5b76
   d474c:	2003e3f4 	.word	0x2003e3f4
   d4750:	000d5b7c 	.word	0x000d5b7c
   d4754:	000d4685 	.word	0x000d4685
   d4758:	000d5b95 	.word	0x000d5b95
   d475c:	000d4655 	.word	0x000d4655
   d4760:	000d5ba1 	.word	0x000d5ba1

000d4764 <_GLOBAL__sub_I__Z16bzz_print_numberv>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4764:	f000 baa0 	b.w	d4ca8 <HAL_Pin_Map>

000d4768 <_GLOBAL__sub_I__Z15bbzmessage_sendPK9message_t>:
   d4768:	f000 ba9e 	b.w	d4ca8 <HAL_Pin_Map>

000d476c <_Z17bbz_particle_initv>:

void bbzkilo_err_receiver(bbzvm_error errcode){
    Serial.printlnf("ERROR %d ", errcode);
}

void bbz_particle_init(){
   d476c:	b508      	push	{r3, lr}
    Serial.begin(9600);
   d476e:	f000 fdd1 	bl	d5314 <_Z16_fetch_usbserialv>
   d4772:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4776:	f000 fdc1 	bl	d52fc <_ZN9USBSerial5beginEl>
    vm = &bbz_vm_obj;
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <_Z17bbz_particle_initv+0x18>)
   d477c:	4a02      	ldr	r2, [pc, #8]	; (d4788 <_Z17bbz_particle_initv+0x1c>)
   d477e:	601a      	str	r2, [r3, #0]
   d4780:	bd08      	pop	{r3, pc}
   d4782:	bf00      	nop
   d4784:	2003e3f4 	.word	0x2003e3f4
   d4788:	2003dd90 	.word	0x2003dd90

000d478c <_GLOBAL__sub_I_bbz_vm_obj>:
   d478c:	f000 ba8c 	b.w	d4ca8 <HAL_Pin_Map>

000d4790 <bbzvm_seterror>:
/****************************************/
/****************************************/

void bbzvm_seterror(bbzvm_error errcode) {
    // Set the error
    vm->state = BBZVM_STATE_ERROR;
   d4790:	4b04      	ldr	r3, [pc, #16]	; (d47a4 <bbzvm_seterror+0x14>)
   d4792:	681b      	ldr	r3, [r3, #0]
   d4794:	2204      	movs	r2, #4
   d4796:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
    vm->error = errcode;
   d479a:	f883 059a 	strb.w	r0, [r3, #1434]	; 0x59a
    // Call the error receiver function.
    (*vm->error_receiver_fun)(errcode);
   d479e:	681b      	ldr	r3, [r3, #0]
   d47a0:	4718      	bx	r3
   d47a2:	bf00      	nop
   d47a4:	2003e3f4 	.word	0x2003e3f4

000d47a8 <bbzclosure_new.part.5>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzuserdata_new(void* val) {
   d47a8:	b508      	push	{r3, lr}
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o, vm->nil);
   d47aa:	200d      	movs	r0, #13
   d47ac:	f7ff fff0 	bl	d4790 <bbzvm_seterror>
   d47b0:	4b02      	ldr	r3, [pc, #8]	; (d47bc <bbzclosure_new.part.5+0x14>)
   d47b2:	681b      	ldr	r3, [r3, #0]
    bbzheap_obj_at(o)->u.value = (uintptr_t)val;
    return o;
}
   d47b4:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
   d47b8:	bd08      	pop	{r3, pc}
   d47ba:	bf00      	nop
   d47bc:	2003e3f4 	.word	0x2003e3f4

000d47c0 <bbzstring_get>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzstring_get(uint16_t val) {
   d47c0:	b513      	push	{r0, r1, r4, lr}
    bbzheap_idx_t o = val;
   d47c2:	a902      	add	r1, sp, #8
   d47c4:	4604      	mov	r4, r0
   d47c6:	f821 0d02 	strh.w	r0, [r1, #-2]!
    bbzvm_assert_mem_alloc(BBZTYPE_STRING, &o, vm->nil);
   d47ca:	2003      	movs	r0, #3
   d47cc:	f7ff fefc 	bl	d45c8 <bbzheap_obj_alloc>
   d47d0:	b910      	cbnz	r0, d47d8 <bbzstring_get+0x18>
   d47d2:	f7ff ffe9 	bl	d47a8 <bbzclosure_new.part.5>
   d47d6:	e007      	b.n	d47e8 <bbzstring_get+0x28>
    bbzheap_obj_at(o)->s.value = val;
   d47d8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d47dc:	f7ff fe72 	bl	d44c4 <bbzheap_obj_at>
   d47e0:	f8a0 4001 	strh.w	r4, [r0, #1]
    return o;
   d47e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d47e8:	b002      	add	sp, #8
   d47ea:	bd10      	pop	{r4, pc}

000d47ec <bbzclosure_new>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzclosure_new(intptr_t val) {
   d47ec:	b513      	push	{r0, r1, r4, lr}
   d47ee:	4604      	mov	r4, r0
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_CLOSURE, &o, vm->nil);
   d47f0:	f10d 0106 	add.w	r1, sp, #6
   d47f4:	2005      	movs	r0, #5
   d47f6:	f7ff fee7 	bl	d45c8 <bbzheap_obj_alloc>
   d47fa:	b910      	cbnz	r0, d4802 <bbzclosure_new+0x16>
   d47fc:	f7ff ffd4 	bl	d47a8 <bbzclosure_new.part.5>
   d4800:	e007      	b.n	d4812 <bbzclosure_new+0x26>
    bbzheap_obj_at(o)->c.value = (void(*)())val;
   d4802:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4806:	f7ff fe5d 	bl	d44c4 <bbzheap_obj_at>
   d480a:	f8c0 4001 	str.w	r4, [r0, #1]
    return o;
   d480e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d4812:	b002      	add	sp, #8
   d4814:	bd10      	pop	{r4, pc}
	...

000d4818 <bbzvm_stack_at>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzvm_stack_at(int16_t idx) { return vm->stack[vm->stackptr - idx]; }
   d4818:	4b05      	ldr	r3, [pc, #20]	; (d4830 <bbzvm_stack_at+0x18>)
   d481a:	681a      	ldr	r2, [r3, #0]
   d481c:	f9b2 35a0 	ldrsh.w	r3, [r2, #1440]	; 0x5a0
   d4820:	1a18      	subs	r0, r3, r0
   d4822:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
   d4826:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   d482a:	8880      	ldrh	r0, [r0, #4]
   d482c:	4770      	bx	lr
   d482e:	bf00      	nop
   d4830:	2003e3f4 	.word	0x2003e3f4

000d4834 <bbzvm_pop>:

/****************************************/
/****************************************/

void bbzvm_pop() {
    bbzvm_assert_exec(bbzvm_stack_size() > 0, BBZVM_ERROR_STACK);
   d4834:	4b06      	ldr	r3, [pc, #24]	; (d4850 <bbzvm_pop+0x1c>)
   d4836:	681a      	ldr	r2, [r3, #0]
   d4838:	f9b2 35a0 	ldrsh.w	r3, [r2, #1440]	; 0x5a0
   d483c:	1c59      	adds	r1, r3, #1
   d483e:	d102      	bne.n	d4846 <bbzvm_pop+0x12>
   d4840:	2002      	movs	r0, #2
   d4842:	f7ff bfa5 	b.w	d4790 <bbzvm_seterror>
    --vm->stackptr;
   d4846:	3b01      	subs	r3, #1
   d4848:	f8a2 35a0 	strh.w	r3, [r2, #1440]	; 0x5a0
   d484c:	4770      	bx	lr
   d484e:	bf00      	nop
   d4850:	2003e3f4 	.word	0x2003e3f4

000d4854 <bbzvm_push>:

/****************************************/
/****************************************/

void bbzvm_push(bbzheap_idx_t v) {
    bbzvm_assert_exec(bbzvm_stack_size() < BBZSTACK_SIZE, BBZVM_ERROR_STACK);
   d4854:	4b08      	ldr	r3, [pc, #32]	; (d4878 <bbzvm_push+0x24>)
   d4856:	681a      	ldr	r2, [r3, #0]
   d4858:	f9b2 35a0 	ldrsh.w	r3, [r2, #1440]	; 0x5a0
   d485c:	3301      	adds	r3, #1
   d485e:	b29b      	uxth	r3, r3
   d4860:	2b5f      	cmp	r3, #95	; 0x5f
   d4862:	d902      	bls.n	d486a <bbzvm_push+0x16>
   d4864:	2002      	movs	r0, #2
   d4866:	f7ff bf93 	b.w	d4790 <bbzvm_seterror>
    vm->stack[++vm->stackptr] = v;
   d486a:	f8a2 35a0 	strh.w	r3, [r2, #1440]	; 0x5a0
   d486e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d4872:	f8a3 05a4 	strh.w	r0, [r3, #1444]	; 0x5a4
   d4876:	4770      	bx	lr
   d4878:	2003e3f4 	.word	0x2003e3f4

000d487c <bbzvm_pushc>:
}

/****************************************/
/****************************************/

void bbzvm_pushc(intptr_t rfrnc, int16_t nat) {
   d487c:	b538      	push	{r3, r4, r5, lr}
   d487e:	460d      	mov	r5, r1
    bbzheap_idx_t o = bbzclosure_new(rfrnc);
   d4880:	f7ff ffb4 	bl	d47ec <bbzclosure_new>
   d4884:	4604      	mov	r4, r0
    if (nat) bbzclosure_make_native(*bbzheap_obj_at(o));
   d4886:	b12d      	cbz	r5, d4894 <bbzvm_pushc+0x18>
   d4888:	f7ff fe1c 	bl	d44c4 <bbzheap_obj_at>
   d488c:	7803      	ldrb	r3, [r0, #0]
   d488e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4892:	7003      	strb	r3, [r0, #0]
    return bbzvm_push(o);
   d4894:	4620      	mov	r0, r4
}
   d4896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/****************************************/

void bbzvm_pushc(intptr_t rfrnc, int16_t nat) {
    bbzheap_idx_t o = bbzclosure_new(rfrnc);
    if (nat) bbzclosure_make_native(*bbzheap_obj_at(o));
    return bbzvm_push(o);
   d489a:	f7ff bfdb 	b.w	d4854 <bbzvm_push>

000d489e <bbzvm_pushs>:
}

/****************************************/
/****************************************/

void bbzvm_pushs(uint16_t strid) {
   d489e:	b508      	push	{r3, lr}
    bbzvm_push(bbzstring_get(strid));
   d48a0:	f7ff ff8e 	bl	d47c0 <bbzstring_get>
}
   d48a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/****************************************/
/****************************************/

void bbzvm_pushs(uint16_t strid) {
    bbzvm_push(bbzstring_get(strid));
   d48a8:	f7ff bfd4 	b.w	d4854 <bbzvm_push>

000d48ac <bbzvm_ret0>:
}

/****************************************/
/****************************************/

void bbzvm_ret0() {
   d48ac:	b538      	push	{r3, r4, r5, lr}
    /* Make sure there's enough elements on the stack */
    bbzvm_assert_stack(3);
   d48ae:	4c28      	ldr	r4, [pc, #160]	; (d4950 <bbzvm_ret0+0xa4>)
   d48b0:	6825      	ldr	r5, [r4, #0]
   d48b2:	f9b5 35a0 	ldrsh.w	r3, [r5, #1440]	; 0x5a0
   d48b6:	3301      	adds	r3, #1
   d48b8:	b29b      	uxth	r3, r3
   d48ba:	2b02      	cmp	r3, #2
   d48bc:	d801      	bhi.n	d48c2 <bbzvm_ret0+0x16>
   d48be:	2002      	movs	r0, #2
   d48c0:	e034      	b.n	d492c <bbzvm_ret0+0x80>
    /* Pop block pointer and stack */
    vm->stackptr = vm->blockptr;
   d48c2:	f9b5 25a2 	ldrsh.w	r2, [r5, #1442]	; 0x5a2
   d48c6:	f8a5 25a0 	strh.w	r2, [r5, #1440]	; 0x5a0
   d48ca:	b213      	sxth	r3, r2
    vm->blockptr = bbzheap_obj_at(vm->stack[vm->stackptr])->i.value;
   d48cc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   d48d0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d48d4:	8898      	ldrh	r0, [r3, #4]
   d48d6:	f7ff fdf5 	bl	d44c4 <bbzheap_obj_at>
   d48da:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d48de:	f8a5 35a2 	strh.w	r3, [r5, #1442]	; 0x5a2
    bbzvm_pop();
   d48e2:	f7ff ffa7 	bl	d4834 <bbzvm_pop>
    /* Pop local symbol table */
    bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->lsyms));
   d48e6:	6823      	ldr	r3, [r4, #0]
   d48e8:	8998      	ldrh	r0, [r3, #12]
   d48ea:	f7ff fdeb 	bl	d44c4 <bbzheap_obj_at>
   d48ee:	7803      	ldrb	r3, [r0, #0]
   d48f0:	f023 0310 	bic.w	r3, r3, #16
   d48f4:	7003      	strb	r3, [r0, #0]
    bbzdarray_destroy(vm->lsyms);
   d48f6:	6823      	ldr	r3, [r4, #0]
   d48f8:	8998      	ldrh	r0, [r3, #12]
   d48fa:	f7ff fbd9 	bl	d40b0 <bbzdarray_destroy>
    vm->lsyms = bbzvm_stack_at(0);
   d48fe:	2000      	movs	r0, #0
   d4900:	6821      	ldr	r1, [r4, #0]
   d4902:	f7ff ff89 	bl	d4818 <bbzvm_stack_at>
   d4906:	8188      	strh	r0, [r1, #12]
    bbzvm_pop();
   d4908:	f7ff ff94 	bl	d4834 <bbzvm_pop>
    /* Make sure the stack contains at least one element */
    bbzvm_assert_stack(1);
   d490c:	6823      	ldr	r3, [r4, #0]
   d490e:	f9b3 35a0 	ldrsh.w	r3, [r3, #1440]	; 0x5a0
   d4912:	3301      	adds	r3, #1
   d4914:	d0d3      	beq.n	d48be <bbzvm_ret0+0x12>
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d4916:	2000      	movs	r0, #0
   d4918:	f7ff ff7e 	bl	d4818 <bbzvm_stack_at>
   d491c:	f7ff fdd2 	bl	d44c4 <bbzheap_obj_at>
   d4920:	7803      	ldrb	r3, [r0, #0]
   d4922:	f003 0307 	and.w	r3, r3, #7
   d4926:	2b01      	cmp	r3, #1
   d4928:	d004      	beq.n	d4934 <bbzvm_ret0+0x88>
   d492a:	2006      	movs	r0, #6
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
    /* Pop the return address */
    bbzvm_pop();
}
   d492c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    vm->lsyms = bbzvm_stack_at(0);
    bbzvm_pop();
    /* Make sure the stack contains at least one element */
    bbzvm_assert_stack(1);
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d4930:	f7ff bf2e 	b.w	d4790 <bbzvm_seterror>
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d4934:	2000      	movs	r0, #0
   d4936:	f7ff ff6f 	bl	d4818 <bbzvm_stack_at>
   d493a:	6824      	ldr	r4, [r4, #0]
   d493c:	f7ff fdc2 	bl	d44c4 <bbzheap_obj_at>
   d4940:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d4944:	8163      	strh	r3, [r4, #10]
    /* Pop the return address */
    bbzvm_pop();
}
   d4946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
    /* Pop the return address */
    bbzvm_pop();
   d494a:	f7ff bf73 	b.w	d4834 <bbzvm_pop>
   d494e:	bf00      	nop
   d4950:	2003e3f4 	.word	0x2003e3f4

000d4954 <bbzvm_gstore>:
}

/****************************************/
/****************************************/

void bbzvm_gstore() {
   d4954:	b570      	push	{r4, r5, r6, lr}
    // Get and pop the arguments
    Serial.printlnf("test 4.4.1");
    bbzvm_assert_stack(2);
   d4956:	4c2f      	ldr	r4, [pc, #188]	; (d4a14 <bbzvm_gstore+0xc0>)
/****************************************/
/****************************************/

void bbzvm_gstore() {
    // Get and pop the arguments
    Serial.printlnf("test 4.4.1");
   d4958:	f000 fcdc 	bl	d5314 <_Z16_fetch_usbserialv>
   d495c:	492e      	ldr	r1, [pc, #184]	; (d4a18 <bbzvm_gstore+0xc4>)
   d495e:	f7ff feb9 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_assert_stack(2);
   d4962:	6823      	ldr	r3, [r4, #0]
   d4964:	f9b3 35a0 	ldrsh.w	r3, [r3, #1440]	; 0x5a0
   d4968:	3301      	adds	r3, #1
   d496a:	b29b      	uxth	r3, r3
   d496c:	2b01      	cmp	r3, #1
   d496e:	d801      	bhi.n	d4974 <bbzvm_gstore+0x20>
   d4970:	2002      	movs	r0, #2
   d4972:	e045      	b.n	d4a00 <bbzvm_gstore+0xac>
    Serial.printlnf("test 4.4.2");
   d4974:	f000 fcce 	bl	d5314 <_Z16_fetch_usbserialv>
   d4978:	4928      	ldr	r1, [pc, #160]	; (d4a1c <bbzvm_gstore+0xc8>)
   d497a:	f7ff feab 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzheap_idx_t str = bbzvm_stack_at(1);
   d497e:	2001      	movs	r0, #1
   d4980:	f7ff ff4a 	bl	d4818 <bbzvm_stack_at>
   d4984:	4605      	mov	r5, r0
        Serial.printlnf("test 4.4.3");
   d4986:	f000 fcc5 	bl	d5314 <_Z16_fetch_usbserialv>
   d498a:	4925      	ldr	r1, [pc, #148]	; (d4a20 <bbzvm_gstore+0xcc>)
   d498c:	f7ff fea2 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzheap_idx_t o = bbzvm_stack_at(0);
   d4990:	2000      	movs	r0, #0
   d4992:	f7ff ff41 	bl	d4818 <bbzvm_stack_at>
   d4996:	4606      	mov	r6, r0
    Serial.printlnf("test 4.4.4");
   d4998:	f000 fcbc 	bl	d5314 <_Z16_fetch_usbserialv>
   d499c:	4921      	ldr	r1, [pc, #132]	; (d4a24 <bbzvm_gstore+0xd0>)
   d499e:	f7ff fe99 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_assert_type(str, BBZTYPE_STRING);
   d49a2:	4628      	mov	r0, r5
   d49a4:	f7ff fd8e 	bl	d44c4 <bbzheap_obj_at>
   d49a8:	7803      	ldrb	r3, [r0, #0]
   d49aa:	f003 0307 	and.w	r3, r3, #7
   d49ae:	2b03      	cmp	r3, #3
   d49b0:	d001      	beq.n	d49b6 <bbzvm_gstore+0x62>
   d49b2:	2006      	movs	r0, #6
   d49b4:	e024      	b.n	d4a00 <bbzvm_gstore+0xac>
    Serial.printlnf("test 4.4.5");
   d49b6:	f000 fcad 	bl	d5314 <_Z16_fetch_usbserialv>
   d49ba:	491b      	ldr	r1, [pc, #108]	; (d4a28 <bbzvm_gstore+0xd4>)
   d49bc:	f7ff fe8a 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_pop();
   d49c0:	f7ff ff38 	bl	d4834 <bbzvm_pop>
    Serial.printlnf("test 4.4.6");
   d49c4:	f000 fca6 	bl	d5314 <_Z16_fetch_usbserialv>
   d49c8:	4918      	ldr	r1, [pc, #96]	; (d4a2c <bbzvm_gstore+0xd8>)
   d49ca:	f7ff fe83 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_pop();
   d49ce:	f7ff ff31 	bl	d4834 <bbzvm_pop>
    Serial.printlnf("test 4.4.7");
   d49d2:	f000 fc9f 	bl	d5314 <_Z16_fetch_usbserialv>
   d49d6:	4916      	ldr	r1, [pc, #88]	; (d4a30 <bbzvm_gstore+0xdc>)
   d49d8:	f7ff fe7c 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_assert_state();
   d49dc:	6823      	ldr	r3, [r4, #0]
   d49de:	f893 3599 	ldrb.w	r3, [r3, #1433]	; 0x599
   d49e2:	2b04      	cmp	r3, #4
   d49e4:	d015      	beq.n	d4a12 <bbzvm_gstore+0xbe>
    Serial.printlnf("test 4.4.8");
   d49e6:	f000 fc95 	bl	d5314 <_Z16_fetch_usbserialv>
   d49ea:	4912      	ldr	r1, [pc, #72]	; (d4a34 <bbzvm_gstore+0xe0>)
   d49ec:	f7ff fe72 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    // Store the value
    bbzvm_assert_exec(bbztable_set(vm->gsyms, str, o), BBZVM_ERROR_MEM);
   d49f0:	6823      	ldr	r3, [r4, #0]
   d49f2:	4632      	mov	r2, r6
   d49f4:	4629      	mov	r1, r5
   d49f6:	89d8      	ldrh	r0, [r3, #14]
   d49f8:	f7ff fc00 	bl	d41fc <bbztable_set>
   d49fc:	b920      	cbnz	r0, d4a08 <bbzvm_gstore+0xb4>
   d49fe:	200d      	movs	r0, #13
    Serial.printlnf("test 4.4.9");
}
   d4a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbzvm_pop();
    Serial.printlnf("test 4.4.7");
    bbzvm_assert_state();
    Serial.printlnf("test 4.4.8");
    // Store the value
    bbzvm_assert_exec(bbztable_set(vm->gsyms, str, o), BBZVM_ERROR_MEM);
   d4a04:	f7ff bec4 	b.w	d4790 <bbzvm_seterror>
    Serial.printlnf("test 4.4.9");
   d4a08:	f000 fc84 	bl	d5314 <_Z16_fetch_usbserialv>
   d4a0c:	490a      	ldr	r1, [pc, #40]	; (d4a38 <bbzvm_gstore+0xe4>)
   d4a0e:	f7ff fe61 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
   d4a12:	bd70      	pop	{r4, r5, r6, pc}
   d4a14:	2003e3f4 	.word	0x2003e3f4
   d4a18:	000d5be3 	.word	0x000d5be3
   d4a1c:	000d5bee 	.word	0x000d5bee
   d4a20:	000d5bf9 	.word	0x000d5bf9
   d4a24:	000d5c04 	.word	0x000d5c04
   d4a28:	000d5c0f 	.word	0x000d5c0f
   d4a2c:	000d5c1a 	.word	0x000d5c1a
   d4a30:	000d5c25 	.word	0x000d5c25
   d4a34:	000d5c30 	.word	0x000d5c30
   d4a38:	000d5c3b 	.word	0x000d5c3b

000d4a3c <bbzvm_gsym_register>:
}

/****************************************/
/****************************************/

uint8_t bbzvm_gsym_register(uint16_t sid, bbzheap_idx_t v) {
   d4a3c:	b538      	push	{r3, r4, r5, lr}
   d4a3e:	460c      	mov	r4, r1
   d4a40:	4605      	mov	r5, r0
    Serial.printlnf("Test 4.1");
   d4a42:	f000 fc67 	bl	d5314 <_Z16_fetch_usbserialv>
   d4a46:	4911      	ldr	r1, [pc, #68]	; (d4a8c <bbzvm_gsym_register+0x50>)
   d4a48:	f7ff fe44 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_pushs(sid);
   d4a4c:	4628      	mov	r0, r5
   d4a4e:	f7ff ff26 	bl	d489e <bbzvm_pushs>
    Serial.printlnf("Test 4.2");
   d4a52:	f000 fc5f 	bl	d5314 <_Z16_fetch_usbserialv>
   d4a56:	490e      	ldr	r1, [pc, #56]	; (d4a90 <bbzvm_gsym_register+0x54>)
   d4a58:	f7ff fe3c 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_push(v);
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f7ff fef9 	bl	d4854 <bbzvm_push>
    Serial.printlnf("Test 4.3");
   d4a62:	f000 fc57 	bl	d5314 <_Z16_fetch_usbserialv>
   d4a66:	490b      	ldr	r1, [pc, #44]	; (d4a94 <bbzvm_gsym_register+0x58>)
   d4a68:	f7ff fe34 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_gstore();
   d4a6c:	f7ff ff72 	bl	d4954 <bbzvm_gstore>
    Serial.printlnf("Test 4.4");
   d4a70:	f000 fc50 	bl	d5314 <_Z16_fetch_usbserialv>
   d4a74:	4908      	ldr	r1, [pc, #32]	; (d4a98 <bbzvm_gsym_register+0x5c>)
   d4a76:	f7ff fe2d 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_assert_state(0);
   d4a7a:	4b08      	ldr	r3, [pc, #32]	; (d4a9c <bbzvm_gsym_register+0x60>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	f893 0599 	ldrb.w	r0, [r3, #1433]	; 0x599
    return 1;
}
   d4a82:	3804      	subs	r0, #4
   d4a84:	bf18      	it	ne
   d4a86:	2001      	movne	r0, #1
   d4a88:	bd38      	pop	{r3, r4, r5, pc}
   d4a8a:	bf00      	nop
   d4a8c:	000d5c46 	.word	0x000d5c46
   d4a90:	000d5c4f 	.word	0x000d5c4f
   d4a94:	000d5c58 	.word	0x000d5c58
   d4a98:	000d5c61 	.word	0x000d5c61
   d4a9c:	2003e3f4 	.word	0x2003e3f4

000d4aa0 <bbzvm_function_register>:

/****************************************/
/****************************************/


bbzheap_idx_t bbzvm_function_register(int16_t fnameid, bbzvm_funp funp) {
   d4aa0:	b538      	push	{r3, r4, r5, lr}
   d4aa2:	460c      	mov	r4, r1
   d4aa4:	4605      	mov	r5, r0
    /* Allocate a bbzclosure_t */
    Serial.printlnf("Test 0");
   d4aa6:	f000 fc35 	bl	d5314 <_Z16_fetch_usbserialv>
   d4aaa:	491b      	ldr	r1, [pc, #108]	; (d4b18 <bbzvm_function_register+0x78>)
   d4aac:	f7ff fe12 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
     * It pops the function id and pushes the c-function closure.
     * @see BBZVM_INSTR_PUSHCC
     * @param[in] cid The closure id.
     */
    ALWAYS_INLINE
    void bbzvm_pushcc(bbzvm_funp cid) { return bbzvm_pushc((intptr_t)cid, 0); }
   d4ab0:	2100      	movs	r1, #0
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff fee2 	bl	d487c <bbzvm_pushc>
    bbzvm_pushcc(funp);
    Serial.printlnf("Test 1");
   d4ab8:	f000 fc2c 	bl	d5314 <_Z16_fetch_usbserialv>
   d4abc:	4917      	ldr	r1, [pc, #92]	; (d4b1c <bbzvm_function_register+0x7c>)
   d4abe:	f7ff fe09 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_assert_state(0);
   d4ac2:	4b17      	ldr	r3, [pc, #92]	; (d4b20 <bbzvm_function_register+0x80>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	f893 3599 	ldrb.w	r3, [r3, #1433]	; 0x599
   d4aca:	2b04      	cmp	r3, #4
   d4acc:	d021      	beq.n	d4b12 <bbzvm_function_register+0x72>
    Serial.printlnf("Test 2");
   d4ace:	f000 fc21 	bl	d5314 <_Z16_fetch_usbserialv>
   d4ad2:	4914      	ldr	r1, [pc, #80]	; (d4b24 <bbzvm_function_register+0x84>)
   d4ad4:	f7ff fdfe 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    /* Register the closure in the global symbols */
    bbzheap_idx_t cpos = bbzvm_stack_at(0);
   d4ad8:	2000      	movs	r0, #0
   d4ada:	f7ff fe9d 	bl	d4818 <bbzvm_stack_at>
   d4ade:	4604      	mov	r4, r0
    Serial.printlnf("Test 3");
   d4ae0:	f000 fc18 	bl	d5314 <_Z16_fetch_usbserialv>
   d4ae4:	4910      	ldr	r1, [pc, #64]	; (d4b28 <bbzvm_function_register+0x88>)
   d4ae6:	f7ff fdf5 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_pop();
   d4aea:	f7ff fea3 	bl	d4834 <bbzvm_pop>
    Serial.printlnf("Test 4");
   d4aee:	f000 fc11 	bl	d5314 <_Z16_fetch_usbserialv>
   d4af2:	490e      	ldr	r1, [pc, #56]	; (d4b2c <bbzvm_function_register+0x8c>)
   d4af4:	f7ff fdee 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    if (fnameid >= 0) {
   d4af8:	2d00      	cmp	r5, #0
   d4afa:	db03      	blt.n	d4b04 <bbzvm_function_register+0x64>
        bbzvm_gsym_register((uint16_t)fnameid, cpos);
   d4afc:	4621      	mov	r1, r4
   d4afe:	b2a8      	uxth	r0, r5
   d4b00:	f7ff ff9c 	bl	d4a3c <bbzvm_gsym_register>
    }
    Serial.printlnf("Test 5");
   d4b04:	f000 fc06 	bl	d5314 <_Z16_fetch_usbserialv>
   d4b08:	4909      	ldr	r1, [pc, #36]	; (d4b30 <bbzvm_function_register+0x90>)
   d4b0a:	f7ff fde3 	bl	d46d4 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    /* Return the closure's position */
    return cpos;
   d4b0e:	4620      	mov	r0, r4
   d4b10:	bd38      	pop	{r3, r4, r5, pc}
bbzheap_idx_t bbzvm_function_register(int16_t fnameid, bbzvm_funp funp) {
    /* Allocate a bbzclosure_t */
    Serial.printlnf("Test 0");
    bbzvm_pushcc(funp);
    Serial.printlnf("Test 1");
    bbzvm_assert_state(0);
   d4b12:	2000      	movs	r0, #0
        bbzvm_gsym_register((uint16_t)fnameid, cpos);
    }
    Serial.printlnf("Test 5");
    /* Return the closure's position */
    return cpos;
}
   d4b14:	bd38      	pop	{r3, r4, r5, pc}
   d4b16:	bf00      	nop
   d4b18:	000d5c6a 	.word	0x000d5c6a
   d4b1c:	000d5c71 	.word	0x000d5c71
   d4b20:	2003e3f4 	.word	0x2003e3f4
   d4b24:	000d5c78 	.word	0x000d5c78
   d4b28:	000d5c7f 	.word	0x000d5c7f
   d4b2c:	000d5c86 	.word	0x000d5c86
   d4b30:	000d5c8d 	.word	0x000d5c8d

000d4b34 <_GLOBAL__sub_I_vm>:
   d4b34:	f000 b8b8 	b.w	d4ca8 <HAL_Pin_Map>

000d4b38 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <HAL_USB_USART_Init+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	681b      	ldr	r3, [r3, #0]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	0003024c 	.word	0x0003024c

000d4b48 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <HAL_USB_USART_Begin+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	685b      	ldr	r3, [r3, #4]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003024c 	.word	0x0003024c

000d4b58 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <HAL_USB_USART_Available_Data+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	691b      	ldr	r3, [r3, #16]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003024c 	.word	0x0003024c

000d4b68 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	695b      	ldr	r3, [r3, #20]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003024c 	.word	0x0003024c

000d4b78 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <HAL_USB_USART_Receive_Data+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	699b      	ldr	r3, [r3, #24]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003024c 	.word	0x0003024c

000d4b88 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <HAL_USB_USART_Send_Data+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	69db      	ldr	r3, [r3, #28]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	0003024c 	.word	0x0003024c

000d4b98 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <HAL_USB_USART_Flush_Data+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	6a1b      	ldr	r3, [r3, #32]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	0003024c 	.word	0x0003024c

000d4ba8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <HAL_USART_Init+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	681b      	ldr	r3, [r3, #0]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	0003023c 	.word	0x0003023c

000d4bb8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <HAL_USART_Write_Data+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	68db      	ldr	r3, [r3, #12]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	0003023c 	.word	0x0003023c

000d4bc8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <HAL_USART_Available_Data+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	691b      	ldr	r3, [r3, #16]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	0003023c 	.word	0x0003023c

000d4bd8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <HAL_USART_Read_Data+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	695b      	ldr	r3, [r3, #20]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	0003023c 	.word	0x0003023c

000d4be8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <HAL_USART_Peek_Data+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	699b      	ldr	r3, [r3, #24]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	0003023c 	.word	0x0003023c

000d4bf8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <HAL_USART_Flush_Data+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	69db      	ldr	r3, [r3, #28]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	0003023c 	.word	0x0003023c

000d4c08 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <HAL_USART_Available_Data_For_Write+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	0003023c 	.word	0x0003023c

000d4c18 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <inet_inet_ntop+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	695b      	ldr	r3, [r3, #20]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030264 	.word	0x00030264

000d4c28 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <os_thread_is_current+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	689b      	ldr	r3, [r3, #8]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030248 	.word	0x00030248

000d4c38 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <os_thread_join+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	691b      	ldr	r3, [r3, #16]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030248 	.word	0x00030248

000d4c48 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <os_thread_cleanup+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	695b      	ldr	r3, [r3, #20]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030248 	.word	0x00030248

000d4c58 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <os_mutex_recursive_create+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030248 	.word	0x00030248

000d4c68 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <os_mutex_recursive_destroy+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030248 	.word	0x00030248

000d4c78 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <HAL_Core_Runtime_Info+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030234 	.word	0x00030234

000d4c88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <HAL_RNG_GetRandomNumber+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	685b      	ldr	r3, [r3, #4]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030218 	.word	0x00030218

000d4c98 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	695b      	ldr	r3, [r3, #20]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030218 	.word	0x00030218

000d4ca8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <HAL_Pin_Map+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	681b      	ldr	r3, [r3, #0]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003022c 	.word	0x0003022c

000d4cb8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <netdb_freeaddrinfo+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	689b      	ldr	r3, [r3, #8]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030268 	.word	0x00030268

000d4cc8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <netdb_getaddrinfo+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	68db      	ldr	r3, [r3, #12]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030268 	.word	0x00030268

000d4cd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	00030244 	.word	0x00030244

000d4ce8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <network_connect+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	685b      	ldr	r3, [r3, #4]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030240 	.word	0x00030240

000d4cf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <network_connecting+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	689b      	ldr	r3, [r3, #8]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030240 	.word	0x00030240

000d4d08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <network_disconnect+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	68db      	ldr	r3, [r3, #12]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030240 	.word	0x00030240

000d4d18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <network_ready+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	691b      	ldr	r3, [r3, #16]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030240 	.word	0x00030240

000d4d28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <network_on+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	695b      	ldr	r3, [r3, #20]
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030240 	.word	0x00030240

000d4d38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <network_off+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	699b      	ldr	r3, [r3, #24]
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030240 	.word	0x00030240

000d4d48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <network_listen+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	69db      	ldr	r3, [r3, #28]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030240 	.word	0x00030240

000d4d58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <network_listening+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	6a1b      	ldr	r3, [r3, #32]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030240 	.word	0x00030240

000d4d68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <network_set_listen_timeout+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030240 	.word	0x00030240

000d4d78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <network_get_listen_timeout+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030240 	.word	0x00030240

000d4d88 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <set_system_mode+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	685b      	ldr	r3, [r3, #4]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030220 	.word	0x00030220

000d4d98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <system_delay_ms+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	695b      	ldr	r3, [r3, #20]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	00030220 	.word	0x00030220

000d4da8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b03      	ldr	r3, [pc, #12]	; (d4db8 <system_ctrl_set_app_request_handler+0x10>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4db2:	9301      	str	r3, [sp, #4]
   d4db4:	bd08      	pop	{r3, pc}
   d4db6:	0000      	.short	0x0000
   d4db8:	00030220 	.word	0x00030220

000d4dbc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b03      	ldr	r3, [pc, #12]	; (d4dcc <system_ctrl_set_result+0x10>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4dc6:	9301      	str	r3, [sp, #4]
   d4dc8:	bd08      	pop	{r3, pc}
   d4dca:	0000      	.short	0x0000
   d4dcc:	00030220 	.word	0x00030220

000d4dd0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <malloc+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	681b      	ldr	r3, [r3, #0]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	0003021c 	.word	0x0003021c

000d4de0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <free+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	685b      	ldr	r3, [r3, #4]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	0003021c 	.word	0x0003021c

000d4df0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <vsnprintf+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	0003021c 	.word	0x0003021c

000d4e00 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4e00:	2300      	movs	r3, #0
   d4e02:	461a      	mov	r2, r3
   d4e04:	6840      	ldr	r0, [r0, #4]
   d4e06:	f7ff bf6f 	b.w	d4ce8 <network_connect>

000d4e0a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4e0a:	2200      	movs	r2, #0
   d4e0c:	2102      	movs	r1, #2
   d4e0e:	6840      	ldr	r0, [r0, #4]
   d4e10:	f7ff bf7a 	b.w	d4d08 <network_disconnect>

000d4e14 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4e14:	2200      	movs	r2, #0
   d4e16:	4611      	mov	r1, r2
   d4e18:	6840      	ldr	r0, [r0, #4]
   d4e1a:	f7ff bf6d 	b.w	d4cf8 <network_connecting>

000d4e1e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4e1e:	2200      	movs	r2, #0
   d4e20:	4611      	mov	r1, r2
   d4e22:	6840      	ldr	r0, [r0, #4]
   d4e24:	f7ff bf78 	b.w	d4d18 <network_ready>

000d4e28 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4e28:	2300      	movs	r3, #0
   d4e2a:	461a      	mov	r2, r3
   d4e2c:	4619      	mov	r1, r3
   d4e2e:	6840      	ldr	r0, [r0, #4]
   d4e30:	f7ff bf7a 	b.w	d4d28 <network_on>

000d4e34 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4e34:	2300      	movs	r3, #0
   d4e36:	461a      	mov	r2, r3
   d4e38:	4619      	mov	r1, r3
   d4e3a:	6840      	ldr	r0, [r0, #4]
   d4e3c:	f7ff bf7c 	b.w	d4d38 <network_off>

000d4e40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4e40:	2200      	movs	r2, #0
   d4e42:	f081 0101 	eor.w	r1, r1, #1
   d4e46:	6840      	ldr	r0, [r0, #4]
   d4e48:	f7ff bf7e 	b.w	d4d48 <network_listen>

000d4e4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4e4c:	2200      	movs	r2, #0
   d4e4e:	6840      	ldr	r0, [r0, #4]
   d4e50:	f7ff bf8a 	b.w	d4d68 <network_set_listen_timeout>

000d4e54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4e54:	2200      	movs	r2, #0
   d4e56:	4611      	mov	r1, r2
   d4e58:	6840      	ldr	r0, [r0, #4]
   d4e5a:	f7ff bf8d 	b.w	d4d78 <network_get_listen_timeout>

000d4e5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4e5e:	2200      	movs	r2, #0
   d4e60:	4611      	mov	r1, r2
   d4e62:	6840      	ldr	r0, [r0, #4]
   d4e64:	f7ff bf78 	b.w	d4d58 <network_listening>

000d4e68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e6c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e6e:	b095      	sub	sp, #84	; 0x54
   d4e70:	4616      	mov	r6, r2
   d4e72:	460d      	mov	r5, r1
   d4e74:	4607      	mov	r7, r0
    IPAddress addr;
   d4e76:	f000 faad 	bl	d53d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4e7a:	4621      	mov	r1, r4
   d4e7c:	2220      	movs	r2, #32
   d4e7e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e80:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e82:	f000 fe1e 	bl	d5ac2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e86:	2340      	movs	r3, #64	; 0x40
   d4e88:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e8a:	4621      	mov	r1, r4
   d4e8c:	466b      	mov	r3, sp
   d4e8e:	aa0c      	add	r2, sp, #48	; 0x30
   d4e90:	4630      	mov	r0, r6
   d4e92:	f7ff ff19 	bl	d4cc8 <netdb_getaddrinfo>
    if (!r) {
   d4e96:	4604      	mov	r4, r0
   d4e98:	2800      	cmp	r0, #0
   d4e9a:	d144      	bne.n	d4f26 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e9c:	4602      	mov	r2, r0
   d4e9e:	2101      	movs	r1, #1
   d4ea0:	6868      	ldr	r0, [r5, #4]
   d4ea2:	f7ff ff39 	bl	d4d18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ea6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4ea8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eaa:	4622      	mov	r2, r4
   d4eac:	6868      	ldr	r0, [r5, #4]
   d4eae:	f7ff ff33 	bl	d4d18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eb2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4eb4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4eb6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4eb8:	2e00      	cmp	r6, #0
   d4eba:	d034      	beq.n	d4f26 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4ebc:	2900      	cmp	r1, #0
   d4ebe:	d132      	bne.n	d4f26 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4ec0:	6873      	ldr	r3, [r6, #4]
   d4ec2:	2b02      	cmp	r3, #2
   d4ec4:	d002      	beq.n	d4ecc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4ec6:	2b0a      	cmp	r3, #10
   d4ec8:	d009      	beq.n	d4ede <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4eca:	e02a      	b.n	d4f22 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4ecc:	f1b8 0f00 	cmp.w	r8, #0
   d4ed0:	d027      	beq.n	d4f22 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4ed2:	6971      	ldr	r1, [r6, #20]
   d4ed4:	4638      	mov	r0, r7
   d4ed6:	3104      	adds	r1, #4
   d4ed8:	f000 faa9 	bl	d542e <_ZN9IPAddressaSEPKh>
   d4edc:	e020      	b.n	d4f20 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ede:	f1b9 0f00 	cmp.w	r9, #0
   d4ee2:	d01e      	beq.n	d4f22 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4ee4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4ee6:	2211      	movs	r2, #17
   d4ee8:	a801      	add	r0, sp, #4
   d4eea:	f000 fdea 	bl	d5ac2 <memset>
                    a.v = 6;
   d4eee:	2306      	movs	r3, #6
   d4ef0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4ef4:	ad01      	add	r5, sp, #4
   d4ef6:	f104 0308 	add.w	r3, r4, #8
   d4efa:	3418      	adds	r4, #24
   d4efc:	6818      	ldr	r0, [r3, #0]
   d4efe:	6859      	ldr	r1, [r3, #4]
   d4f00:	462a      	mov	r2, r5
   d4f02:	c203      	stmia	r2!, {r0, r1}
   d4f04:	3308      	adds	r3, #8
   d4f06:	42a3      	cmp	r3, r4
   d4f08:	4615      	mov	r5, r2
   d4f0a:	d1f7      	bne.n	d4efc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4f0c:	a901      	add	r1, sp, #4
   d4f0e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4f10:	ad07      	add	r5, sp, #28
   d4f12:	f000 fa6d 	bl	d53f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f18:	1d3c      	adds	r4, r7, #4
   d4f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f1c:	682b      	ldr	r3, [r5, #0]
   d4f1e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4f20:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f22:	69f6      	ldr	r6, [r6, #28]
   d4f24:	e7c8      	b.n	d4eb8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4f26:	9800      	ldr	r0, [sp, #0]
   d4f28:	f7ff fec6 	bl	d4cb8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4f2c:	4638      	mov	r0, r7
   d4f2e:	b015      	add	sp, #84	; 0x54
   d4f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f34:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4f36:	4a03      	ldr	r2, [pc, #12]	; (d4f44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4f38:	601a      	str	r2, [r3, #0]
   d4f3a:	2200      	movs	r2, #0
   d4f3c:	605a      	str	r2, [r3, #4]
   d4f3e:	4770      	bx	lr
   d4f40:	2003e3f8 	.word	0x2003e3f8
   d4f44:	000d5ed8 	.word	0x000d5ed8

000d4f48 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4f48:	2200      	movs	r2, #0
   d4f4a:	4611      	mov	r1, r2
   d4f4c:	6840      	ldr	r0, [r0, #4]
   d4f4e:	f7ff bee3 	b.w	d4d18 <network_ready>

000d4f52 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f52:	2200      	movs	r2, #0
   d4f54:	4611      	mov	r1, r2
   d4f56:	6840      	ldr	r0, [r0, #4]
   d4f58:	f7ff befe 	b.w	d4d58 <network_listening>

000d4f5c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f5c:	2200      	movs	r2, #0
   d4f5e:	4611      	mov	r1, r2
   d4f60:	6840      	ldr	r0, [r0, #4]
   d4f62:	f7ff bf09 	b.w	d4d78 <network_get_listen_timeout>

000d4f66 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f66:	2200      	movs	r2, #0
   d4f68:	6840      	ldr	r0, [r0, #4]
   d4f6a:	f7ff befd 	b.w	d4d68 <network_set_listen_timeout>

000d4f6e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f6e:	2200      	movs	r2, #0
   d4f70:	f081 0101 	eor.w	r1, r1, #1
   d4f74:	6840      	ldr	r0, [r0, #4]
   d4f76:	f7ff bee7 	b.w	d4d48 <network_listen>

000d4f7a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	461a      	mov	r2, r3
   d4f7e:	4619      	mov	r1, r3
   d4f80:	6840      	ldr	r0, [r0, #4]
   d4f82:	f7ff bed9 	b.w	d4d38 <network_off>

000d4f86 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4f86:	2300      	movs	r3, #0
   d4f88:	461a      	mov	r2, r3
   d4f8a:	4619      	mov	r1, r3
   d4f8c:	6840      	ldr	r0, [r0, #4]
   d4f8e:	f7ff becb 	b.w	d4d28 <network_on>

000d4f92 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f92:	2200      	movs	r2, #0
   d4f94:	4611      	mov	r1, r2
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	f7ff beae 	b.w	d4cf8 <network_connecting>

000d4f9c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f9c:	2200      	movs	r2, #0
   d4f9e:	2102      	movs	r1, #2
   d4fa0:	6840      	ldr	r0, [r0, #4]
   d4fa2:	f7ff beb1 	b.w	d4d08 <network_disconnect>

000d4fa6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fa6:	2300      	movs	r3, #0
   d4fa8:	461a      	mov	r2, r3
   d4faa:	6840      	ldr	r0, [r0, #4]
   d4fac:	f7ff be9c 	b.w	d4ce8 <network_connect>

000d4fb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4fb0:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4fb2:	2204      	movs	r2, #4
   d4fb4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4fb6:	4a02      	ldr	r2, [pc, #8]	; (d4fc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4fb8:	601a      	str	r2, [r3, #0]
   d4fba:	4770      	bx	lr
   d4fbc:	2003e400 	.word	0x2003e400
   d4fc0:	000d5f0c 	.word	0x000d5f0c

000d4fc4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fc4:	2200      	movs	r2, #0
   d4fc6:	4611      	mov	r1, r2
   d4fc8:	6840      	ldr	r0, [r0, #4]
   d4fca:	f7ff bec5 	b.w	d4d58 <network_listening>

000d4fce <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fce:	2200      	movs	r2, #0
   d4fd0:	4611      	mov	r1, r2
   d4fd2:	6840      	ldr	r0, [r0, #4]
   d4fd4:	f7ff bed0 	b.w	d4d78 <network_get_listen_timeout>

000d4fd8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fd8:	2200      	movs	r2, #0
   d4fda:	6840      	ldr	r0, [r0, #4]
   d4fdc:	f7ff bec4 	b.w	d4d68 <network_set_listen_timeout>

000d4fe0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fe0:	2200      	movs	r2, #0
   d4fe2:	f081 0101 	eor.w	r1, r1, #1
   d4fe6:	6840      	ldr	r0, [r0, #4]
   d4fe8:	f7ff beae 	b.w	d4d48 <network_listen>

000d4fec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4fec:	2300      	movs	r3, #0
   d4fee:	461a      	mov	r2, r3
   d4ff0:	2101      	movs	r1, #1
   d4ff2:	6840      	ldr	r0, [r0, #4]
   d4ff4:	f7ff bea0 	b.w	d4d38 <network_off>

000d4ff8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ff8:	2300      	movs	r3, #0
   d4ffa:	461a      	mov	r2, r3
   d4ffc:	4619      	mov	r1, r3
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	f7ff be92 	b.w	d4d28 <network_on>

000d5004 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5004:	2200      	movs	r2, #0
   d5006:	4611      	mov	r1, r2
   d5008:	6840      	ldr	r0, [r0, #4]
   d500a:	f7ff be85 	b.w	d4d18 <network_ready>

000d500e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d500e:	2200      	movs	r2, #0
   d5010:	4611      	mov	r1, r2
   d5012:	6840      	ldr	r0, [r0, #4]
   d5014:	f7ff be70 	b.w	d4cf8 <network_connecting>

000d5018 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5018:	2200      	movs	r2, #0
   d501a:	2102      	movs	r1, #2
   d501c:	6840      	ldr	r0, [r0, #4]
   d501e:	f7ff be73 	b.w	d4d08 <network_disconnect>

000d5022 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5022:	2300      	movs	r3, #0
   d5024:	461a      	mov	r2, r3
   d5026:	6840      	ldr	r0, [r0, #4]
   d5028:	f7ff be5e 	b.w	d4ce8 <network_connect>

000d502c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d502c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d502e:	4605      	mov	r5, r0
   d5030:	b188      	cbz	r0, d5056 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5032:	6804      	ldr	r4, [r0, #0]
   d5034:	b14c      	cbz	r4, d504a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5036:	68a3      	ldr	r3, [r4, #8]
   d5038:	b11b      	cbz	r3, d5042 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d503a:	2203      	movs	r2, #3
   d503c:	4621      	mov	r1, r4
   d503e:	4620      	mov	r0, r4
   d5040:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5042:	2110      	movs	r1, #16
   d5044:	4620      	mov	r0, r4
   d5046:	f000 fbd8 	bl	d57fa <_ZdlPvj>
   d504a:	4628      	mov	r0, r5
   d504c:	2114      	movs	r1, #20
      }
   d504e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5052:	f000 bbd2 	b.w	d57fa <_ZdlPvj>
   d5056:	bd38      	pop	{r3, r4, r5, pc}

000d5058 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5058:	b110      	cbz	r0, d5060 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d505a:	6803      	ldr	r3, [r0, #0]
   d505c:	685b      	ldr	r3, [r3, #4]
   d505e:	4718      	bx	r3
   d5060:	4770      	bx	lr

000d5062 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5062:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5064:	6803      	ldr	r3, [r0, #0]
   d5066:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5068:	b1bb      	cbz	r3, d509a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d506a:	6858      	ldr	r0, [r3, #4]
   d506c:	f7ff fddc 	bl	d4c28 <os_thread_is_current>
   d5070:	b978      	cbnz	r0, d5092 <_ZN6ThreadD1Ev+0x30>
   d5072:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5074:	7c5a      	ldrb	r2, [r3, #17]
   d5076:	b912      	cbnz	r2, d507e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5078:	6858      	ldr	r0, [r3, #4]
   d507a:	f7ff fddd 	bl	d4c38 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d507e:	6823      	ldr	r3, [r4, #0]
   d5080:	6858      	ldr	r0, [r3, #4]
   d5082:	f7ff fde1 	bl	d4c48 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5086:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5088:	2300      	movs	r3, #0
   d508a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d508c:	b128      	cbz	r0, d509a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d508e:	f7ff ffcd 	bl	d502c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5092:	6820      	ldr	r0, [r4, #0]
   d5094:	b108      	cbz	r0, d509a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5096:	f7ff ffc9 	bl	d502c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d509a:	4620      	mov	r0, r4
   d509c:	bd10      	pop	{r4, pc}

000d509e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d509e:	b538      	push	{r3, r4, r5, lr}
   d50a0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50a2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d50a6:	b108      	cbz	r0, d50ac <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d50a8:	f7fe fff7 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50ac:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d50b0:	b108      	cbz	r0, d50b6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d50b2:	f7ff fdd9 	bl	d4c68 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50b6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d50ba:	b135      	cbz	r5, d50ca <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50bc:	4628      	mov	r0, r5
   d50be:	f7ff ffd0 	bl	d5062 <_ZN6ThreadD1Ev>
   d50c2:	2104      	movs	r1, #4
   d50c4:	4628      	mov	r0, r5
   d50c6:	f000 fb98 	bl	d57fa <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50ca:	6820      	ldr	r0, [r4, #0]
   d50cc:	b108      	cbz	r0, d50d2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d50ce:	f7ff ffc3 	bl	d5058 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d50d2:	4620      	mov	r0, r4
   d50d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50d8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d50d8:	b510      	push	{r4, lr}
   d50da:	4b04      	ldr	r3, [pc, #16]	; (d50ec <_ZN5spark9MeshClassD1Ev+0x14>)
   d50dc:	4604      	mov	r4, r0
   d50de:	f840 3b08 	str.w	r3, [r0], #8
   d50e2:	f7ff ffdc 	bl	d509e <_ZN5spark11MeshPublishD1Ev>
   d50e6:	4620      	mov	r0, r4
   d50e8:	bd10      	pop	{r4, pc}
   d50ea:	bf00      	nop
   d50ec:	000d5f40 	.word	0x000d5f40

000d50f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d50f0:	b538      	push	{r3, r4, r5, lr}
   d50f2:	4c0e      	ldr	r4, [pc, #56]	; (d512c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d50f4:	4b0e      	ldr	r3, [pc, #56]	; (d5130 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d50f6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d50f8:	2500      	movs	r5, #0
   d50fa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d50fc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5100:	6063      	str	r3, [r4, #4]
   d5102:	60a5      	str	r5, [r4, #8]
   d5104:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5108:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d510c:	f7ff fda4 	bl	d4c58 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5110:	4b08      	ldr	r3, [pc, #32]	; (d5134 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5112:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5116:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d511a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d511c:	4620      	mov	r0, r4
   d511e:	4a06      	ldr	r2, [pc, #24]	; (d5138 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5120:	4906      	ldr	r1, [pc, #24]	; (d513c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5126:	f000 bb63 	b.w	d57f0 <__aeabi_atexit>
   d512a:	bf00      	nop
   d512c:	2003e408 	.word	0x2003e408
   d5130:	000d5ed8 	.word	0x000d5ed8
   d5134:	000d5f40 	.word	0x000d5f40
   d5138:	2003dd8c 	.word	0x2003dd8c
   d513c:	000d50d9 	.word	0x000d50d9

000d5140 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5140:	4770      	bx	lr

000d5142 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5142:	7441      	strb	r1, [r0, #17]
   d5144:	4770      	bx	lr

000d5146 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5146:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5148:	7c00      	ldrb	r0, [r0, #16]
   d514a:	f7ff fd5d 	bl	d4c08 <HAL_USART_Available_Data_For_Write>
}
   d514e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5152:	bd08      	pop	{r3, pc}

000d5154 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5154:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5156:	7c00      	ldrb	r0, [r0, #16]
   d5158:	f7ff fd36 	bl	d4bc8 <HAL_USART_Available_Data>
}
   d515c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5160:	bd08      	pop	{r3, pc}

000d5162 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5162:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5164:	7c00      	ldrb	r0, [r0, #16]
   d5166:	f7ff fd3f 	bl	d4be8 <HAL_USART_Peek_Data>
}
   d516a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d516e:	bf28      	it	cs
   d5170:	f04f 30ff 	movcs.w	r0, #4294967295
   d5174:	bd08      	pop	{r3, pc}

000d5176 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5176:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5178:	7c00      	ldrb	r0, [r0, #16]
   d517a:	f7ff fd2d 	bl	d4bd8 <HAL_USART_Read_Data>
}
   d517e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5182:	bf28      	it	cs
   d5184:	f04f 30ff 	movcs.w	r0, #4294967295
   d5188:	bd08      	pop	{r3, pc}

000d518a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d518a:	7c00      	ldrb	r0, [r0, #16]
   d518c:	f7ff bd34 	b.w	d4bf8 <HAL_USART_Flush_Data>

000d5190 <_ZN11USARTSerialD0Ev>:
   d5190:	b510      	push	{r4, lr}
   d5192:	2114      	movs	r1, #20
   d5194:	4604      	mov	r4, r0
   d5196:	f000 fb30 	bl	d57fa <_ZdlPvj>
   d519a:	4620      	mov	r0, r4
   d519c:	bd10      	pop	{r4, pc}

000d519e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d519e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d51a2:	4604      	mov	r4, r0
   d51a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d51a6:	b925      	cbnz	r5, d51b2 <_ZN11USARTSerial5writeEh+0x14>
   d51a8:	7c00      	ldrb	r0, [r0, #16]
   d51aa:	f7ff fd2d 	bl	d4c08 <HAL_USART_Available_Data_For_Write>
   d51ae:	2800      	cmp	r0, #0
   d51b0:	dd05      	ble.n	d51be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51b2:	4631      	mov	r1, r6
   d51b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d51ba:	f7ff bcfd 	b.w	d4bb8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d51be:	4628      	mov	r0, r5
   d51c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d51c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d51c4:	b510      	push	{r4, lr}
   d51c6:	4604      	mov	r4, r0
   d51c8:	4608      	mov	r0, r1
   d51ca:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d51cc:	2200      	movs	r2, #0
   d51ce:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d51d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51d4:	60a2      	str	r2, [r4, #8]
   d51d6:	4a05      	ldr	r2, [pc, #20]	; (d51ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d51d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d51da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d51dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d51de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d51e0:	461a      	mov	r2, r3
   d51e2:	f7ff fce1 	bl	d4ba8 <HAL_USART_Init>
}
   d51e6:	4620      	mov	r0, r4
   d51e8:	bd10      	pop	{r4, pc}
   d51ea:	bf00      	nop
   d51ec:	000d5f74 	.word	0x000d5f74

000d51f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51f2:	4d0c      	ldr	r5, [pc, #48]	; (d5224 <_Z22__fetch_global_Serial1v+0x34>)
   d51f4:	6829      	ldr	r1, [r5, #0]
   d51f6:	f011 0401 	ands.w	r4, r1, #1
   d51fa:	d111      	bne.n	d5220 <_Z22__fetch_global_Serial1v+0x30>
   d51fc:	4628      	mov	r0, r5
   d51fe:	f7fe ff4e 	bl	d409e <__cxa_guard_acquire>
   d5202:	b168      	cbz	r0, d5220 <_Z22__fetch_global_Serial1v+0x30>
   d5204:	4a08      	ldr	r2, [pc, #32]	; (d5228 <_Z22__fetch_global_Serial1v+0x38>)
   d5206:	4b09      	ldr	r3, [pc, #36]	; (d522c <_Z22__fetch_global_Serial1v+0x3c>)
   d5208:	4809      	ldr	r0, [pc, #36]	; (d5230 <_Z22__fetch_global_Serial1v+0x40>)
   d520a:	4621      	mov	r1, r4
   d520c:	f7ff ffda 	bl	d51c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5210:	4628      	mov	r0, r5
   d5212:	f7fe ff49 	bl	d40a8 <__cxa_guard_release>
   d5216:	4a07      	ldr	r2, [pc, #28]	; (d5234 <_Z22__fetch_global_Serial1v+0x44>)
   d5218:	4907      	ldr	r1, [pc, #28]	; (d5238 <_Z22__fetch_global_Serial1v+0x48>)
   d521a:	4805      	ldr	r0, [pc, #20]	; (d5230 <_Z22__fetch_global_Serial1v+0x40>)
   d521c:	f000 fae8 	bl	d57f0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5220:	4803      	ldr	r0, [pc, #12]	; (d5230 <_Z22__fetch_global_Serial1v+0x40>)
   d5222:	bd38      	pop	{r3, r4, r5, pc}
   d5224:	2003e674 	.word	0x2003e674
   d5228:	2003e678 	.word	0x2003e678
   d522c:	2003e5f0 	.word	0x2003e5f0
   d5230:	2003e5dc 	.word	0x2003e5dc
   d5234:	2003dd8c 	.word	0x2003dd8c
   d5238:	000d5141 	.word	0x000d5141

000d523c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d523c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d523e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5240:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5242:	b113      	cbz	r3, d524a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5244:	2203      	movs	r2, #3
   d5246:	4601      	mov	r1, r0
   d5248:	4798      	blx	r3
    }
   d524a:	4620      	mov	r0, r4
   d524c:	bd10      	pop	{r4, pc}

000d524e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d524e:	7441      	strb	r1, [r0, #17]
   d5250:	4770      	bx	lr

000d5252 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5252:	4770      	bx	lr

000d5254 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5254:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5256:	2100      	movs	r1, #0
   d5258:	7c00      	ldrb	r0, [r0, #16]
   d525a:	f7ff fc8d 	bl	d4b78 <HAL_USB_USART_Receive_Data>
}
   d525e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5262:	bf28      	it	cs
   d5264:	f04f 30ff 	movcs.w	r0, #4294967295
   d5268:	bd08      	pop	{r3, pc}

000d526a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d526a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d526c:	2101      	movs	r1, #1
   d526e:	7c00      	ldrb	r0, [r0, #16]
   d5270:	f7ff fc82 	bl	d4b78 <HAL_USB_USART_Receive_Data>
}
   d5274:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5278:	bf28      	it	cs
   d527a:	f04f 30ff 	movcs.w	r0, #4294967295
   d527e:	bd08      	pop	{r3, pc}

000d5280 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5280:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5282:	7c00      	ldrb	r0, [r0, #16]
   d5284:	f7ff fc70 	bl	d4b68 <HAL_USB_USART_Available_Data_For_Write>
}
   d5288:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d528c:	bd08      	pop	{r3, pc}

000d528e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d528e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5290:	7c00      	ldrb	r0, [r0, #16]
   d5292:	f7ff fc61 	bl	d4b58 <HAL_USB_USART_Available_Data>
}
   d5296:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d529a:	bd08      	pop	{r3, pc}

000d529c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d529c:	7c00      	ldrb	r0, [r0, #16]
   d529e:	f7ff bc7b 	b.w	d4b98 <HAL_USB_USART_Flush_Data>

000d52a2 <_ZN9USBSerialD0Ev>:
   d52a2:	b510      	push	{r4, lr}
   d52a4:	2114      	movs	r1, #20
   d52a6:	4604      	mov	r4, r0
   d52a8:	f000 faa7 	bl	d57fa <_ZdlPvj>
   d52ac:	4620      	mov	r0, r4
   d52ae:	bd10      	pop	{r4, pc}

000d52b0 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d52b0:	b538      	push	{r3, r4, r5, lr}
   d52b2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52b4:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d52b6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52b8:	f7ff fc56 	bl	d4b68 <HAL_USB_USART_Available_Data_For_Write>
   d52bc:	2800      	cmp	r0, #0
   d52be:	dc01      	bgt.n	d52c4 <_ZN9USBSerial5writeEh+0x14>
   d52c0:	7c60      	ldrb	r0, [r4, #17]
   d52c2:	b128      	cbz	r0, d52d0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d52c4:	4629      	mov	r1, r5
   d52c6:	7c20      	ldrb	r0, [r4, #16]
   d52c8:	f7ff fc5e 	bl	d4b88 <HAL_USB_USART_Send_Data>
   d52cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d52d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d52d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52d4:	b510      	push	{r4, lr}
   d52d6:	4604      	mov	r4, r0
   d52d8:	2300      	movs	r3, #0
   d52da:	6063      	str	r3, [r4, #4]
   d52dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52e0:	60a3      	str	r3, [r4, #8]
   d52e2:	4b05      	ldr	r3, [pc, #20]	; (d52f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d52e4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d52e6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52e8:	4608      	mov	r0, r1
{
  _serial = serial;
   d52ea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d52ec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d52ee:	4611      	mov	r1, r2
   d52f0:	f7ff fc22 	bl	d4b38 <HAL_USB_USART_Init>
}
   d52f4:	4620      	mov	r0, r4
   d52f6:	bd10      	pop	{r4, pc}
   d52f8:	000d5fa4 	.word	0x000d5fa4

000d52fc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d52fc:	2200      	movs	r2, #0
   d52fe:	7c00      	ldrb	r0, [r0, #16]
   d5300:	f7ff bc22 	b.w	d4b48 <HAL_USB_USART_Begin>

000d5304 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5304:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5306:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5308:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d530a:	2100      	movs	r1, #0
   d530c:	f000 fbd9 	bl	d5ac2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5310:	4620      	mov	r0, r4
   d5312:	bd10      	pop	{r4, pc}

000d5314 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5314:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5316:	4d0e      	ldr	r5, [pc, #56]	; (d5350 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5318:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d531a:	a801      	add	r0, sp, #4
   d531c:	f7ff fff2 	bl	d5304 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5320:	6829      	ldr	r1, [r5, #0]
   d5322:	f011 0401 	ands.w	r4, r1, #1
   d5326:	d110      	bne.n	d534a <_Z16_fetch_usbserialv+0x36>
   d5328:	4628      	mov	r0, r5
   d532a:	f7fe feb8 	bl	d409e <__cxa_guard_acquire>
   d532e:	b160      	cbz	r0, d534a <_Z16_fetch_usbserialv+0x36>
   d5330:	aa01      	add	r2, sp, #4
   d5332:	4621      	mov	r1, r4
   d5334:	4807      	ldr	r0, [pc, #28]	; (d5354 <_Z16_fetch_usbserialv+0x40>)
   d5336:	f7ff ffcd 	bl	d52d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d533a:	4628      	mov	r0, r5
   d533c:	f7fe feb4 	bl	d40a8 <__cxa_guard_release>
   d5340:	4a05      	ldr	r2, [pc, #20]	; (d5358 <_Z16_fetch_usbserialv+0x44>)
   d5342:	4906      	ldr	r1, [pc, #24]	; (d535c <_Z16_fetch_usbserialv+0x48>)
   d5344:	4803      	ldr	r0, [pc, #12]	; (d5354 <_Z16_fetch_usbserialv+0x40>)
   d5346:	f000 fa53 	bl	d57f0 <__aeabi_atexit>
	return _usbserial;
}
   d534a:	4802      	ldr	r0, [pc, #8]	; (d5354 <_Z16_fetch_usbserialv+0x40>)
   d534c:	b007      	add	sp, #28
   d534e:	bd30      	pop	{r4, r5, pc}
   d5350:	2003e6fc 	.word	0x2003e6fc
   d5354:	2003e700 	.word	0x2003e700
   d5358:	2003dd8c 	.word	0x2003dd8c
   d535c:	000d5253 	.word	0x000d5253

000d5360 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5360:	4770      	bx	lr

000d5362 <_ZN9IPAddressD0Ev>:
   d5362:	b510      	push	{r4, lr}
   d5364:	2118      	movs	r1, #24
   d5366:	4604      	mov	r4, r0
   d5368:	f000 fa47 	bl	d57fa <_ZdlPvj>
   d536c:	4620      	mov	r0, r4
   d536e:	bd10      	pop	{r4, pc}

000d5370 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5370:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5372:	7d03      	ldrb	r3, [r0, #20]
   d5374:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5376:	b08d      	sub	sp, #52	; 0x34
   d5378:	460e      	mov	r6, r1
   d537a:	f100 0704 	add.w	r7, r0, #4
   d537e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5382:	d002      	beq.n	d538a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5384:	f100 0508 	add.w	r5, r0, #8
   d5388:	e018      	b.n	d53bc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d538a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d538c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d538e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5392:	232f      	movs	r3, #47	; 0x2f
   d5394:	462a      	mov	r2, r5
   d5396:	200a      	movs	r0, #10
   d5398:	f7ff fc3e 	bl	d4c18 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d539c:	4628      	mov	r0, r5
   d539e:	f000 fbc1 	bl	d5b24 <strlen>
   d53a2:	6833      	ldr	r3, [r6, #0]
   d53a4:	4602      	mov	r2, r0
   d53a6:	68db      	ldr	r3, [r3, #12]
   d53a8:	4629      	mov	r1, r5
   d53aa:	4630      	mov	r0, r6
   d53ac:	4798      	blx	r3
   d53ae:	e00f      	b.n	d53d0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d53b0:	b124      	cbz	r4, d53bc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d53b2:	212e      	movs	r1, #46	; 0x2e
   d53b4:	4630      	mov	r0, r6
   d53b6:	f000 f91d 	bl	d55f4 <_ZN5Print5printEc>
   d53ba:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d53bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d53c0:	220a      	movs	r2, #10
   d53c2:	4630      	mov	r0, r6
   d53c4:	f000 f925 	bl	d5612 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d53c8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d53ca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d53cc:	d1f0      	bne.n	d53b0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d53ce:	4620      	mov	r0, r4
    }
    return n;
}
   d53d0:	b00d      	add	sp, #52	; 0x34
   d53d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53d4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d53d4:	b510      	push	{r4, lr}
   d53d6:	4b05      	ldr	r3, [pc, #20]	; (d53ec <_ZN9IPAddressC1Ev+0x18>)
   d53d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d53da:	2211      	movs	r2, #17
   d53dc:	f840 3b04 	str.w	r3, [r0], #4
   d53e0:	2100      	movs	r1, #0
   d53e2:	f000 fb6e 	bl	d5ac2 <memset>
{
    clear();
}
   d53e6:	4620      	mov	r0, r4
   d53e8:	bd10      	pop	{r4, pc}
   d53ea:	bf00      	nop
   d53ec:	000d5fd4 	.word	0x000d5fd4

000d53f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d53f0:	4603      	mov	r3, r0
   d53f2:	4a07      	ldr	r2, [pc, #28]	; (d5410 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53f4:	b510      	push	{r4, lr}
   d53f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d53fa:	f101 0210 	add.w	r2, r1, #16
   d53fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d5402:	f843 4b04 	str.w	r4, [r3], #4
   d5406:	4291      	cmp	r1, r2
   d5408:	d1f9      	bne.n	d53fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d540a:	780a      	ldrb	r2, [r1, #0]
   d540c:	701a      	strb	r2, [r3, #0]
}
   d540e:	bd10      	pop	{r4, pc}
   d5410:	000d5fd4 	.word	0x000d5fd4

000d5414 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5414:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5416:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d541a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d541e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5422:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5426:	2304      	movs	r3, #4
   d5428:	6041      	str	r1, [r0, #4]
   d542a:	7503      	strb	r3, [r0, #20]
   d542c:	bd10      	pop	{r4, pc}

000d542e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d542e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5430:	780d      	ldrb	r5, [r1, #0]
   d5432:	788b      	ldrb	r3, [r1, #2]
   d5434:	784a      	ldrb	r2, [r1, #1]
   d5436:	78c9      	ldrb	r1, [r1, #3]
   d5438:	9100      	str	r1, [sp, #0]
   d543a:	4629      	mov	r1, r5
   d543c:	f7ff ffea 	bl	d5414 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5440:	b003      	add	sp, #12
   d5442:	bd30      	pop	{r4, r5, pc}

000d5444 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5444:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5446:	4b0c      	ldr	r3, [pc, #48]	; (d5478 <serialEventRun+0x34>)
   d5448:	b133      	cbz	r3, d5458 <serialEventRun+0x14>
   d544a:	f7ff ff63 	bl	d5314 <_Z16_fetch_usbserialv>
   d544e:	6803      	ldr	r3, [r0, #0]
   d5450:	691b      	ldr	r3, [r3, #16]
   d5452:	4798      	blx	r3
   d5454:	2800      	cmp	r0, #0
   d5456:	dc09      	bgt.n	d546c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5458:	4b08      	ldr	r3, [pc, #32]	; (d547c <serialEventRun+0x38>)
   d545a:	b163      	cbz	r3, d5476 <serialEventRun+0x32>
   d545c:	f7ff fec8 	bl	d51f0 <_Z22__fetch_global_Serial1v>
   d5460:	6803      	ldr	r3, [r0, #0]
   d5462:	691b      	ldr	r3, [r3, #16]
   d5464:	4798      	blx	r3
   d5466:	2800      	cmp	r0, #0
   d5468:	dc03      	bgt.n	d5472 <serialEventRun+0x2e>
   d546a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d546c:	f3af 8000 	nop.w
   d5470:	e7f2      	b.n	d5458 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5472:	f3af 8000 	nop.w
   d5476:	bd08      	pop	{r3, pc}
	...

000d5480 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5480:	b508      	push	{r3, lr}
	serialEventRun();
   d5482:	f7ff ffdf 	bl	d5444 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5486:	f7ff fc07 	bl	d4c98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d548a:	4b01      	ldr	r3, [pc, #4]	; (d5490 <_post_loop+0x10>)
   d548c:	6018      	str	r0, [r3, #0]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	2003e74c 	.word	0x2003e74c

000d5494 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5494:	4802      	ldr	r0, [pc, #8]	; (d54a0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5496:	4a03      	ldr	r2, [pc, #12]	; (d54a4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5498:	4903      	ldr	r1, [pc, #12]	; (d54a8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d549a:	1a12      	subs	r2, r2, r0
   d549c:	f000 bb06 	b.w	d5aac <memcpy>
   d54a0:	2003f400 	.word	0x2003f400
   d54a4:	2003f404 	.word	0x2003f404
   d54a8:	000d61c0 	.word	0x000d61c0

000d54ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d54ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54ae:	2300      	movs	r3, #0
   d54b0:	9300      	str	r3, [sp, #0]
   d54b2:	461a      	mov	r2, r3
   d54b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54b8:	f7ff fc80 	bl	d4dbc <system_ctrl_set_result>
}
   d54bc:	b003      	add	sp, #12
   d54be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d54c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d54c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d54c6:	8843      	ldrh	r3, [r0, #2]
   d54c8:	2b0a      	cmp	r3, #10
   d54ca:	d008      	beq.n	d54de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d54cc:	2b50      	cmp	r3, #80	; 0x50
   d54ce:	d109      	bne.n	d54e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d54d0:	4b09      	ldr	r3, [pc, #36]	; (d54f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d54d2:	681b      	ldr	r3, [r3, #0]
   d54d4:	b13b      	cbz	r3, d54e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d54d6:	b003      	add	sp, #12
   d54d8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d54dc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d54de:	f7ff ffe5 	bl	d54ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d54e2:	e006      	b.n	d54f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54e4:	2300      	movs	r3, #0
   d54e6:	9300      	str	r3, [sp, #0]
   d54e8:	461a      	mov	r2, r3
   d54ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54ee:	f7ff fc65 	bl	d4dbc <system_ctrl_set_result>
        break;
    }
}
   d54f2:	b003      	add	sp, #12
   d54f4:	f85d fb04 	ldr.w	pc, [sp], #4
   d54f8:	2003e714 	.word	0x2003e714

000d54fc <module_user_init_hook>:

void module_user_init_hook()
{
   d54fc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d54fe:	4c10      	ldr	r4, [pc, #64]	; (d5540 <module_user_init_hook+0x44>)
   d5500:	4d10      	ldr	r5, [pc, #64]	; (d5544 <module_user_init_hook+0x48>)
   d5502:	6823      	ldr	r3, [r4, #0]
   d5504:	42ab      	cmp	r3, r5
   d5506:	4b10      	ldr	r3, [pc, #64]	; (d5548 <module_user_init_hook+0x4c>)
   d5508:	bf0c      	ite	eq
   d550a:	2201      	moveq	r2, #1
   d550c:	2200      	movne	r2, #0
   d550e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5510:	d002      	beq.n	d5518 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5512:	f7ff ffbf 	bl	d5494 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5516:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5518:	f7ff fbb6 	bl	d4c88 <HAL_RNG_GetRandomNumber>
   d551c:	4604      	mov	r4, r0
    srand(seed);
   d551e:	f000 fad9 	bl	d5ad4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5522:	4b0a      	ldr	r3, [pc, #40]	; (d554c <module_user_init_hook+0x50>)
   d5524:	b113      	cbz	r3, d552c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5526:	4620      	mov	r0, r4
   d5528:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d552c:	2100      	movs	r1, #0
   d552e:	4807      	ldr	r0, [pc, #28]	; (d554c <module_user_init_hook+0x50>)
   d5530:	f7ff fbd2 	bl	d4cd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5534:	2100      	movs	r1, #0
   d5536:	4806      	ldr	r0, [pc, #24]	; (d5550 <module_user_init_hook+0x54>)
}
   d5538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d553c:	f7ff bc34 	b.w	d4da8 <system_ctrl_set_app_request_handler>
   d5540:	2003f400 	.word	0x2003f400
   d5544:	9a271c1e 	.word	0x9a271c1e
   d5548:	2003e718 	.word	0x2003e718
   d554c:	00000000 	.word	0x00000000
   d5550:	000d54c5 	.word	0x000d54c5

000d5554 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5554:	b510      	push	{r4, lr}
   d5556:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5558:	f7ff fe70 	bl	d523c <_ZNSt14_Function_baseD1Ev>
   d555c:	4620      	mov	r0, r4
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5560:	4803      	ldr	r0, [pc, #12]	; (d5570 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5562:	4a04      	ldr	r2, [pc, #16]	; (d5574 <_GLOBAL__sub_I_RGB+0x14>)
   d5564:	4904      	ldr	r1, [pc, #16]	; (d5578 <_GLOBAL__sub_I_RGB+0x18>)
   d5566:	2300      	movs	r3, #0
   d5568:	6083      	str	r3, [r0, #8]
   d556a:	f000 b941 	b.w	d57f0 <__aeabi_atexit>
   d556e:	bf00      	nop
   d5570:	2003e71c 	.word	0x2003e71c
   d5574:	2003dd8c 	.word	0x2003dd8c
   d5578:	000d5555 	.word	0x000d5555

000d557c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d557c:	2100      	movs	r1, #0
   d557e:	f7ff bc0b 	b.w	d4d98 <system_delay_ms>
	...

000d5584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5584:	4b02      	ldr	r3, [pc, #8]	; (d5590 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5586:	681a      	ldr	r2, [r3, #0]
   d5588:	4b02      	ldr	r3, [pc, #8]	; (d5594 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d558a:	601a      	str	r2, [r3, #0]
   d558c:	4770      	bx	lr
   d558e:	bf00      	nop
   d5590:	2003dd24 	.word	0x2003dd24
   d5594:	2003e72c 	.word	0x2003e72c

000d5598 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5598:	4b01      	ldr	r3, [pc, #4]	; (d55a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d559a:	4a02      	ldr	r2, [pc, #8]	; (d55a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d559c:	601a      	str	r2, [r3, #0]
   d559e:	4770      	bx	lr
   d55a0:	2003e730 	.word	0x2003e730
   d55a4:	000d607a 	.word	0x000d607a

000d55a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d55a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55aa:	4606      	mov	r6, r0
   d55ac:	460d      	mov	r5, r1
   d55ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d55b0:	2400      	movs	r4, #0
  while (size--) {
   d55b2:	42bd      	cmp	r5, r7
   d55b4:	d00c      	beq.n	d55d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d55b6:	6833      	ldr	r3, [r6, #0]
   d55b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d55bc:	689b      	ldr	r3, [r3, #8]
   d55be:	4630      	mov	r0, r6
   d55c0:	4798      	blx	r3
     if (chunk>=0)
   d55c2:	2800      	cmp	r0, #0
   d55c4:	db01      	blt.n	d55ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d55c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d55c8:	e7f3      	b.n	d55b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d55ca:	2c00      	cmp	r4, #0
   d55cc:	bf08      	it	eq
   d55ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d55d0:	4620      	mov	r0, r4
   d55d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55d4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d55d4:	b570      	push	{r4, r5, r6, lr}
   d55d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d55d8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d55da:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d55dc:	b149      	cbz	r1, d55f2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d55de:	f000 faa1 	bl	d5b24 <strlen>
   d55e2:	682b      	ldr	r3, [r5, #0]
   d55e4:	4602      	mov	r2, r0
   d55e6:	4621      	mov	r1, r4
   d55e8:	4628      	mov	r0, r5
   d55ea:	68db      	ldr	r3, [r3, #12]
    }
   d55ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55f0:	4718      	bx	r3
    }
   d55f2:	bd70      	pop	{r4, r5, r6, pc}

000d55f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d55f4:	6803      	ldr	r3, [r0, #0]
   d55f6:	689b      	ldr	r3, [r3, #8]
   d55f8:	4718      	bx	r3

000d55fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d55fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d55fc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d55fe:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5600:	f7ff fff8 	bl	d55f4 <_ZN5Print5printEc>
  n += print('\n');
   d5604:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5606:	4604      	mov	r4, r0
  n += print('\n');
   d5608:	4628      	mov	r0, r5
   d560a:	f7ff fff3 	bl	d55f4 <_ZN5Print5printEc>
  return n;
}
   d560e:	4420      	add	r0, r4
   d5610:	bd38      	pop	{r3, r4, r5, pc}

000d5612 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5612:	b530      	push	{r4, r5, lr}
   d5614:	b08b      	sub	sp, #44	; 0x2c
   d5616:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5618:	2100      	movs	r1, #0
   d561a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d561e:	2a01      	cmp	r2, #1
   d5620:	bf98      	it	ls
   d5622:	220a      	movls	r2, #10
   d5624:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5628:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d562c:	fb05 3312 	mls	r3, r5, r2, r3
   d5630:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5634:	2b09      	cmp	r3, #9
   d5636:	bf94      	ite	ls
   d5638:	3330      	addls	r3, #48	; 0x30
   d563a:	3337      	addhi	r3, #55	; 0x37
   d563c:	b2db      	uxtb	r3, r3
   d563e:	4621      	mov	r1, r4
   d5640:	f804 3901 	strb.w	r3, [r4], #-1
   d5644:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5646:	2d00      	cmp	r5, #0
   d5648:	d1ee      	bne.n	d5628 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d564a:	f7ff ffc3 	bl	d55d4 <_ZN5Print5writeEPKc>
}
   d564e:	b00b      	add	sp, #44	; 0x2c
   d5650:	bd30      	pop	{r4, r5, pc}

000d5652 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5652:	b40c      	push	{r2, r3}
   d5654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5658:	b087      	sub	sp, #28
   d565a:	af00      	add	r7, sp, #0
   d565c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5660:	4605      	mov	r5, r0
   d5662:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5666:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5668:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d566a:	4623      	mov	r3, r4
   d566c:	464a      	mov	r2, r9
   d566e:	2114      	movs	r1, #20
   d5670:	1d38      	adds	r0, r7, #4
   d5672:	f7ff fbbd 	bl	d4df0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5676:	2813      	cmp	r0, #19
   d5678:	d805      	bhi.n	d5686 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d567a:	1d39      	adds	r1, r7, #4
   d567c:	4628      	mov	r0, r5
   d567e:	f7ff ffa9 	bl	d55d4 <_ZN5Print5writeEPKc>
   d5682:	4604      	mov	r4, r0
   d5684:	e013      	b.n	d56ae <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5686:	f100 0308 	add.w	r3, r0, #8
   d568a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d568e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5690:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5694:	1c41      	adds	r1, r0, #1
   d5696:	4623      	mov	r3, r4
   d5698:	464a      	mov	r2, r9
   d569a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d569c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d569e:	f7ff fba7 	bl	d4df0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56a2:	4669      	mov	r1, sp
   d56a4:	4628      	mov	r0, r5
   d56a6:	f7ff ff95 	bl	d55d4 <_ZN5Print5writeEPKc>
   d56aa:	4604      	mov	r4, r0
   d56ac:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d56ae:	b11e      	cbz	r6, d56b8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d56b0:	4628      	mov	r0, r5
   d56b2:	f7ff ffa2 	bl	d55fa <_ZN5Print7printlnEv>
   d56b6:	4404      	add	r4, r0
    return n;
}
   d56b8:	4620      	mov	r0, r4
   d56ba:	371c      	adds	r7, #28
   d56bc:	46bd      	mov	sp, r7
   d56be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d56c2:	b002      	add	sp, #8
   d56c4:	4770      	bx	lr

000d56c6 <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d56c6:	b510      	push	{r4, lr}
   d56c8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d56ca:	6800      	ldr	r0, [r0, #0]
   d56cc:	b108      	cbz	r0, d56d2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d56ce:	f7ff facb 	bl	d4c68 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d56d2:	4620      	mov	r0, r4
   d56d4:	bd10      	pop	{r4, pc}
	...

000d56d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d56d8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56da:	4c06      	ldr	r4, [pc, #24]	; (d56f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d56dc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d56de:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56e0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d56e2:	f7ff fab9 	bl	d4c58 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d56e6:	4620      	mov	r0, r4
   d56e8:	4a03      	ldr	r2, [pc, #12]	; (d56f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d56ea:	4904      	ldr	r1, [pc, #16]	; (d56fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d56ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d56f0:	f000 b87e 	b.w	d57f0 <__aeabi_atexit>
   d56f4:	2003e734 	.word	0x2003e734
   d56f8:	2003dd8c 	.word	0x2003dd8c
   d56fc:	000d56c7 	.word	0x000d56c7

000d5700 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5700:	b510      	push	{r4, lr}
   d5702:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5704:	6800      	ldr	r0, [r0, #0]
   d5706:	b118      	cbz	r0, d5710 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5708:	f7ff fb6a 	bl	d4de0 <free>
            wakeupSource_ = nullptr;
   d570c:	2300      	movs	r3, #0
   d570e:	6023      	str	r3, [r4, #0]
   d5710:	bd10      	pop	{r4, pc}

000d5712 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5712:	b510      	push	{r4, lr}
   d5714:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5716:	f7ff fff3 	bl	d5700 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d571a:	4620      	mov	r0, r4
   d571c:	bd10      	pop	{r4, pc}

000d571e <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   d571e:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   d5720:	2420      	movs	r4, #32
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   d5722:	b088      	sub	sp, #32
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   d5724:	4622      	mov	r2, r4
   d5726:	2100      	movs	r1, #0
   d5728:	4668      	mov	r0, sp
   d572a:	f000 f9ca 	bl	d5ac2 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   d572e:	2100      	movs	r1, #0
   d5730:	4668      	mov	r0, sp

uint32_t SystemClass::freeMemory()
{
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
    info.size = sizeof(info);
   d5732:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   d5736:	f7ff fa9f 	bl	d4c78 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   d573a:	9801      	ldr	r0, [sp, #4]
   d573c:	b008      	add	sp, #32
   d573e:	bd10      	pop	{r4, pc}

000d5740 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5740:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5742:	4c09      	ldr	r4, [pc, #36]	; (d5768 <_GLOBAL__sub_I_System+0x28>)
   d5744:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5746:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d574a:	6020      	str	r0, [r4, #0]
   d574c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d574e:	71a0      	strb	r0, [r4, #6]
   d5750:	8120      	strh	r0, [r4, #8]
   d5752:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5754:	f7ff fb18 	bl	d4d88 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5758:	4620      	mov	r0, r4
   d575a:	4a04      	ldr	r2, [pc, #16]	; (d576c <_GLOBAL__sub_I_System+0x2c>)
   d575c:	4904      	ldr	r1, [pc, #16]	; (d5770 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5762:	f000 b845 	b.w	d57f0 <__aeabi_atexit>
   d5766:	bf00      	nop
   d5768:	2003e738 	.word	0x2003e738
   d576c:	2003dd8c 	.word	0x2003dd8c
   d5770:	000d5713 	.word	0x000d5713

000d5774 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5774:	2200      	movs	r2, #0
   d5776:	4611      	mov	r1, r2
   d5778:	6840      	ldr	r0, [r0, #4]
   d577a:	f7ff baed 	b.w	d4d58 <network_listening>

000d577e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d577e:	2200      	movs	r2, #0
   d5780:	4611      	mov	r1, r2
   d5782:	6840      	ldr	r0, [r0, #4]
   d5784:	f7ff baf8 	b.w	d4d78 <network_get_listen_timeout>

000d5788 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5788:	2200      	movs	r2, #0
   d578a:	6840      	ldr	r0, [r0, #4]
   d578c:	f7ff baec 	b.w	d4d68 <network_set_listen_timeout>

000d5790 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5790:	2200      	movs	r2, #0
   d5792:	f081 0101 	eor.w	r1, r1, #1
   d5796:	6840      	ldr	r0, [r0, #4]
   d5798:	f7ff bad6 	b.w	d4d48 <network_listen>

000d579c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d579c:	2300      	movs	r3, #0
   d579e:	461a      	mov	r2, r3
   d57a0:	4619      	mov	r1, r3
   d57a2:	6840      	ldr	r0, [r0, #4]
   d57a4:	f7ff bac8 	b.w	d4d38 <network_off>

000d57a8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d57a8:	2300      	movs	r3, #0
   d57aa:	461a      	mov	r2, r3
   d57ac:	4619      	mov	r1, r3
   d57ae:	6840      	ldr	r0, [r0, #4]
   d57b0:	f7ff baba 	b.w	d4d28 <network_on>

000d57b4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d57b4:	2200      	movs	r2, #0
   d57b6:	4611      	mov	r1, r2
   d57b8:	6840      	ldr	r0, [r0, #4]
   d57ba:	f7ff baad 	b.w	d4d18 <network_ready>

000d57be <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d57be:	2200      	movs	r2, #0
   d57c0:	4611      	mov	r1, r2
   d57c2:	6840      	ldr	r0, [r0, #4]
   d57c4:	f7ff ba98 	b.w	d4cf8 <network_connecting>

000d57c8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57c8:	2200      	movs	r2, #0
   d57ca:	2102      	movs	r1, #2
   d57cc:	6840      	ldr	r0, [r0, #4]
   d57ce:	f7ff ba9b 	b.w	d4d08 <network_disconnect>

000d57d2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57d2:	2300      	movs	r3, #0
   d57d4:	461a      	mov	r2, r3
   d57d6:	6840      	ldr	r0, [r0, #4]
   d57d8:	f7ff ba86 	b.w	d4ce8 <network_connect>

000d57dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d57dc:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d57de:	2203      	movs	r2, #3
   d57e0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d57e2:	4a02      	ldr	r2, [pc, #8]	; (d57ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d57e4:	601a      	str	r2, [r3, #0]
   d57e6:	4770      	bx	lr
   d57e8:	2003e744 	.word	0x2003e744
   d57ec:	000d60f0 	.word	0x000d60f0

000d57f0 <__aeabi_atexit>:
   d57f0:	460b      	mov	r3, r1
   d57f2:	4601      	mov	r1, r0
   d57f4:	4618      	mov	r0, r3
   d57f6:	f000 b94b 	b.w	d5a90 <__cxa_atexit>

000d57fa <_ZdlPvj>:
   d57fa:	f7fe bc4c 	b.w	d4096 <_ZdlPv>
	...

000d5800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5800:	4b18      	ldr	r3, [pc, #96]	; (d5864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5802:	681a      	ldr	r2, [r3, #0]
   d5804:	07d1      	lsls	r1, r2, #31
   d5806:	bf5c      	itt	pl
   d5808:	2201      	movpl	r2, #1
   d580a:	601a      	strpl	r2, [r3, #0]
   d580c:	4b16      	ldr	r3, [pc, #88]	; (d5868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d580e:	681a      	ldr	r2, [r3, #0]
   d5810:	07d2      	lsls	r2, r2, #31
   d5812:	bf5c      	itt	pl
   d5814:	2201      	movpl	r2, #1
   d5816:	601a      	strpl	r2, [r3, #0]
   d5818:	4b14      	ldr	r3, [pc, #80]	; (d586c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d581a:	681a      	ldr	r2, [r3, #0]
   d581c:	07d0      	lsls	r0, r2, #31
   d581e:	bf5c      	itt	pl
   d5820:	2201      	movpl	r2, #1
   d5822:	601a      	strpl	r2, [r3, #0]
   d5824:	4b12      	ldr	r3, [pc, #72]	; (d5870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5826:	681a      	ldr	r2, [r3, #0]
   d5828:	07d1      	lsls	r1, r2, #31
   d582a:	bf5c      	itt	pl
   d582c:	2201      	movpl	r2, #1
   d582e:	601a      	strpl	r2, [r3, #0]
   d5830:	4b10      	ldr	r3, [pc, #64]	; (d5874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5832:	681a      	ldr	r2, [r3, #0]
   d5834:	07d2      	lsls	r2, r2, #31
   d5836:	bf5c      	itt	pl
   d5838:	2201      	movpl	r2, #1
   d583a:	601a      	strpl	r2, [r3, #0]
   d583c:	4b0e      	ldr	r3, [pc, #56]	; (d5878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d583e:	681a      	ldr	r2, [r3, #0]
   d5840:	07d0      	lsls	r0, r2, #31
   d5842:	bf5c      	itt	pl
   d5844:	2201      	movpl	r2, #1
   d5846:	601a      	strpl	r2, [r3, #0]
   d5848:	4b0c      	ldr	r3, [pc, #48]	; (d587c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d584a:	681a      	ldr	r2, [r3, #0]
   d584c:	07d1      	lsls	r1, r2, #31
   d584e:	bf5c      	itt	pl
   d5850:	2201      	movpl	r2, #1
   d5852:	601a      	strpl	r2, [r3, #0]
   d5854:	4b0a      	ldr	r3, [pc, #40]	; (d5880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5856:	681a      	ldr	r2, [r3, #0]
   d5858:	07d2      	lsls	r2, r2, #31
   d585a:	bf5c      	itt	pl
   d585c:	2201      	movpl	r2, #1
   d585e:	601a      	strpl	r2, [r3, #0]
   d5860:	4770      	bx	lr
   d5862:	bf00      	nop
   d5864:	2003e76c 	.word	0x2003e76c
   d5868:	2003e768 	.word	0x2003e768
   d586c:	2003e764 	.word	0x2003e764
   d5870:	2003e760 	.word	0x2003e760
   d5874:	2003e75c 	.word	0x2003e75c
   d5878:	2003e758 	.word	0x2003e758
   d587c:	2003e754 	.word	0x2003e754
   d5880:	2003e750 	.word	0x2003e750

000d5884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5884:	4b24      	ldr	r3, [pc, #144]	; (d5918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5886:	681a      	ldr	r2, [r3, #0]
   d5888:	07d0      	lsls	r0, r2, #31
   d588a:	bf5c      	itt	pl
   d588c:	2201      	movpl	r2, #1
   d588e:	601a      	strpl	r2, [r3, #0]
   d5890:	4b22      	ldr	r3, [pc, #136]	; (d591c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5892:	681a      	ldr	r2, [r3, #0]
   d5894:	07d1      	lsls	r1, r2, #31
   d5896:	bf5c      	itt	pl
   d5898:	2201      	movpl	r2, #1
   d589a:	601a      	strpl	r2, [r3, #0]
   d589c:	4b20      	ldr	r3, [pc, #128]	; (d5920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d589e:	681a      	ldr	r2, [r3, #0]
   d58a0:	07d2      	lsls	r2, r2, #31
   d58a2:	bf5c      	itt	pl
   d58a4:	2201      	movpl	r2, #1
   d58a6:	601a      	strpl	r2, [r3, #0]
   d58a8:	4b1e      	ldr	r3, [pc, #120]	; (d5924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d58aa:	681a      	ldr	r2, [r3, #0]
   d58ac:	07d0      	lsls	r0, r2, #31
   d58ae:	bf5c      	itt	pl
   d58b0:	2201      	movpl	r2, #1
   d58b2:	601a      	strpl	r2, [r3, #0]
   d58b4:	4b1c      	ldr	r3, [pc, #112]	; (d5928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d58b6:	681a      	ldr	r2, [r3, #0]
   d58b8:	07d1      	lsls	r1, r2, #31
   d58ba:	bf5c      	itt	pl
   d58bc:	2201      	movpl	r2, #1
   d58be:	601a      	strpl	r2, [r3, #0]
   d58c0:	4b1a      	ldr	r3, [pc, #104]	; (d592c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d58c2:	681a      	ldr	r2, [r3, #0]
   d58c4:	07d2      	lsls	r2, r2, #31
   d58c6:	bf5c      	itt	pl
   d58c8:	2201      	movpl	r2, #1
   d58ca:	601a      	strpl	r2, [r3, #0]
   d58cc:	4b18      	ldr	r3, [pc, #96]	; (d5930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d58ce:	681a      	ldr	r2, [r3, #0]
   d58d0:	07d0      	lsls	r0, r2, #31
   d58d2:	bf5c      	itt	pl
   d58d4:	2201      	movpl	r2, #1
   d58d6:	601a      	strpl	r2, [r3, #0]
   d58d8:	4b16      	ldr	r3, [pc, #88]	; (d5934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d58da:	681a      	ldr	r2, [r3, #0]
   d58dc:	07d1      	lsls	r1, r2, #31
   d58de:	bf5c      	itt	pl
   d58e0:	2201      	movpl	r2, #1
   d58e2:	601a      	strpl	r2, [r3, #0]
   d58e4:	4b14      	ldr	r3, [pc, #80]	; (d5938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d58e6:	681a      	ldr	r2, [r3, #0]
   d58e8:	07d2      	lsls	r2, r2, #31
   d58ea:	bf5c      	itt	pl
   d58ec:	2201      	movpl	r2, #1
   d58ee:	601a      	strpl	r2, [r3, #0]
   d58f0:	4b12      	ldr	r3, [pc, #72]	; (d593c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d58f2:	681a      	ldr	r2, [r3, #0]
   d58f4:	07d0      	lsls	r0, r2, #31
   d58f6:	bf5c      	itt	pl
   d58f8:	2201      	movpl	r2, #1
   d58fa:	601a      	strpl	r2, [r3, #0]
   d58fc:	4b10      	ldr	r3, [pc, #64]	; (d5940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d58fe:	681a      	ldr	r2, [r3, #0]
   d5900:	07d1      	lsls	r1, r2, #31
   d5902:	bf5c      	itt	pl
   d5904:	2201      	movpl	r2, #1
   d5906:	601a      	strpl	r2, [r3, #0]
   d5908:	4b0e      	ldr	r3, [pc, #56]	; (d5944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d2      	lsls	r2, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4770      	bx	lr
   d5916:	bf00      	nop
   d5918:	2003e79c 	.word	0x2003e79c
   d591c:	2003e798 	.word	0x2003e798
   d5920:	2003e794 	.word	0x2003e794
   d5924:	2003e790 	.word	0x2003e790
   d5928:	2003e78c 	.word	0x2003e78c
   d592c:	2003e788 	.word	0x2003e788
   d5930:	2003e784 	.word	0x2003e784
   d5934:	2003e780 	.word	0x2003e780
   d5938:	2003e77c 	.word	0x2003e77c
   d593c:	2003e778 	.word	0x2003e778
   d5940:	2003e774 	.word	0x2003e774
   d5944:	2003e770 	.word	0x2003e770

000d5948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5948:	4b24      	ldr	r3, [pc, #144]	; (d59dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d594a:	681a      	ldr	r2, [r3, #0]
   d594c:	07d0      	lsls	r0, r2, #31
   d594e:	bf5c      	itt	pl
   d5950:	2201      	movpl	r2, #1
   d5952:	601a      	strpl	r2, [r3, #0]
   d5954:	4b22      	ldr	r3, [pc, #136]	; (d59e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5956:	681a      	ldr	r2, [r3, #0]
   d5958:	07d1      	lsls	r1, r2, #31
   d595a:	bf5c      	itt	pl
   d595c:	2201      	movpl	r2, #1
   d595e:	601a      	strpl	r2, [r3, #0]
   d5960:	4b20      	ldr	r3, [pc, #128]	; (d59e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5962:	681a      	ldr	r2, [r3, #0]
   d5964:	07d2      	lsls	r2, r2, #31
   d5966:	bf5c      	itt	pl
   d5968:	2201      	movpl	r2, #1
   d596a:	601a      	strpl	r2, [r3, #0]
   d596c:	4b1e      	ldr	r3, [pc, #120]	; (d59e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d596e:	681a      	ldr	r2, [r3, #0]
   d5970:	07d0      	lsls	r0, r2, #31
   d5972:	bf5c      	itt	pl
   d5974:	2201      	movpl	r2, #1
   d5976:	601a      	strpl	r2, [r3, #0]
   d5978:	4b1c      	ldr	r3, [pc, #112]	; (d59ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d597a:	681a      	ldr	r2, [r3, #0]
   d597c:	07d1      	lsls	r1, r2, #31
   d597e:	bf5c      	itt	pl
   d5980:	2201      	movpl	r2, #1
   d5982:	601a      	strpl	r2, [r3, #0]
   d5984:	4b1a      	ldr	r3, [pc, #104]	; (d59f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5986:	681a      	ldr	r2, [r3, #0]
   d5988:	07d2      	lsls	r2, r2, #31
   d598a:	bf5c      	itt	pl
   d598c:	2201      	movpl	r2, #1
   d598e:	601a      	strpl	r2, [r3, #0]
   d5990:	4b18      	ldr	r3, [pc, #96]	; (d59f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5992:	681a      	ldr	r2, [r3, #0]
   d5994:	07d0      	lsls	r0, r2, #31
   d5996:	bf5c      	itt	pl
   d5998:	2201      	movpl	r2, #1
   d599a:	601a      	strpl	r2, [r3, #0]
   d599c:	4b16      	ldr	r3, [pc, #88]	; (d59f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d599e:	681a      	ldr	r2, [r3, #0]
   d59a0:	07d1      	lsls	r1, r2, #31
   d59a2:	bf5c      	itt	pl
   d59a4:	2201      	movpl	r2, #1
   d59a6:	601a      	strpl	r2, [r3, #0]
   d59a8:	4b14      	ldr	r3, [pc, #80]	; (d59fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d59aa:	681a      	ldr	r2, [r3, #0]
   d59ac:	07d2      	lsls	r2, r2, #31
   d59ae:	bf5c      	itt	pl
   d59b0:	2201      	movpl	r2, #1
   d59b2:	601a      	strpl	r2, [r3, #0]
   d59b4:	4b12      	ldr	r3, [pc, #72]	; (d5a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d59b6:	681a      	ldr	r2, [r3, #0]
   d59b8:	07d0      	lsls	r0, r2, #31
   d59ba:	bf5c      	itt	pl
   d59bc:	2201      	movpl	r2, #1
   d59be:	601a      	strpl	r2, [r3, #0]
   d59c0:	4b10      	ldr	r3, [pc, #64]	; (d5a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d1      	lsls	r1, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b0e      	ldr	r3, [pc, #56]	; (d5a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d2      	lsls	r2, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4770      	bx	lr
   d59da:	bf00      	nop
   d59dc:	2003e7cc 	.word	0x2003e7cc
   d59e0:	2003e7c8 	.word	0x2003e7c8
   d59e4:	2003e7c4 	.word	0x2003e7c4
   d59e8:	2003e7c0 	.word	0x2003e7c0
   d59ec:	2003e7bc 	.word	0x2003e7bc
   d59f0:	2003e7b8 	.word	0x2003e7b8
   d59f4:	2003e7b4 	.word	0x2003e7b4
   d59f8:	2003e7b0 	.word	0x2003e7b0
   d59fc:	2003e7ac 	.word	0x2003e7ac
   d5a00:	2003e7a8 	.word	0x2003e7a8
   d5a04:	2003e7a4 	.word	0x2003e7a4
   d5a08:	2003e7a0 	.word	0x2003e7a0

000d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5a0c:	4b18      	ldr	r3, [pc, #96]	; (d5a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5a0e:	681a      	ldr	r2, [r3, #0]
   d5a10:	07d1      	lsls	r1, r2, #31
   d5a12:	bf5c      	itt	pl
   d5a14:	2201      	movpl	r2, #1
   d5a16:	601a      	strpl	r2, [r3, #0]
   d5a18:	4b16      	ldr	r3, [pc, #88]	; (d5a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5a1a:	681a      	ldr	r2, [r3, #0]
   d5a1c:	07d2      	lsls	r2, r2, #31
   d5a1e:	bf5c      	itt	pl
   d5a20:	2201      	movpl	r2, #1
   d5a22:	601a      	strpl	r2, [r3, #0]
   d5a24:	4b14      	ldr	r3, [pc, #80]	; (d5a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5a26:	681a      	ldr	r2, [r3, #0]
   d5a28:	07d0      	lsls	r0, r2, #31
   d5a2a:	bf5c      	itt	pl
   d5a2c:	2201      	movpl	r2, #1
   d5a2e:	601a      	strpl	r2, [r3, #0]
   d5a30:	4b12      	ldr	r3, [pc, #72]	; (d5a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5a32:	681a      	ldr	r2, [r3, #0]
   d5a34:	07d1      	lsls	r1, r2, #31
   d5a36:	bf5c      	itt	pl
   d5a38:	2201      	movpl	r2, #1
   d5a3a:	601a      	strpl	r2, [r3, #0]
   d5a3c:	4b10      	ldr	r3, [pc, #64]	; (d5a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5a3e:	681a      	ldr	r2, [r3, #0]
   d5a40:	07d2      	lsls	r2, r2, #31
   d5a42:	bf5c      	itt	pl
   d5a44:	2201      	movpl	r2, #1
   d5a46:	601a      	strpl	r2, [r3, #0]
   d5a48:	4b0e      	ldr	r3, [pc, #56]	; (d5a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5a4a:	681a      	ldr	r2, [r3, #0]
   d5a4c:	07d0      	lsls	r0, r2, #31
   d5a4e:	bf5c      	itt	pl
   d5a50:	2201      	movpl	r2, #1
   d5a52:	601a      	strpl	r2, [r3, #0]
   d5a54:	4b0c      	ldr	r3, [pc, #48]	; (d5a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5a56:	681a      	ldr	r2, [r3, #0]
   d5a58:	07d1      	lsls	r1, r2, #31
   d5a5a:	bf5c      	itt	pl
   d5a5c:	2201      	movpl	r2, #1
   d5a5e:	601a      	strpl	r2, [r3, #0]
   d5a60:	4b0a      	ldr	r3, [pc, #40]	; (d5a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5a62:	681a      	ldr	r2, [r3, #0]
   d5a64:	07d2      	lsls	r2, r2, #31
   d5a66:	bf5c      	itt	pl
   d5a68:	2201      	movpl	r2, #1
   d5a6a:	601a      	strpl	r2, [r3, #0]
   d5a6c:	4770      	bx	lr
   d5a6e:	bf00      	nop
   d5a70:	2003e7ec 	.word	0x2003e7ec
   d5a74:	2003e7e8 	.word	0x2003e7e8
   d5a78:	2003e7e4 	.word	0x2003e7e4
   d5a7c:	2003e7e0 	.word	0x2003e7e0
   d5a80:	2003e7dc 	.word	0x2003e7dc
   d5a84:	2003e7d8 	.word	0x2003e7d8
   d5a88:	2003e7d4 	.word	0x2003e7d4
   d5a8c:	2003e7d0 	.word	0x2003e7d0

000d5a90 <__cxa_atexit>:
   d5a90:	b510      	push	{r4, lr}
   d5a92:	4c05      	ldr	r4, [pc, #20]	; (d5aa8 <__cxa_atexit+0x18>)
   d5a94:	4613      	mov	r3, r2
   d5a96:	b12c      	cbz	r4, d5aa4 <__cxa_atexit+0x14>
   d5a98:	460a      	mov	r2, r1
   d5a9a:	4601      	mov	r1, r0
   d5a9c:	2002      	movs	r0, #2
   d5a9e:	f3af 8000 	nop.w
   d5aa2:	bd10      	pop	{r4, pc}
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	bd10      	pop	{r4, pc}
   d5aa8:	00000000 	.word	0x00000000

000d5aac <memcpy>:
   d5aac:	b510      	push	{r4, lr}
   d5aae:	1e43      	subs	r3, r0, #1
   d5ab0:	440a      	add	r2, r1
   d5ab2:	4291      	cmp	r1, r2
   d5ab4:	d004      	beq.n	d5ac0 <memcpy+0x14>
   d5ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5aba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5abe:	e7f8      	b.n	d5ab2 <memcpy+0x6>
   d5ac0:	bd10      	pop	{r4, pc}

000d5ac2 <memset>:
   d5ac2:	4402      	add	r2, r0
   d5ac4:	4603      	mov	r3, r0
   d5ac6:	4293      	cmp	r3, r2
   d5ac8:	d002      	beq.n	d5ad0 <memset+0xe>
   d5aca:	f803 1b01 	strb.w	r1, [r3], #1
   d5ace:	e7fa      	b.n	d5ac6 <memset+0x4>
   d5ad0:	4770      	bx	lr
	...

000d5ad4 <srand>:
   d5ad4:	b538      	push	{r3, r4, r5, lr}
   d5ad6:	4b12      	ldr	r3, [pc, #72]	; (d5b20 <srand+0x4c>)
   d5ad8:	681c      	ldr	r4, [r3, #0]
   d5ada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5adc:	4605      	mov	r5, r0
   d5ade:	b9d3      	cbnz	r3, d5b16 <srand+0x42>
   d5ae0:	2018      	movs	r0, #24
   d5ae2:	f7ff f975 	bl	d4dd0 <malloc>
   d5ae6:	f243 330e 	movw	r3, #13070	; 0x330e
   d5aea:	63a0      	str	r0, [r4, #56]	; 0x38
   d5aec:	8003      	strh	r3, [r0, #0]
   d5aee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5af2:	8043      	strh	r3, [r0, #2]
   d5af4:	f241 2334 	movw	r3, #4660	; 0x1234
   d5af8:	8083      	strh	r3, [r0, #4]
   d5afa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5afe:	80c3      	strh	r3, [r0, #6]
   d5b00:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5b04:	8103      	strh	r3, [r0, #8]
   d5b06:	2305      	movs	r3, #5
   d5b08:	8143      	strh	r3, [r0, #10]
   d5b0a:	230b      	movs	r3, #11
   d5b0c:	8183      	strh	r3, [r0, #12]
   d5b0e:	2201      	movs	r2, #1
   d5b10:	2300      	movs	r3, #0
   d5b12:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5b18:	2200      	movs	r2, #0
   d5b1a:	611d      	str	r5, [r3, #16]
   d5b1c:	615a      	str	r2, [r3, #20]
   d5b1e:	bd38      	pop	{r3, r4, r5, pc}
   d5b20:	2003dd88 	.word	0x2003dd88

000d5b24 <strlen>:
   d5b24:	4603      	mov	r3, r0
   d5b26:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b2a:	2a00      	cmp	r2, #0
   d5b2c:	d1fb      	bne.n	d5b26 <strlen+0x2>
   d5b2e:	1a18      	subs	r0, r3, r0
   d5b30:	3801      	subs	r0, #1
   d5b32:	4770      	bx	lr

000d5b34 <dynalib_user>:
   d5b34:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5b44:	0000 0000 6144 2074 756e 626d 7265 2520     ....Dat number %
   d5b54:	0064 4242 4d56 5320 4154 5452 4445 3a20     d.BBVM STARTED :
   d5b64:	2044 4400 5645 4349 2045 5243 5341 4548     D .DEVICE CRASHE
   d5b74:	0044 7453 7261 0074 6552 6967 7473 7265     D.Start.Register
   d5b84:	6e69 2067 7566 636e 6974 6e6f 2073 6425     ing functions %d
   d5b94:	4600 7269 7473 6420 6e6f 2065 4900 494e     .First done .INI
   d5ba4:	2054 4f44 454e 4e00 412f 5600 3a4d 090a     T DONE.N/A.VM:..
   d5bb4:	7473 7461 3a65 2520 0a73 7009 3a63 2520     state: %s..pc: %
   d5bc4:	0a64 6909 736e 7274 203a 7325 090a 7265     d..instr: %s..er
   d5bd4:	6f72 2072 7473 7461 3a65 2520 0a73 7400     ror state: %s..t
   d5be4:	7365 2074 2e34 2e34 0031 6574 7473 3420     est 4.4.1.test 4
   d5bf4:	342e 322e 7400 7365 2074 2e34 2e34 0033     .4.2.test 4.4.3.
   d5c04:	6574 7473 3420 342e 342e 7400 7365 2074     test 4.4.4.test 
   d5c14:	2e34 2e34 0035 6574 7473 3420 342e 362e     4.4.5.test 4.4.6
   d5c24:	7400 7365 2074 2e34 2e34 0037 6574 7473     .test 4.4.7.test
   d5c34:	3420 342e 382e 7400 7365 2074 2e34 2e34      4.4.8.test 4.4.
   d5c44:	0039 6554 7473 3420 312e 5400 7365 2074     9.Test 4.1.Test 
   d5c54:	2e34 0032 6554 7473 3420 332e 5400 7365     4.2.Test 4.3.Tes
   d5c64:	2074 2e34 0034 6554 7473 3020 5400 7365     t 4.4.Test 0.Tes
   d5c74:	2074 0031 6554 7473 3220 5400 7365 2074     t 1.Test 2.Test 
   d5c84:	0033 6554 7473 3420 5400 7365 2074 0035     3.Test 4.Test 5.
   d5c94:	4f4e 0050 5550 4853 494e 004c 5544 0050     NOP.PUSHNIL.DUP.
   d5ca4:	4f50 0050 4552 3054 5200 5445 0031 4441     POP.RET0.RET1.AD
   d5cb4:	0044 5553 0042 554d 004c 4944 0056 4f4d     D.SUB.MUL.DIV.MO
   d5cc4:	0044 4f50 0057 4e55 004d 4e41 0044 4f4e     D.POW.UNM.AND.NO
   d5cd4:	0054 454e 0051 5447 4700 4554 4c00 0054     T.NEQ.GT.GTE.LT.
   d5ce4:	544c 0045 4c47 414f 0044 5347 4f54 4552     LTE.GLOAD.GSTORE
   d5cf4:	5000 5355 5448 5400 5550 0054 4754 5445     .PUSHT.TPUT.TGET
   d5d04:	4300 4c41 434c 4300 4c41 534c 5000 5355     .CALLC.CALLS.PUS
   d5d14:	4648 5000 5355 4948 5000 5355 5348 5000     HF.PUSHI.PUSHS.P
   d5d24:	5355 4348 004e 5550 4853 4343 5000 5355     USHCN.PUSHCC.PUS
   d5d34:	4c48 4c00 4f4c 4441 4c00 5453 524f 0045     HL.LLOAD.LSTORE.
   d5d44:	554a 504d 4a00 4d55 5a50 4a00 4d55 4e50     JUMP.JUMPZ.JUMPN
   d5d54:	005a 4242 565a 5f4d 5245 4f52 5f52 4f4e     Z.BBZVM_ERROR_NO
   d5d64:	454e 4200 5a42 4d56 455f 5252 524f 495f     NE.BBZVM_ERROR_I
   d5d74:	534e 5254 4200 5a42 4d56 455f 5252 524f     NSTR.BBZVM_ERROR
   d5d84:	535f 4154 4b43 4200 5a42 4d56 455f 5252     _STACK.BBZVM_ERR
   d5d94:	524f 4c5f 554e 004d 4242 565a 5f4d 5245     OR_LNUM.BBZVM_ER
   d5da4:	4f52 5f52 4350 4200 5a42 4d56 455f 5252     ROR_PC.BBZVM_ERR
   d5db4:	524f 465f 494c 5453 4200 5a42 4d56 455f     OR_FLIST.BBZVM_E
   d5dc4:	5252 524f 545f 5059 0045 4242 565a 5f4d     RROR_TYPE.BBZVM_
   d5dd4:	5245 4f52 5f52 554f 4f54 5246 4e41 4547     ERROR_OUTOFRANGE
   d5de4:	4200 5a42 4d56 455f 5252 524f 4e5f 544f     .BBZVM_ERROR_NOT
   d5df4:	4d49 4c50 4200 5a42 4d56 455f 5252 524f     IMPL.BBZVM_ERROR
   d5e04:	525f 5445 4200 5a42 4d56 455f 5252 524f     _RET.BBZVM_ERROR
   d5e14:	535f 5254 4e49 0047 4242 565a 5f4d 5245     _STRING.BBZVM_ER
   d5e24:	4f52 5f52 5753 5241 004d 4242 565a 5f4d     ROR_SWARM.BBZVM_
   d5e34:	5245 4f52 5f52 5356 4954 0047 4242 565a     ERROR_VSTIG.BBZV
   d5e44:	5f4d 5245 4f52 5f52 454d 004d 4242 565a     M_ERROR_MEM.BBZV
   d5e54:	5f4d 5245 4f52 5f52 414d 4854 4200 5a42     M_ERROR_MATH.BBZ
   d5e64:	4d56 535f 4154 4554 4e5f 434f 444f 0045     VM_STATE_NOCODE.
   d5e74:	4242 565a 5f4d 5453 5441 5f45 4552 4441     BBZVM_STATE_READ
   d5e84:	0059 4242 565a 5f4d 5453 5441 5f45 5453     Y.BBZVM_STATE_ST
   d5e94:	504f 4550 0044 4242 565a 5f4d 5453 5441     OPPED.BBZVM_STAT
   d5ea4:	5f45 4f44 454e 4200 5a42 4d56 535f 4154     E_DONE.BBZVM_STA
   d5eb4:	4554 455f 5252 524f 4200 5a42 4d56 535f     TE_ERROR.BBZVM_S
   d5ec4:	4154 4554 435f 554f 544e 0000               TATE_COUNT..

000d5ed0 <_ZTVN5spark12NetworkClassE>:
	...
   d5ed8:	4e01 000d 4e0b 000d 4e15 000d 4e1f 000d     .N...N...N...N..
   d5ee8:	4e29 000d 4e35 000d 4e41 000d 4e4d 000d     )N..5N..AN..MN..
   d5ef8:	4e55 000d 4e5f 000d 4e69 000d               UN.._N..iN..

000d5f04 <_ZTVN5spark9WiFiClassE>:
	...
   d5f0c:	4fa7 000d 4f9d 000d 4f93 000d 4f49 000d     .O...O...O..IO..
   d5f1c:	4f87 000d 4f7b 000d 4f6f 000d 4f67 000d     .O..{O..oO..gO..
   d5f2c:	4f5d 000d 4f53 000d 4e69 000d               ]O..SO..iN..

000d5f38 <_ZTVN5spark9MeshClassE>:
	...
   d5f40:	5023 000d 5019 000d 500f 000d 5005 000d     #P...P...P...P..
   d5f50:	4ff9 000d 4fed 000d 4fe1 000d 4fd9 000d     .O...O...O...O..
   d5f60:	4fcf 000d 4fc5 000d 4e69 000d               .O...O..iN..

000d5f6c <_ZTV11USARTSerial>:
	...
   d5f74:	5141 000d 5191 000d 519f 000d 55a9 000d     AQ...Q...Q...U..
   d5f84:	5155 000d 5177 000d 5163 000d 518b 000d     UQ..wQ..cQ...Q..
   d5f94:	5143 000d 5147 000d                         CQ..GQ..

000d5f9c <_ZTV9USBSerial>:
	...
   d5fa4:	5253 000d 52a3 000d 52b1 000d 55a9 000d     SR...R...R...U..
   d5fb4:	528f 000d 5255 000d 526b 000d 529d 000d     .R..UR..kR...R..
   d5fc4:	5281 000d 524f 000d                         .R..OR..

000d5fcc <_ZTV9IPAddress>:
	...
   d5fd4:	5371 000d 5361 000d 5363 000d 2b25 3330     qS..aS..cS..%+03
   d5fe4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d5ff4:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d6004:	656d 6200 7561 0064 6553 6972 6c61 5300     me.baud.Serial.S
   d6014:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
   d6024:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
   d6034:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
   d6044:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
   d6054:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
   d6064:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
   d6074:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
   d6084:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
   d6094:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d60a4:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d60b4:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d60c4:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d60d4:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d60e4:	0000 0000                                   ....

000d60e8 <_ZTVN5spark13EthernetClassE>:
	...
   d60f0:	57d3 000d 57c9 000d 57bf 000d 57b5 000d     .W...W...W...W..
   d6100:	57a9 000d 579d 000d 5791 000d 5789 000d     .W...W...W...W..
   d6110:	577f 000d 5775 000d 4e69 000d               .W..uW..iN..

000d611c <__sf_fake_stdin>:
	...

000d613c <__sf_fake_stdout>:
	...

000d615c <__sf_fake_stderr>:
	...

000d617c <link_const_variable_data_end>:
   d617c:	000d4765 	.word	0x000d4765
   d6180:	000d4769 	.word	0x000d4769
   d6184:	000d478d 	.word	0x000d478d
   d6188:	000d4b35 	.word	0x000d4b35
   d618c:	000d4f35 	.word	0x000d4f35
   d6190:	000d4fb1 	.word	0x000d4fb1
   d6194:	000d50f1 	.word	0x000d50f1
   d6198:	000d5561 	.word	0x000d5561
   d619c:	000d5585 	.word	0x000d5585
   d61a0:	000d5599 	.word	0x000d5599
   d61a4:	000d56d9 	.word	0x000d56d9
   d61a8:	000d5741 	.word	0x000d5741
   d61ac:	000d57dd 	.word	0x000d57dd
   d61b0:	000d5801 	.word	0x000d5801
   d61b4:	000d5885 	.word	0x000d5885
   d61b8:	000d5949 	.word	0x000d5949
   d61bc:	000d5a0d 	.word	0x000d5a0d
