
/home/xavier/Documents/UniSherbrooke/FinDeBack/Buzz_particle_argon/Argon-BittyBuzz/target/1.5.2/argon/Argon-BittyBuzz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053e4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9400  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000168  2003dc10  000d9404  0001dc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a78  2003dd78  2003dd78  0002dd78  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d956c  000d956c  0002956c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9594  000d9594  00029594  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d293c  00000000  00000000  00029598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011760  00000000  00000000  000fbed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002470  00000000  00000000  0010d634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003547e  00000000  00000000  0010faa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002cc6d  00000000  00000000  00144f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010264c  00000000  00000000  00171b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001cc9c  00000000  00000000  002741db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004348  00000000  00000000  00290e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cb4c  00000000  00000000  002951c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fd7b 	bl	d8b28 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fd80 	bl	d8b3e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc10 	.word	0x2003dc10
   d4048:	000d9404 	.word	0x000d9404
   d404c:	2003dd78 	.word	0x2003dd78
   d4050:	2003dd78 	.word	0x2003dd78
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fed7 	bl	d7e0c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d93fc 	.word	0x000d93fc
   d4080:	000d93b0 	.word	0x000d93b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b818 	b.w	d40b8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f821 	bl	d40d0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 be7d 	b.w	d7d90 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f003 bb2b 	b.w	d76f0 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f003 bb29 	b.w	d76f0 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40ae:	460a      	mov	r2, r1
   d40b0:	2101      	movs	r1, #1
   d40b2:	f003 bf52 	b.w	d7f5a <_ZN5Print11printf_implEbPKcz>
	...

000d40b8 <setup>:

    bbzvm_ret0();
}

// setup() runs once, when the device is first turned on.
void setup() {
   d40b8:	b508      	push	{r3, lr}

    Serial.printlnf("Start");
   d40ba:	f003 fdb3 	bl	d7c24 <_Z16_fetch_usbserialv>
   d40be:	4903      	ldr	r1, [pc, #12]	; (d40cc <setup+0x14>)
   d40c0:	f7ff fff5 	bl	d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>

    bbz_particle_init();

}
   d40c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// setup() runs once, when the device is first turned on.
void setup() {

    Serial.printlnf("Start");

    bbz_particle_init();
   d40c8:	f000 b852 	b.w	d4170 <_Z17bbz_particle_initv>
   d40cc:	000d8bd2 	.word	0x000d8bd2

000d40d0 <loop>:
    Serial.printlnf("INIT DONE");

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40d0:	b508      	push	{r3, lr}

    bbz_particle_start(NULL);
   d40d2:	2000      	movs	r0, #0
   d40d4:	f000 f866 	bl	d41a4 <_Z18bbz_particle_startPFvvE>
    Serial.printlnf("DEVICE CRASHED");
   d40d8:	f003 fda4 	bl	d7c24 <_Z16_fetch_usbserialv>
   d40dc:	4901      	ldr	r1, [pc, #4]	; (d40e4 <loop+0x14>)
   d40de:	f7ff ffe6 	bl	d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>
   d40e2:	bd08      	pop	{r3, pc}
   d40e4:	000d8c15 	.word	0x000d8c15

000d40e8 <_GLOBAL__sub_I__Z16bzz_print_numberv>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40e8:	f003 ba6e 	b.w	d75c8 <HAL_Pin_Map>

000d40ec <_GLOBAL__sub_I__Z15bbzmessage_sendPK9message_t>:
   d40ec:	f003 ba6c 	b.w	d75c8 <HAL_Pin_Map>

000d40f0 <_Z20bbzkilo_bcodeFetcherth>:
bbzmsg_payload_t bbz_payload_buf;

uint8_t buf[4];
const uint8_t* bbzkilo_bcodeFetcher(bbzpc_t offset, uint8_t size) {
    for (bbzpc_t i=0; i<size; i++){
        buf[i] = bcode[i+offset];
   d40f0:	4a06      	ldr	r2, [pc, #24]	; (d410c <_Z20bbzkilo_bcodeFetcherth+0x1c>)
bbzvm_t bbz_vm_obj;
uint8_t bbzmsg_buf[11];
bbzmsg_payload_t bbz_payload_buf;

uint8_t buf[4];
const uint8_t* bbzkilo_bcodeFetcher(bbzpc_t offset, uint8_t size) {
   d40f2:	b510      	push	{r4, lr}
    for (bbzpc_t i=0; i<size; i++){
        buf[i] = bcode[i+offset];
   d40f4:	4c06      	ldr	r4, [pc, #24]	; (d4110 <_Z20bbzkilo_bcodeFetcherth+0x20>)
bbzvm_t bbz_vm_obj;
uint8_t bbzmsg_buf[11];
bbzmsg_payload_t bbz_payload_buf;

uint8_t buf[4];
const uint8_t* bbzkilo_bcodeFetcher(bbzpc_t offset, uint8_t size) {
   d40f6:	2300      	movs	r3, #0
    for (bbzpc_t i=0; i<size; i++){
        buf[i] = bcode[i+offset];
   d40f8:	4410      	add	r0, r2
uint8_t bbzmsg_buf[11];
bbzmsg_payload_t bbz_payload_buf;

uint8_t buf[4];
const uint8_t* bbzkilo_bcodeFetcher(bbzpc_t offset, uint8_t size) {
    for (bbzpc_t i=0; i<size; i++){
   d40fa:	b29a      	uxth	r2, r3
   d40fc:	4291      	cmp	r1, r2
   d40fe:	d903      	bls.n	d4108 <_Z20bbzkilo_bcodeFetcherth+0x18>
        buf[i] = bcode[i+offset];
   d4100:	5cc2      	ldrb	r2, [r0, r3]
   d4102:	551a      	strb	r2, [r3, r4]
   d4104:	3301      	adds	r3, #1
uint8_t bbzmsg_buf[11];
bbzmsg_payload_t bbz_payload_buf;

uint8_t buf[4];
const uint8_t* bbzkilo_bcodeFetcher(bbzpc_t offset, uint8_t size) {
    for (bbzpc_t i=0; i<size; i++){
   d4106:	e7f8      	b.n	d40fa <_Z20bbzkilo_bcodeFetcherth+0xa>
        buf[i] = bcode[i+offset];
    }
    return buf;
}
   d4108:	4801      	ldr	r0, [pc, #4]	; (d4110 <_Z20bbzkilo_bcodeFetcherth+0x20>)
   d410a:	bd10      	pop	{r4, pc}
   d410c:	000d8c2e 	.word	0x000d8c2e
   d4110:	2003e3e6 	.word	0x2003e3e6

000d4114 <_Z20bbzkilo_err_receiver11bbzvm_error>:

void bbz_particle_delay(uint16_t ms){
    delay(ms);
}

void bbzkilo_err_receiver(bbzvm_error errcode){
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
    Serial.printlnf("ERROR %d ", errcode);
   d4118:	f003 fd84 	bl	d7c24 <_Z16_fetch_usbserialv>
   d411c:	4623      	mov	r3, r4
   d411e:	4a03      	ldr	r2, [pc, #12]	; (d412c <_Z20bbzkilo_err_receiver11bbzvm_error+0x18>)
   d4120:	2101      	movs	r1, #1
}
   d4122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4126:	f003 bf18 	b.w	d7f5a <_ZN5Print11printf_implEbPKcz>
   d412a:	bf00      	nop
   d412c:	000d8c24 	.word	0x000d8c24

000d4130 <_Z17bbzkilo_func_callt>:
        buf[i] = bcode[i+offset];
    }
    return buf;
}

void bbzkilo_func_call(uint16_t strid) {
   d4130:	b513      	push	{r0, r1, r4, lr}
    bbzvm_pushs(strid);
   d4132:	f000 fd24 	bl	d4b7e <bbzvm_pushs>
    bbzheap_idx_t l = bbzvm_stack_at(0);
   d4136:	2000      	movs	r0, #0
   d4138:	f000 f9b6 	bl	d44a8 <bbzvm_stack_at>
   d413c:	ac02      	add	r4, sp, #8
   d413e:	f824 0d02 	strh.w	r0, [r4, #-2]!
    bbzvm_pop();
   d4142:	f000 f9bf 	bl	d44c4 <bbzvm_pop>
    if(bbztable_get(bbz_vm_obj.gsyms, l, &l)) {
   d4146:	4b09      	ldr	r3, [pc, #36]	; (d416c <_Z17bbzkilo_func_callt+0x3c>)
   d4148:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d414c:	89d8      	ldrh	r0, [r3, #14]
   d414e:	4622      	mov	r2, r4
   d4150:	f002 fb00 	bl	d6754 <bbztable_get>
   d4154:	b140      	cbz	r0, d4168 <_Z17bbzkilo_func_callt+0x38>
        bbzvm_pushnil(); // Push self table
   d4156:	f000 fab9 	bl	d46cc <bbzvm_pushnil>
        bbzvm_push(l);
   d415a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d415e:	f000 fa41 	bl	d45e4 <bbzvm_push>
        bbzvm_closure_call(0);
   d4162:	2000      	movs	r0, #0
   d4164:	f001 f950 	bl	d5408 <bbzvm_closure_call>
    }
}
   d4168:	b002      	add	sp, #8
   d416a:	bd10      	pop	{r4, pc}
   d416c:	2003dd87 	.word	0x2003dd87

000d4170 <_Z17bbz_particle_initv>:

void bbzkilo_err_receiver(bbzvm_error errcode){
    Serial.printlnf("ERROR %d ", errcode);
}

void bbz_particle_init(){
   d4170:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d4172:	f003 fd57 	bl	d7c24 <_Z16_fetch_usbserialv>
   d4176:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d417a:	f003 fd47 	bl	d7c0c <_ZN9USBSerial5beginEl>
    vm = &bbz_vm_obj;
   d417e:	4b05      	ldr	r3, [pc, #20]	; (d4194 <_Z17bbz_particle_initv+0x24>)
   d4180:	4a05      	ldr	r2, [pc, #20]	; (d4198 <_Z17bbz_particle_initv+0x28>)
   d4182:	601a      	str	r2, [r3, #0]
    // Allocation for the BBVM
    bbzringbuf_construct(&bbz_payload_buf, bbzmsg_buf, 1, 11);
   d4184:	4905      	ldr	r1, [pc, #20]	; (d419c <_Z17bbz_particle_initv+0x2c>)
   d4186:	4806      	ldr	r0, [pc, #24]	; (d41a0 <_Z17bbz_particle_initv+0x30>)
   d4188:	230b      	movs	r3, #11
   d418a:	2201      	movs	r2, #1

}
   d418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void bbz_particle_init(){
    Serial.begin(9600);
    vm = &bbz_vm_obj;
    // Allocation for the BBVM
    bbzringbuf_construct(&bbz_payload_buf, bbzmsg_buf, 1, 11);
   d4190:	f002 bc48 	b.w	d6a24 <bbzringbuf_construct>
   d4194:	2003e3f4 	.word	0x2003e3f4
   d4198:	2003dd87 	.word	0x2003dd87
   d419c:	2003dd7c 	.word	0x2003dd7c
   d41a0:	2003e3ea 	.word	0x2003e3ea

000d41a4 <_Z18bbz_particle_startPFvvE>:

}

void bbz_particle_start(void (*setup)(void)){
   d41a4:	b538      	push	{r3, r4, r5, lr}
   d41a6:	4605      	mov	r5, r0
     * @brief Sets the error receiver.
     * @see bbzvm_error_receiver_fun
     * @param[in] error_receiver_fun Function recieving the error notification.
     */
    ALWAYS_INLINE
    void bbzvm_set_error_receiver(bbzvm_error_receiver_fun error_receiver_fun) { vm->error_receiver_fun = error_receiver_fun; }
   d41a8:	4c11      	ldr	r4, [pc, #68]	; (d41f0 <_Z18bbz_particle_startPFvvE+0x4c>)
    bbzvm_construct(1);
   d41aa:	2001      	movs	r0, #1
   d41ac:	f001 f97c 	bl	d54a8 <bbzvm_construct>
    bbzvm_set_bcode(bbzkilo_bcodeFetcher, pgm_read_word((uint16_t*)&bcode_size));
   d41b0:	212e      	movs	r1, #46	; 0x2e
   d41b2:	4810      	ldr	r0, [pc, #64]	; (d41f4 <_Z18bbz_particle_startPFvvE+0x50>)
   d41b4:	f001 f904 	bl	d53c0 <bbzvm_set_bcode>
   d41b8:	6823      	ldr	r3, [r4, #0]
   d41ba:	4a0f      	ldr	r2, [pc, #60]	; (d41f8 <_Z18bbz_particle_startPFvvE+0x54>)
   d41bc:	601a      	str	r2, [r3, #0]
    bbzvm_set_error_receiver(bbzkilo_err_receiver);
    setup();
   d41be:	47a8      	blx	r5

    vm->state = BBZVM_STATE_READY;
   d41c0:	6823      	ldr	r3, [r4, #0]
   d41c2:	2201      	movs	r2, #1
   d41c4:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
    bbzkilo_func_call(__BBZSTRID_init);
   d41c8:	2004      	movs	r0, #4
   d41ca:	f7ff ffb1 	bl	d4130 <_Z17bbzkilo_func_callt>

    bbzvm_step();
   d41ce:	f000 ff83 	bl	d50d8 <bbzvm_step>
    while(vm->state != BBZVM_STATE_ERROR){
   d41d2:	6823      	ldr	r3, [r4, #0]
   d41d4:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d41d8:	2b04      	cmp	r3, #4
   d41da:	d007      	beq.n	d41ec <_Z18bbz_particle_startPFvvE+0x48>
        if (vm->state != BBZVM_STATE_ERROR) {
            bbzvm_process_inmsgs();
   d41dc:	f000 f8c6 	bl	d436c <bbzvm_process_inmsgs>
            bbzkilo_func_call(__BBZSTRID_step);
   d41e0:	2005      	movs	r0, #5
   d41e2:	f7ff ffa5 	bl	d4130 <_Z17bbzkilo_func_callt>
            bbzvm_process_outmsgs();
   d41e6:	f000 f885 	bl	d42f4 <bbzvm_process_outmsgs>
   d41ea:	e7f2      	b.n	d41d2 <_Z18bbz_particle_startPFvvE+0x2e>
   d41ec:	bd38      	pop	{r3, r4, r5, pc}
   d41ee:	bf00      	nop
   d41f0:	2003e3f4 	.word	0x2003e3f4
   d41f4:	000d40f1 	.word	0x000d40f1
   d41f8:	000d4115 	.word	0x000d4115

000d41fc <_GLOBAL__sub_I_bbz_vm_obj>:
   d41fc:	f003 b9e4 	b.w	d75c8 <HAL_Pin_Map>

000d4200 <_Z9Log_WriteiPKcz>:
#include "log.h"
#include <stdarg.h>

int Log_Write(int priority, const char *format, ...){
   d4200:	b40e      	push	{r1, r2, r3}
    if (BSP_LOG_PRIORITY <= priority){
   d4202:	2800      	cmp	r0, #0
#include "log.h"
#include <stdarg.h>

int Log_Write(int priority, const char *format, ...){
   d4204:	b503      	push	{r0, r1, lr}
    if (BSP_LOG_PRIORITY <= priority){
   d4206:	dd0a      	ble.n	d421e <_Z9Log_WriteiPKcz+0x1e>
        va_list args;
        va_start(args, format);
   d4208:	ab04      	add	r3, sp, #16
   d420a:	9301      	str	r3, [sp, #4]

        Serial.printlnf(format, args);
   d420c:	f003 fd0a 	bl	d7c24 <_Z16_fetch_usbserialv>
   d4210:	9b01      	ldr	r3, [sp, #4]
   d4212:	9a03      	ldr	r2, [sp, #12]
   d4214:	2101      	movs	r1, #1
   d4216:	f003 fea0 	bl	d7f5a <_ZN5Print11printf_implEbPKcz>
        
        va_end(args);

        return 0;
   d421a:	2000      	movs	r0, #0
   d421c:	e000      	b.n	d4220 <_Z9Log_WriteiPKcz+0x20>
    }

    return 1;
   d421e:	2001      	movs	r0, #1
}
   d4220:	b002      	add	sp, #8
   d4222:	f85d eb04 	ldr.w	lr, [sp], #4
   d4226:	b003      	add	sp, #12
   d4228:	4770      	bx	lr

000d422a <_GLOBAL__sub_I__Z9Log_WriteiPKcz>:
   d422a:	f003 b9cd 	b.w	d75c8 <HAL_Pin_Map>
	...

000d4230 <_ZL19dftl_error_receiver11bbzvm_error>:
                       "TGET", "CALLC", "CALLS", "PUSHF", "PUSHI", "PUSHS", "PUSHCN", "PUSHCC", "PUSHL", "LLOAD", "LSTORE",
                       "JUMP", "JUMPZ", "JUMPNZ", "COUNT"};
#endif // DEBUG_VM && !BBZ_XTREME_MEMORY

#pragma GCC diagnostic ignored "-Wunused-parameter"
ALWAYS_INLINE void dftl_error_receiver(bbzvm_error errcode) {
   d4230:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4232:	b085      	sub	sp, #20
   d4234:	4607      	mov	r7, r0
#ifdef DEBUG_VM
    bbzheap_print();
   d4236:	f002 f8dd 	bl	d63f4 <bbzheap_print>
#ifndef BBZ_XTREME_MEMORY
    Log_Write(LOG_LEVEL_INFO, "VM:\n\tstate: %d %s\n\tpc: %d\n\tinstr: %s\n\terror state: %s\n", vm->state, _state_desc[vm->state], vm->dbg_pc,
   d423a:	4b11      	ldr	r3, [pc, #68]	; (d4280 <_ZL19dftl_error_receiver11bbzvm_error+0x50>)
   d423c:	6819      	ldr	r1, [r3, #0]
   d423e:	4b11      	ldr	r3, [pc, #68]	; (d4284 <_ZL19dftl_error_receiver11bbzvm_error+0x54>)
   d4240:	f891 4594 	ldrb.w	r4, [r1, #1428]	; 0x594
           vm->bcode_fetch_fun ? _instr_desc[*vm->bcode_fetch_fun(vm->dbg_pc, 1)] : "N/A", _error_desc[errcode]);
   d4244:	684a      	ldr	r2, [r1, #4]
#pragma GCC diagnostic ignored "-Wunused-parameter"
ALWAYS_INLINE void dftl_error_receiver(bbzvm_error errcode) {
#ifdef DEBUG_VM
    bbzheap_print();
#ifndef BBZ_XTREME_MEMORY
    Log_Write(LOG_LEVEL_INFO, "VM:\n\tstate: %d %s\n\tpc: %d\n\tinstr: %s\n\terror state: %s\n", vm->state, _state_desc[vm->state], vm->dbg_pc,
   d4246:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
   d424a:	f8b1 5598 	ldrh.w	r5, [r1, #1432]	; 0x598
   d424e:	b13a      	cbz	r2, d4260 <_ZL19dftl_error_receiver11bbzvm_error+0x30>
           vm->bcode_fetch_fun ? _instr_desc[*vm->bcode_fetch_fun(vm->dbg_pc, 1)] : "N/A", _error_desc[errcode]);
   d4250:	2101      	movs	r1, #1
   d4252:	4628      	mov	r0, r5
   d4254:	4790      	blx	r2
#pragma GCC diagnostic ignored "-Wunused-parameter"
ALWAYS_INLINE void dftl_error_receiver(bbzvm_error errcode) {
#ifdef DEBUG_VM
    bbzheap_print();
#ifndef BBZ_XTREME_MEMORY
    Log_Write(LOG_LEVEL_INFO, "VM:\n\tstate: %d %s\n\tpc: %d\n\tinstr: %s\n\terror state: %s\n", vm->state, _state_desc[vm->state], vm->dbg_pc,
   d4256:	4b0c      	ldr	r3, [pc, #48]	; (d4288 <_ZL19dftl_error_receiver11bbzvm_error+0x58>)
   d4258:	7802      	ldrb	r2, [r0, #0]
   d425a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   d425e:	e000      	b.n	d4262 <_ZL19dftl_error_receiver11bbzvm_error+0x32>
   d4260:	4a0a      	ldr	r2, [pc, #40]	; (d428c <_ZL19dftl_error_receiver11bbzvm_error+0x5c>)
   d4262:	4b0b      	ldr	r3, [pc, #44]	; (d4290 <_ZL19dftl_error_receiver11bbzvm_error+0x60>)
           vm->bcode_fetch_fun ? _instr_desc[*vm->bcode_fetch_fun(vm->dbg_pc, 1)] : "N/A", _error_desc[errcode]);
   d4264:	490b      	ldr	r1, [pc, #44]	; (d4294 <_ZL19dftl_error_receiver11bbzvm_error+0x64>)
   d4266:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   d426a:	9302      	str	r3, [sp, #8]
   d426c:	9201      	str	r2, [sp, #4]
   d426e:	9500      	str	r5, [sp, #0]
   d4270:	4633      	mov	r3, r6
   d4272:	4622      	mov	r2, r4
   d4274:	2002      	movs	r0, #2
   d4276:	f7ff ffc3 	bl	d4200 <_Z9Log_WriteiPKcz>
#endif // !BBZ_XTREME_MEMORY
#endif // DEBUG_VM
}
   d427a:	b005      	add	sp, #20
   d427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d427e:	bf00      	nop
   d4280:	2003e3f4 	.word	0x2003e3f4
   d4284:	2003dcb8 	.word	0x2003dcb8
   d4288:	2003dc10 	.word	0x2003dc10
   d428c:	000d8c5c 	.word	0x000d8c5c
   d4290:	2003dcd0 	.word	0x2003dcd0
   d4294:	000d8c60 	.word	0x000d8c60

000d4298 <_ZL3addss>:
//    uint8_t ok = (uint8_t) (!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs));
    bbzvm_assert_exec(!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs), BBZVM_ERROR_TYPE);
    bbzvm_pushi((*op)(lhs->i.value, rhs->i.value));
}

static int16_t add(int16_t lhs, int16_t rhs) { return lhs + rhs; }
   d4298:	4408      	add	r0, r1
   d429a:	b200      	sxth	r0, r0
   d429c:	4770      	bx	lr

000d429e <_ZL3subss>:
static int16_t sub(int16_t lhs, int16_t rhs) { return lhs - rhs; }
   d429e:	1a40      	subs	r0, r0, r1
   d42a0:	b200      	sxth	r0, r0
   d42a2:	4770      	bx	lr

000d42a4 <_ZL3mulss>:
static int16_t mul(int16_t lhs, int16_t rhs) { return lhs * rhs; }
   d42a4:	4348      	muls	r0, r1
   d42a6:	b200      	sxth	r0, r0
   d42a8:	4770      	bx	lr

000d42aa <_ZL3divss>:
static int16_t div(int16_t lhs, int16_t rhs) { return lhs / rhs; }
   d42aa:	fb90 f0f1 	sdiv	r0, r0, r1
   d42ae:	b200      	sxth	r0, r0
   d42b0:	4770      	bx	lr

000d42b2 <_ZL3modss>:
static int16_t mod(int16_t lhs, int16_t rhs) { return lhs % rhs; }
   d42b2:	fb90 f3f1 	sdiv	r3, r0, r1
   d42b6:	fb03 0011 	mls	r0, r3, r1, r0
   d42ba:	b200      	sxth	r0, r0
   d42bc:	4770      	bx	lr

000d42be <_ZL6bbzandhh>:
            rhs_bool = bbztype_tobool(rhs);

    bbzvm_pushi((*op)(lhs_bool, rhs_bool));
}

static uint8_t bbzand(uint8_t lhs, uint8_t rhs) { return lhs & rhs; }
   d42be:	4008      	ands	r0, r1
   d42c0:	4770      	bx	lr

000d42c2 <_ZL5bbzorhh>:
static uint8_t bbzor (uint8_t lhs, uint8_t rhs) { return lhs | rhs; }
   d42c2:	4308      	orrs	r0, r1
   d42c4:	4770      	bx	lr

000d42c6 <_ZL5bbzeqa>:
    bbzvm_pop();

    bbzvm_pushi((*op)(bbztype_cmp(lhs, rhs)));
}

static uint8_t bbzeq (int8_t cmp) { return (uint8_t) (cmp == 0); }
   d42c6:	fab0 f080 	clz	r0, r0
   d42ca:	0940      	lsrs	r0, r0, #5
   d42cc:	4770      	bx	lr

000d42ce <_ZL6bbzneqa>:
static uint8_t bbzneq(int8_t cmp) { return (uint8_t) (cmp != 0); }
   d42ce:	3000      	adds	r0, #0
   d42d0:	bf18      	it	ne
   d42d2:	2001      	movne	r0, #1
   d42d4:	4770      	bx	lr

000d42d6 <_ZL5bbzgta>:
static uint8_t bbzgt (int8_t cmp) { return (uint8_t) (cmp >  0); }
   d42d6:	2800      	cmp	r0, #0
   d42d8:	bfd4      	ite	le
   d42da:	2000      	movle	r0, #0
   d42dc:	2001      	movgt	r0, #1
   d42de:	4770      	bx	lr

000d42e0 <_ZL6bbzgtea>:
static uint8_t bbzgte(int8_t cmp) { return (uint8_t) (cmp >= 0); }
   d42e0:	43c0      	mvns	r0, r0
   d42e2:	0fc0      	lsrs	r0, r0, #31
   d42e4:	4770      	bx	lr

000d42e6 <_ZL5bbzlta>:
static uint8_t bbzlt (int8_t cmp) { return (uint8_t) (cmp <  0); }
   d42e6:	0fc0      	lsrs	r0, r0, #31
   d42e8:	4770      	bx	lr

000d42ea <_ZL6bbzltea>:
static uint8_t bbzlte(int8_t cmp) { return (uint8_t) (cmp <= 0); }
   d42ea:	2800      	cmp	r0, #0
   d42ec:	bfcc      	ite	gt
   d42ee:	2000      	movgt	r0, #0
   d42f0:	2001      	movle	r0, #1
   d42f2:	4770      	bx	lr

000d42f4 <bbzvm_process_outmsgs>:
}

/****************************************/
/****************************************/

void bbzvm_process_outmsgs() {
   d42f4:	4770      	bx	lr
	...

000d42f8 <bbzvm_seterror>:
/****************************************/
/****************************************/

void bbzvm_seterror(bbzvm_error errcode) {
    // Set the error
    vm->state = BBZVM_STATE_ERROR;
   d42f8:	4b04      	ldr	r3, [pc, #16]	; (d430c <bbzvm_seterror+0x14>)
   d42fa:	681b      	ldr	r3, [r3, #0]
   d42fc:	2204      	movs	r2, #4
   d42fe:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
    vm->error = errcode;
   d4302:	f883 0595 	strb.w	r0, [r3, #1429]	; 0x595
    // Call the error receiver function.
    (*vm->error_receiver_fun)(errcode);
   d4306:	681b      	ldr	r3, [r3, #0]
   d4308:	4718      	bx	r3
   d430a:	bf00      	nop
   d430c:	2003e3f4 	.word	0x2003e3f4

000d4310 <_ZL6bbzpowss>:
static int16_t mul(int16_t lhs, int16_t rhs) { return lhs * rhs; }
static int16_t div(int16_t lhs, int16_t rhs) { return lhs / rhs; }
static int16_t mod(int16_t lhs, int16_t rhs) { return lhs % rhs; }
static int16_t bbzpow(int16_t lhs, int16_t rhs) {
    int16_t ret;
    if (rhs >= 0) {
   d4310:	2900      	cmp	r1, #0
static int16_t add(int16_t lhs, int16_t rhs) { return lhs + rhs; }
static int16_t sub(int16_t lhs, int16_t rhs) { return lhs - rhs; }
static int16_t mul(int16_t lhs, int16_t rhs) { return lhs * rhs; }
static int16_t div(int16_t lhs, int16_t rhs) { return lhs / rhs; }
static int16_t mod(int16_t lhs, int16_t rhs) { return lhs % rhs; }
static int16_t bbzpow(int16_t lhs, int16_t rhs) {
   d4312:	b508      	push	{r3, lr}
    int16_t ret;
    if (rhs >= 0) {
   d4314:	db08      	blt.n	d4328 <_ZL6bbzpowss+0x18>
   d4316:	2301      	movs	r3, #1
   d4318:	3901      	subs	r1, #1
   d431a:	b209      	sxth	r1, r1
        int32_t res = 1;
        while (rhs--) {
   d431c:	1c4a      	adds	r2, r1, #1
   d431e:	d001      	beq.n	d4324 <_ZL6bbzpowss+0x14>
            res *= lhs;
   d4320:	4343      	muls	r3, r0
static int16_t mod(int16_t lhs, int16_t rhs) { return lhs % rhs; }
static int16_t bbzpow(int16_t lhs, int16_t rhs) {
    int16_t ret;
    if (rhs >= 0) {
        int32_t res = 1;
        while (rhs--) {
   d4322:	e7f9      	b.n	d4318 <_ZL6bbzpowss+0x8>
            res *= lhs;
        }
        ret = (int16_t)res;
   d4324:	b218      	sxth	r0, r3
   d4326:	bd08      	pop	{r3, pc}
    }
    else if (lhs == 1) {
   d4328:	2801      	cmp	r0, #1
   d432a:	d005      	beq.n	d4338 <_ZL6bbzpowss+0x28>
        ret = 1;
    }
    else if (lhs == -1) {
   d432c:	1c43      	adds	r3, r0, #1
   d432e:	d003      	beq.n	d4338 <_ZL6bbzpowss+0x28>
        ret = -1;
    }
    else {
        bbzvm_seterror(BBZVM_ERROR_MATH);
   d4330:	200e      	movs	r0, #14
   d4332:	f7ff ffe1 	bl	d42f8 <bbzvm_seterror>
        ret = 0;
   d4336:	2000      	movs	r0, #0
    }
    return ret;
}
   d4338:	bd08      	pop	{r3, pc}
	...

000d433c <bbzclosure_new.part.5>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzuserdata_new(void* val) {
   d433c:	b508      	push	{r3, lr}
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o, vm->nil);
   d433e:	200d      	movs	r0, #13
   d4340:	f7ff ffda 	bl	d42f8 <bbzvm_seterror>
   d4344:	4b02      	ldr	r3, [pc, #8]	; (d4350 <bbzclosure_new.part.5+0x14>)
   d4346:	681b      	ldr	r3, [r3, #0]
    bbzheap_obj_at(o)->u.value = (uintptr_t)val;
    return o;
}
   d4348:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
   d434c:	bd08      	pop	{r3, pc}
   d434e:	bf00      	nop
   d4350:	2003e3f4 	.word	0x2003e3f4

000d4354 <bbzvm_gc>:
#define inc_pc() assert_pc(vm->pc); ++vm->pc;

#define get_arg(TYPE) assert_pc(vm->pc + sizeof(TYPE)); TYPE arg = *((TYPE*)vm->bcode_fetch_fun(vm->pc, sizeof(TYPE))); vm->pc += sizeof(TYPE);

void bbzvm_gc() {
    bbzheap_gc(vm->stack, (uint16_t)bbzvm_stack_size());
   d4354:	4b04      	ldr	r3, [pc, #16]	; (d4368 <bbzvm_gc+0x14>)
   d4356:	6818      	ldr	r0, [r3, #0]
   d4358:	f9b0 159b 	ldrsh.w	r1, [r0, #1435]	; 0x59b
   d435c:	3101      	adds	r1, #1
   d435e:	b289      	uxth	r1, r1
   d4360:	f200 509f 	addw	r0, r0, #1439	; 0x59f
   d4364:	f001 bf84 	b.w	d6270 <bbzheap_gc>
   d4368:	2003e3f4 	.word	0x2003e3f4

000d436c <bbzvm_process_inmsgs>:
bbzvm_t* vm; // Global extern variable 'vm'.

/****************************************/
/****************************************/

void bbzvm_process_inmsgs() {
   d436c:	b570      	push	{r4, r5, r6, lr}
    bbzvm_assert_state();
   d436e:	4d15      	ldr	r5, [pc, #84]	; (d43c4 <bbzvm_process_inmsgs+0x58>)
   d4370:	682b      	ldr	r3, [r5, #0]
   d4372:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d4376:	2b04      	cmp	r3, #4
   d4378:	d022      	beq.n	d43c0 <bbzvm_process_inmsgs+0x54>
   d437a:	240b      	movs	r4, #11
    /* Go through the messages */
    uint8_t count = 0;
    while(!bbzinmsg_queue_isempty() && count++ < BBZMSG_IN_PROC_MAX) {
   d437c:	462e      	mov	r6, r5
   d437e:	6828      	ldr	r0, [r5, #0]
   d4380:	f200 4063 	addw	r0, r0, #1123	; 0x463
   d4384:	f002 fb78 	bl	d6a78 <bbzringbuf_empty>
   d4388:	b9d0      	cbnz	r0, d43c0 <bbzvm_process_inmsgs+0x54>
   d438a:	3c01      	subs	r4, #1
   d438c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4390:	d100      	bne.n	d4394 <bbzvm_process_inmsgs+0x28>
   d4392:	bd70      	pop	{r4, r5, r6, pc}
        bbzvm_gc();
   d4394:	f7ff ffde 	bl	d4354 <bbzvm_gc>
        bbzvm_assert_state();
   d4398:	6833      	ldr	r3, [r6, #0]
   d439a:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d439e:	2b04      	cmp	r3, #4
   d43a0:	d00e      	beq.n	d43c0 <bbzvm_process_inmsgs+0x54>
        /* Extract the message data */
        bbzmsg_t* msg = bbzinmsg_queue_extract();
   d43a2:	f003 f83f 	bl	d7424 <bbzinmsg_queue_extract>
        switch(msg->type) {
   d43a6:	7803      	ldrb	r3, [r0, #0]
   d43a8:	2b00      	cmp	r3, #0
   d43aa:	d0e8      	beq.n	d437e <bbzvm_process_inmsgs+0x12>
   d43ac:	2b02      	cmp	r3, #2
   d43ae:	d904      	bls.n	d43ba <bbzvm_process_inmsgs+0x4e>
   d43b0:	2b03      	cmp	r3, #3
   d43b2:	d1e4      	bne.n	d437e <bbzvm_process_inmsgs+0x12>
            case BBZMSG_VSTIG_QUERY: // fallthrough
            case BBZMSG_VSTIG_PUT:
                bbzmsg_process_vstig(msg);
                break;
            case BBZMSG_SWARM: {
                bbzmsg_process_swarm(msg);
   d43b4:	f002 fdce 	bl	d6f54 <bbzmsg_process_swarm>
                break;
   d43b8:	e7e1      	b.n	d437e <bbzvm_process_inmsgs+0x12>
            case BBZMSG_BROADCAST:
                bbzmsg_process_broadcast(msg);
                break;
            case BBZMSG_VSTIG_QUERY: // fallthrough
            case BBZMSG_VSTIG_PUT:
                bbzmsg_process_vstig(msg);
   d43ba:	f002 fbe5 	bl	d6b88 <bbzmsg_process_vstig>
                break;
   d43be:	e7de      	b.n	d437e <bbzvm_process_inmsgs+0x12>
   d43c0:	bd70      	pop	{r4, r5, r6, pc}
   d43c2:	bf00      	nop
   d43c4:	2003e3f4 	.word	0x2003e3f4

000d43c8 <bbzvm_jump>:

/****************************************/
/****************************************/

void bbzvm_jump(uint16_t offset) {
    vm->pc = offset;
   d43c8:	4b04      	ldr	r3, [pc, #16]	; (d43dc <bbzvm_jump+0x14>)
   d43ca:	681b      	ldr	r3, [r3, #0]
   d43cc:	8158      	strh	r0, [r3, #10]
    assert_pc(vm->pc);
   d43ce:	891b      	ldrh	r3, [r3, #8]
   d43d0:	4283      	cmp	r3, r0
   d43d2:	d202      	bcs.n	d43da <bbzvm_jump+0x12>
   d43d4:	2004      	movs	r0, #4
   d43d6:	f7ff bf8f 	b.w	d42f8 <bbzvm_seterror>
   d43da:	4770      	bx	lr
   d43dc:	2003e3f4 	.word	0x2003e3f4

000d43e0 <bbzint_new>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzint_new(int16_t val) {
   d43e0:	b513      	push	{r0, r1, r4, lr}
   d43e2:	4604      	mov	r4, r0
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_INT, &o, vm->nil);
   d43e4:	f10d 0106 	add.w	r1, sp, #6
   d43e8:	2001      	movs	r0, #1
   d43ea:	f001 fefb 	bl	d61e4 <bbzheap_obj_alloc>
   d43ee:	b910      	cbnz	r0, d43f6 <bbzint_new+0x16>
   d43f0:	f7ff ffa4 	bl	d433c <bbzclosure_new.part.5>
   d43f4:	e007      	b.n	d4406 <bbzint_new+0x26>
    bbzheap_obj_at(o)->i.value = val;
   d43f6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d43fa:	f001 fe71 	bl	d60e0 <bbzheap_obj_at>
   d43fe:	f8a0 4001 	strh.w	r4, [r0, #1]
    return o;
   d4402:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d4406:	b002      	add	sp, #8
   d4408:	bd10      	pop	{r4, pc}

000d440a <bbzfloat_new>:

/****************************************/
/****************************************/

bbzheap_idx_t bbzfloat_new(bbzfloat val) {
   d440a:	b513      	push	{r0, r1, r4, lr}
   d440c:	4604      	mov	r4, r0
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_FLOAT, &o, vm->nil);
   d440e:	f10d 0106 	add.w	r1, sp, #6
   d4412:	2002      	movs	r0, #2
   d4414:	f001 fee6 	bl	d61e4 <bbzheap_obj_alloc>
   d4418:	b910      	cbnz	r0, d4420 <bbzfloat_new+0x16>
   d441a:	f7ff ff8f 	bl	d433c <bbzclosure_new.part.5>
   d441e:	e007      	b.n	d4430 <bbzfloat_new+0x26>
    bbzheap_obj_at(o)->f.value = val;
   d4420:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4424:	f001 fe5c 	bl	d60e0 <bbzheap_obj_at>
   d4428:	f8a0 4001 	strh.w	r4, [r0, #1]
    return o;
   d442c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d4430:	b002      	add	sp, #8
   d4432:	bd10      	pop	{r4, pc}

000d4434 <bbzstring_get>:

/****************************************/
/****************************************/

bbzheap_idx_t bbzstring_get(uint16_t val) {
   d4434:	b513      	push	{r0, r1, r4, lr}
    bbzheap_idx_t o = val;
   d4436:	a902      	add	r1, sp, #8
   d4438:	4604      	mov	r4, r0
   d443a:	f821 0d02 	strh.w	r0, [r1, #-2]!
    bbzvm_assert_mem_alloc(BBZTYPE_STRING, &o, vm->nil);
   d443e:	2003      	movs	r0, #3
   d4440:	f001 fed0 	bl	d61e4 <bbzheap_obj_alloc>
   d4444:	b910      	cbnz	r0, d444c <bbzstring_get+0x18>
   d4446:	f7ff ff79 	bl	d433c <bbzclosure_new.part.5>
   d444a:	e007      	b.n	d445c <bbzstring_get+0x28>
    bbzheap_obj_at(o)->s.value = val;
   d444c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4450:	f001 fe46 	bl	d60e0 <bbzheap_obj_at>
   d4454:	f8a0 4001 	strh.w	r4, [r0, #1]
    return o;
   d4458:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d445c:	b002      	add	sp, #8
   d445e:	bd10      	pop	{r4, pc}

000d4460 <bbztable_new>:

/****************************************/
/****************************************/

bbzheap_idx_t bbztable_new() {
   d4460:	b507      	push	{r0, r1, r2, lr}
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_TABLE, &o, vm->nil);
   d4462:	2004      	movs	r0, #4
   d4464:	f10d 0106 	add.w	r1, sp, #6
   d4468:	f001 febc 	bl	d61e4 <bbzheap_obj_alloc>
   d446c:	b910      	cbnz	r0, d4474 <bbztable_new+0x14>
   d446e:	f7ff ff65 	bl	d433c <bbzclosure_new.part.5>
   d4472:	e001      	b.n	d4478 <bbztable_new+0x18>
    return o;
   d4474:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d4478:	b003      	add	sp, #12
   d447a:	f85d fb04 	ldr.w	pc, [sp], #4

000d447e <bbzclosure_new>:

/****************************************/
/****************************************/

bbzheap_idx_t bbzclosure_new(intptr_t val) {
   d447e:	b513      	push	{r0, r1, r4, lr}
   d4480:	4604      	mov	r4, r0
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_CLOSURE, &o, vm->nil);
   d4482:	f10d 0106 	add.w	r1, sp, #6
   d4486:	2005      	movs	r0, #5
   d4488:	f001 feac 	bl	d61e4 <bbzheap_obj_alloc>
   d448c:	b910      	cbnz	r0, d4494 <bbzclosure_new+0x16>
   d448e:	f7ff ff55 	bl	d433c <bbzclosure_new.part.5>
   d4492:	e007      	b.n	d44a4 <bbzclosure_new+0x26>
    bbzheap_obj_at(o)->c.value = (void(*)())val;
   d4494:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4498:	f001 fe22 	bl	d60e0 <bbzheap_obj_at>
   d449c:	f8c0 4001 	str.w	r4, [r0, #1]
    return o;
   d44a0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
   d44a4:	b002      	add	sp, #8
   d44a6:	bd10      	pop	{r4, pc}

000d44a8 <bbzvm_stack_at>:
}

/****************************************/
/****************************************/

bbzheap_idx_t bbzvm_stack_at(int16_t idx) { return vm->stack[vm->stackptr - idx]; }
   d44a8:	4b05      	ldr	r3, [pc, #20]	; (d44c0 <bbzvm_stack_at+0x18>)
   d44aa:	681a      	ldr	r2, [r3, #0]
   d44ac:	f9b2 359b 	ldrsh.w	r3, [r2, #1435]	; 0x59b
   d44b0:	1a18      	subs	r0, r3, r0
   d44b2:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   d44b6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   d44ba:	f8b0 0007 	ldrh.w	r0, [r0, #7]
   d44be:	4770      	bx	lr
   d44c0:	2003e3f4 	.word	0x2003e3f4

000d44c4 <bbzvm_pop>:

/****************************************/
/****************************************/

void bbzvm_pop() {
    bbzvm_assert_exec(bbzvm_stack_size() > 0, BBZVM_ERROR_STACK);
   d44c4:	4b06      	ldr	r3, [pc, #24]	; (d44e0 <bbzvm_pop+0x1c>)
   d44c6:	681a      	ldr	r2, [r3, #0]
   d44c8:	f9b2 359b 	ldrsh.w	r3, [r2, #1435]	; 0x59b
   d44cc:	1c59      	adds	r1, r3, #1
   d44ce:	d102      	bne.n	d44d6 <bbzvm_pop+0x12>
   d44d0:	2002      	movs	r0, #2
   d44d2:	f7ff bf11 	b.w	d42f8 <bbzvm_seterror>
    --vm->stackptr;
   d44d6:	3b01      	subs	r3, #1
   d44d8:	f8a2 359b 	strh.w	r3, [r2, #1435]	; 0x59b
   d44dc:	4770      	bx	lr
   d44de:	bf00      	nop
   d44e0:	2003e3f4 	.word	0x2003e3f4

000d44e4 <bbzvm_lstore>:
}

/****************************************/
/****************************************/

void bbzvm_lstore(uint16_t idx) {
   d44e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44e6:	4606      	mov	r6, r0
    bbzheap_idx_t o = bbzvm_stack_at(0);
    uint16_t size = bbzdarray_size(vm->lsyms);
   d44e8:	4c11      	ldr	r4, [pc, #68]	; (d4530 <bbzvm_lstore+0x4c>)

/****************************************/
/****************************************/

void bbzvm_lstore(uint16_t idx) {
    bbzheap_idx_t o = bbzvm_stack_at(0);
   d44ea:	2000      	movs	r0, #0
   d44ec:	f7ff ffdc 	bl	d44a8 <bbzvm_stack_at>
    uint16_t size = bbzdarray_size(vm->lsyms);
   d44f0:	6823      	ldr	r3, [r4, #0]

/****************************************/
/****************************************/

void bbzvm_lstore(uint16_t idx) {
    bbzheap_idx_t o = bbzvm_stack_at(0);
   d44f2:	4607      	mov	r7, r0
    uint16_t size = bbzdarray_size(vm->lsyms);
   d44f4:	8998      	ldrh	r0, [r3, #12]
   d44f6:	f002 fe9b 	bl	d7230 <bbzdarray_size>
   d44fa:	4605      	mov	r5, r0
    while (size++ <= idx) {
   d44fc:	42ae      	cmp	r6, r5
        bbzvm_assert_exec(bbzdarray_push(vm->lsyms, vm->nil), BBZVM_ERROR_MEM);
   d44fe:	6823      	ldr	r3, [r4, #0]
/****************************************/

void bbzvm_lstore(uint16_t idx) {
    bbzheap_idx_t o = bbzvm_stack_at(0);
    uint16_t size = bbzdarray_size(vm->lsyms);
    while (size++ <= idx) {
   d4500:	d30d      	bcc.n	d451e <bbzvm_lstore+0x3a>
        bbzvm_assert_exec(bbzdarray_push(vm->lsyms, vm->nil), BBZVM_ERROR_MEM);
   d4502:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
   d4506:	8998      	ldrh	r0, [r3, #12]
   d4508:	f002 fdf2 	bl	d70f0 <bbzdarray_push>
   d450c:	3501      	adds	r5, #1
   d450e:	b2ad      	uxth	r5, r5
   d4510:	2800      	cmp	r0, #0
   d4512:	d1f3      	bne.n	d44fc <bbzvm_lstore+0x18>
   d4514:	200d      	movs	r0, #13
    }
    bbzdarray_set(vm->lsyms, idx, o);
    return bbzvm_pop();
}
   d4516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

void bbzvm_lstore(uint16_t idx) {
    bbzheap_idx_t o = bbzvm_stack_at(0);
    uint16_t size = bbzdarray_size(vm->lsyms);
    while (size++ <= idx) {
        bbzvm_assert_exec(bbzdarray_push(vm->lsyms, vm->nil), BBZVM_ERROR_MEM);
   d451a:	f7ff beed 	b.w	d42f8 <bbzvm_seterror>
    }
    bbzdarray_set(vm->lsyms, idx, o);
   d451e:	463a      	mov	r2, r7
   d4520:	4631      	mov	r1, r6
   d4522:	8998      	ldrh	r0, [r3, #12]
   d4524:	f002 fda4 	bl	d7070 <bbzdarray_set>
    return bbzvm_pop();
}
   d4528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    uint16_t size = bbzdarray_size(vm->lsyms);
    while (size++ <= idx) {
        bbzvm_assert_exec(bbzdarray_push(vm->lsyms, vm->nil), BBZVM_ERROR_MEM);
    }
    bbzdarray_set(vm->lsyms, idx, o);
    return bbzvm_pop();
   d452c:	f7ff bfca 	b.w	d44c4 <bbzvm_pop>
   d4530:	2003e3f4 	.word	0x2003e3f4

000d4534 <bbzvm_jumpz>:
}

/****************************************/
/****************************************/

void bbzvm_jumpz(uint16_t offset) {
   d4534:	b538      	push	{r3, r4, r5, lr}
    bbzvm_assert_stack(1);
   d4536:	4c14      	ldr	r4, [pc, #80]	; (d4588 <bbzvm_jumpz+0x54>)
   d4538:	6823      	ldr	r3, [r4, #0]
   d453a:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d453e:	3301      	adds	r3, #1
}

/****************************************/
/****************************************/

void bbzvm_jumpz(uint16_t offset) {
   d4540:	4605      	mov	r5, r0
    bbzvm_assert_stack(1);
   d4542:	d101      	bne.n	d4548 <bbzvm_jumpz+0x14>
   d4544:	2002      	movs	r0, #2
   d4546:	e01a      	b.n	d457e <bbzvm_jumpz+0x4a>
    bbzobj_t* o = bbzheap_obj_at(bbzvm_stack_at(0));
   d4548:	2000      	movs	r0, #0
   d454a:	f7ff ffad 	bl	d44a8 <bbzvm_stack_at>
   d454e:	f001 fdc7 	bl	d60e0 <bbzheap_obj_at>

    switch(bbztype(*o)) {
   d4552:	7803      	ldrb	r3, [r0, #0]
   d4554:	f003 0307 	and.w	r3, r3, #7
   d4558:	2b01      	cmp	r3, #1
   d455a:	d80f      	bhi.n	d457c <bbzvm_jumpz+0x48>
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value == 0) vm->pc = offset; assert_pc(vm->pc); break;
   d455c:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d4560:	b90b      	cbnz	r3, d4566 <bbzvm_jumpz+0x32>
   d4562:	6823      	ldr	r3, [r4, #0]
   d4564:	815d      	strh	r5, [r3, #10]
   d4566:	6823      	ldr	r3, [r4, #0]
   d4568:	895a      	ldrh	r2, [r3, #10]
   d456a:	891b      	ldrh	r3, [r3, #8]
   d456c:	429a      	cmp	r2, r3
   d456e:	d901      	bls.n	d4574 <bbzvm_jumpz+0x40>
   d4570:	2004      	movs	r0, #4
   d4572:	e004      	b.n	d457e <bbzvm_jumpz+0x4a>
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
    }
    assert_pc(vm->pc);
    return bbzvm_pop();
}
   d4574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value == 0) vm->pc = offset; assert_pc(vm->pc); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
    }
    assert_pc(vm->pc);
    return bbzvm_pop();
   d4578:	f7ff bfa4 	b.w	d44c4 <bbzvm_pop>
    bbzobj_t* o = bbzheap_obj_at(bbzvm_stack_at(0));

    switch(bbztype(*o)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value == 0) vm->pc = offset; assert_pc(vm->pc); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
   d457c:	2006      	movs	r0, #6
    }
    assert_pc(vm->pc);
    return bbzvm_pop();
}
   d457e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bbzobj_t* o = bbzheap_obj_at(bbzvm_stack_at(0));

    switch(bbztype(*o)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value == 0) vm->pc = offset; assert_pc(vm->pc); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
   d4582:	f7ff beb9 	b.w	d42f8 <bbzvm_seterror>
   d4586:	bf00      	nop
   d4588:	2003e3f4 	.word	0x2003e3f4

000d458c <bbzvm_jumpnz>:
}

/****************************************/
/****************************************/

void bbzvm_jumpnz(uint16_t offset) {
   d458c:	b538      	push	{r3, r4, r5, lr}
    bbzvm_assert_stack(1);
   d458e:	4c14      	ldr	r4, [pc, #80]	; (d45e0 <bbzvm_jumpnz+0x54>)
   d4590:	6823      	ldr	r3, [r4, #0]
   d4592:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4596:	3301      	adds	r3, #1
}

/****************************************/
/****************************************/

void bbzvm_jumpnz(uint16_t offset) {
   d4598:	4605      	mov	r5, r0
    bbzvm_assert_stack(1);
   d459a:	d101      	bne.n	d45a0 <bbzvm_jumpnz+0x14>
   d459c:	2002      	movs	r0, #2
   d459e:	e01a      	b.n	d45d6 <bbzvm_jumpnz+0x4a>
    bbzobj_t* o = bbzheap_obj_at(bbzvm_stack_at(0));
   d45a0:	2000      	movs	r0, #0
   d45a2:	f7ff ff81 	bl	d44a8 <bbzvm_stack_at>
   d45a6:	f001 fd9b 	bl	d60e0 <bbzheap_obj_at>

    switch(bbztype(*o)) {
   d45aa:	7803      	ldrb	r3, [r0, #0]
   d45ac:	f003 0307 	and.w	r3, r3, #7
   d45b0:	2b01      	cmp	r3, #1
   d45b2:	d80f      	bhi.n	d45d4 <bbzvm_jumpnz+0x48>
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value != 0) vm->pc = offset; assert_pc(vm->pc); break;
   d45b4:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d45b8:	b10b      	cbz	r3, d45be <bbzvm_jumpnz+0x32>
   d45ba:	6823      	ldr	r3, [r4, #0]
   d45bc:	815d      	strh	r5, [r3, #10]
   d45be:	6823      	ldr	r3, [r4, #0]
   d45c0:	895a      	ldrh	r2, [r3, #10]
   d45c2:	891b      	ldrh	r3, [r3, #8]
   d45c4:	429a      	cmp	r2, r3
   d45c6:	d901      	bls.n	d45cc <bbzvm_jumpnz+0x40>
   d45c8:	2004      	movs	r0, #4
   d45ca:	e004      	b.n	d45d6 <bbzvm_jumpnz+0x4a>
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
    }
    return bbzvm_pop();
}
   d45cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    switch(bbztype(*o)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value != 0) vm->pc = offset; assert_pc(vm->pc); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
    }
    return bbzvm_pop();
   d45d0:	f7ff bf78 	b.w	d44c4 <bbzvm_pop>
    bbzobj_t* o = bbzheap_obj_at(bbzvm_stack_at(0));

    switch(bbztype(*o)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value != 0) vm->pc = offset; assert_pc(vm->pc); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
   d45d4:	2006      	movs	r0, #6
    }
    return bbzvm_pop();
}
   d45d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bbzobj_t* o = bbzheap_obj_at(bbzvm_stack_at(0));

    switch(bbztype(*o)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: if (o->i.value != 0) vm->pc = offset; assert_pc(vm->pc); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE); return;
   d45da:	f7ff be8d 	b.w	d42f8 <bbzvm_seterror>
   d45de:	bf00      	nop
   d45e0:	2003e3f4 	.word	0x2003e3f4

000d45e4 <bbzvm_push>:

/****************************************/
/****************************************/

void bbzvm_push(bbzheap_idx_t v) {
    bbzvm_assert_exec(bbzvm_stack_size() < BBZSTACK_SIZE, BBZVM_ERROR_STACK);
   d45e4:	4b08      	ldr	r3, [pc, #32]	; (d4608 <bbzvm_push+0x24>)
   d45e6:	681a      	ldr	r2, [r3, #0]
   d45e8:	f9b2 359b 	ldrsh.w	r3, [r2, #1435]	; 0x59b
   d45ec:	3301      	adds	r3, #1
   d45ee:	b29b      	uxth	r3, r3
   d45f0:	2b5f      	cmp	r3, #95	; 0x5f
   d45f2:	d902      	bls.n	d45fa <bbzvm_push+0x16>
   d45f4:	2002      	movs	r0, #2
   d45f6:	f7ff be7f 	b.w	d42f8 <bbzvm_seterror>
    vm->stack[++vm->stackptr] = v;
   d45fa:	f8a2 359b 	strh.w	r3, [r2, #1435]	; 0x59b
   d45fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d4602:	f8a3 059f 	strh.w	r0, [r3, #1439]	; 0x59f
   d4606:	4770      	bx	lr
   d4608:	2003e3f4 	.word	0x2003e3f4

000d460c <bbzvm_pusht>:
}

/****************************************/
/****************************************/

void bbzvm_pusht() {
   d460c:	b508      	push	{r3, lr}
    bbzvm_push(bbztable_new());
   d460e:	f7ff ff27 	bl	d4460 <bbztable_new>
}
   d4612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/****************************************/
/****************************************/

void bbzvm_pusht() {
    bbzvm_push(bbztable_new());
   d4616:	f7ff bfe5 	b.w	d45e4 <bbzvm_push>
	...

000d461c <bbzvm_lload>:
}

/****************************************/
/****************************************/

void bbzvm_lload(uint16_t idx) {
   d461c:	b507      	push	{r0, r1, r2, lr}
    bbzheap_idx_t id = vm->nil;
   d461e:	4b0d      	ldr	r3, [pc, #52]	; (d4654 <bbzvm_lload+0x38>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	f893 2458 	ldrb.w	r2, [r3, #1112]	; 0x458
   d4626:	f893 1459 	ldrb.w	r1, [r3, #1113]	; 0x459
   d462a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d462e:	aa02      	add	r2, sp, #8
   d4630:	f822 1d02 	strh.w	r1, [r2, #-2]!
    bbzvm_assert_exec(bbzdarray_get(vm->lsyms, idx, &id), BBZVM_ERROR_LNUM);
   d4634:	4601      	mov	r1, r0
   d4636:	8998      	ldrh	r0, [r3, #12]
   d4638:	f002 fcca 	bl	d6fd0 <bbzdarray_get>
   d463c:	b918      	cbnz	r0, d4646 <bbzvm_lload+0x2a>
   d463e:	2003      	movs	r0, #3
   d4640:	f7ff fe5a 	bl	d42f8 <bbzvm_seterror>
   d4644:	e003      	b.n	d464e <bbzvm_lload+0x32>
    return bbzvm_push(id);
   d4646:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d464a:	f7ff ffcb 	bl	d45e4 <bbzvm_push>
}
   d464e:	b003      	add	sp, #12
   d4650:	f85d fb04 	ldr.w	pc, [sp], #4
   d4654:	2003e3f4 	.word	0x2003e3f4

000d4658 <bbzvm_dup>:
}

/****************************************/
/****************************************/

void bbzvm_dup() {
   d4658:	b513      	push	{r0, r1, r4, lr}
    uint16_t stack_size = (uint16_t)bbzvm_stack_size();
   d465a:	4b1b      	ldr	r3, [pc, #108]	; (d46c8 <bbzvm_dup+0x70>)
   d465c:	681b      	ldr	r3, [r3, #0]
    bbzvm_assert_exec(stack_size > 0 && stack_size < BBZSTACK_SIZE, BBZVM_ERROR_STACK);
   d465e:	f8b3 359b 	ldrh.w	r3, [r3, #1435]	; 0x59b
   d4662:	2b5e      	cmp	r3, #94	; 0x5e
   d4664:	d901      	bls.n	d466a <bbzvm_dup+0x12>
   d4666:	2002      	movs	r0, #2
   d4668:	e006      	b.n	d4678 <bbzvm_dup+0x20>
    bbzheap_idx_t idx;
    bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &idx);
   d466a:	f10d 0106 	add.w	r1, sp, #6
   d466e:	2006      	movs	r0, #6
   d4670:	f001 fdb8 	bl	d61e4 <bbzheap_obj_alloc>
   d4674:	b918      	cbnz	r0, d467e <bbzvm_dup+0x26>
   d4676:	200d      	movs	r0, #13
   d4678:	f7ff fe3e 	bl	d42f8 <bbzvm_seterror>
   d467c:	e021      	b.n	d46c2 <bbzvm_dup+0x6a>
    bbzheap_obj_copy(bbzvm_stack_at(0), idx);
   d467e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4682:	f001 fd2d 	bl	d60e0 <bbzheap_obj_at>
   d4686:	4604      	mov	r4, r0
   d4688:	2000      	movs	r0, #0
   d468a:	f7ff ff0d 	bl	d44a8 <bbzvm_stack_at>
   d468e:	f001 fd27 	bl	d60e0 <bbzheap_obj_at>
   d4692:	6803      	ldr	r3, [r0, #0]
   d4694:	6023      	str	r3, [r4, #0]
   d4696:	7903      	ldrb	r3, [r0, #4]
   d4698:	7123      	strb	r3, [r4, #4]
    bbzheap_obj_makevalid(*bbzheap_obj_at(idx));
   d469a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d469e:	f001 fd1f 	bl	d60e0 <bbzheap_obj_at>
   d46a2:	7803      	ldrb	r3, [r0, #0]
   d46a4:	f043 0308 	orr.w	r3, r3, #8
   d46a8:	7003      	strb	r3, [r0, #0]
    bbzheap_obj_unmake_permanent(*bbzheap_obj_at(idx));
   d46aa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d46ae:	f001 fd17 	bl	d60e0 <bbzheap_obj_at>
   d46b2:	7803      	ldrb	r3, [r0, #0]
   d46b4:	f023 0310 	bic.w	r3, r3, #16
   d46b8:	7003      	strb	r3, [r0, #0]
    bbzvm_push(idx);
   d46ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d46be:	f7ff ff91 	bl	d45e4 <bbzvm_push>
}
   d46c2:	b002      	add	sp, #8
   d46c4:	bd10      	pop	{r4, pc}
   d46c6:	bf00      	nop
   d46c8:	2003e3f4 	.word	0x2003e3f4

000d46cc <bbzvm_pushnil>:

/****************************************/
/****************************************/

void bbzvm_pushnil() {
    bbzvm_push(vm->nil);
   d46cc:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <bbzvm_pushnil+0xc>)
   d46ce:	681b      	ldr	r3, [r3, #0]
   d46d0:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
   d46d4:	f7ff bf86 	b.w	d45e4 <bbzvm_push>
   d46d8:	2003e3f4 	.word	0x2003e3f4

000d46dc <bbzvm_pushc>:
}

/****************************************/
/****************************************/

void bbzvm_pushc(intptr_t rfrnc, int16_t nat) {
   d46dc:	b538      	push	{r3, r4, r5, lr}
   d46de:	460d      	mov	r5, r1
    bbzheap_idx_t o = bbzclosure_new(rfrnc);
   d46e0:	f7ff fecd 	bl	d447e <bbzclosure_new>
   d46e4:	4604      	mov	r4, r0
    if (nat) bbzclosure_make_native(*bbzheap_obj_at(o));
   d46e6:	b12d      	cbz	r5, d46f4 <bbzvm_pushc+0x18>
   d46e8:	f001 fcfa 	bl	d60e0 <bbzheap_obj_at>
   d46ec:	7803      	ldrb	r3, [r0, #0]
   d46ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d46f2:	7003      	strb	r3, [r0, #0]
    return bbzvm_push(o);
   d46f4:	4620      	mov	r0, r4
}
   d46f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
/****************************************/

void bbzvm_pushc(intptr_t rfrnc, int16_t nat) {
    bbzheap_idx_t o = bbzclosure_new(rfrnc);
    if (nat) bbzclosure_make_native(*bbzheap_obj_at(o));
    return bbzvm_push(o);
   d46fa:	f7ff bf73 	b.w	d45e4 <bbzvm_push>

000d46fe <bbzvm_pushi>:
}

/****************************************/
/****************************************/

void bbzvm_pushi(int16_t v) {
   d46fe:	b508      	push	{r3, lr}
    bbzvm_push(bbzint_new(v));
   d4700:	f7ff fe6e 	bl	d43e0 <bbzint_new>
}
   d4704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/****************************************/
/****************************************/

void bbzvm_pushi(int16_t v) {
    bbzvm_push(bbzint_new(v));
   d4708:	f7ff bf6c 	b.w	d45e4 <bbzvm_push>

000d470c <_ZL21bbzvm_binary_op_arithPFsssE>:
/**
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_arith(binary_op_arith op) {
   d470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbzvm_assert_stack(2);
   d470e:	4f1c      	ldr	r7, [pc, #112]	; (d4780 <_ZL21bbzvm_binary_op_arithPFsssE+0x74>)
   d4710:	683b      	ldr	r3, [r7, #0]
   d4712:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4716:	3301      	adds	r3, #1
   d4718:	b29b      	uxth	r3, r3
   d471a:	2b01      	cmp	r3, #1
/**
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_arith(binary_op_arith op) {
   d471c:	4606      	mov	r6, r0
    bbzvm_assert_stack(2);
   d471e:	d801      	bhi.n	d4724 <_ZL21bbzvm_binary_op_arithPFsssE+0x18>
   d4720:	2002      	movs	r0, #2
   d4722:	e01f      	b.n	d4764 <_ZL21bbzvm_binary_op_arithPFsssE+0x58>
    bbzobj_t* rhs = bbzheap_obj_at(bbzvm_stack_at(0));
   d4724:	2000      	movs	r0, #0
   d4726:	f7ff febf 	bl	d44a8 <bbzvm_stack_at>
   d472a:	f001 fcd9 	bl	d60e0 <bbzheap_obj_at>
   d472e:	4605      	mov	r5, r0
    bbzobj_t* lhs = bbzheap_obj_at(bbzvm_stack_at(1));
   d4730:	2001      	movs	r0, #1
   d4732:	f7ff feb9 	bl	d44a8 <bbzvm_stack_at>
   d4736:	f001 fcd3 	bl	d60e0 <bbzheap_obj_at>
   d473a:	4604      	mov	r4, r0
    bbzvm_pop();
   d473c:	f7ff fec2 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d4740:	f7ff fec0 	bl	d44c4 <bbzvm_pop>
    bbzvm_assert_state();
   d4744:	683b      	ldr	r3, [r7, #0]
   d4746:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d474a:	2b04      	cmp	r3, #4
   d474c:	d017      	beq.n	d477e <_ZL21bbzvm_binary_op_arithPFsssE+0x72>

    // MCUs usually only support integer operations.
    // Disallow floating-point operations.
//    uint8_t ok = (uint8_t) (!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs));
    bbzvm_assert_exec(!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs), BBZVM_ERROR_TYPE);
   d474e:	7823      	ldrb	r3, [r4, #0]
   d4750:	f003 0307 	and.w	r3, r3, #7
   d4754:	2b02      	cmp	r3, #2
   d4756:	d004      	beq.n	d4762 <_ZL21bbzvm_binary_op_arithPFsssE+0x56>
   d4758:	782b      	ldrb	r3, [r5, #0]
   d475a:	f003 0307 	and.w	r3, r3, #7
   d475e:	2b02      	cmp	r3, #2
   d4760:	d104      	bne.n	d476c <_ZL21bbzvm_binary_op_arithPFsssE+0x60>
   d4762:	2006      	movs	r0, #6
    bbzvm_pushi((*op)(lhs->i.value, rhs->i.value));
}
   d4764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bbzvm_assert_state();

    // MCUs usually only support integer operations.
    // Disallow floating-point operations.
//    uint8_t ok = (uint8_t) (!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs));
    bbzvm_assert_exec(!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs), BBZVM_ERROR_TYPE);
   d4768:	f7ff bdc6 	b.w	d42f8 <bbzvm_seterror>
    bbzvm_pushi((*op)(lhs->i.value, rhs->i.value));
   d476c:	f9b5 1001 	ldrsh.w	r1, [r5, #1]
   d4770:	f9b4 0001 	ldrsh.w	r0, [r4, #1]
   d4774:	47b0      	blx	r6
}
   d4776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    // MCUs usually only support integer operations.
    // Disallow floating-point operations.
//    uint8_t ok = (uint8_t) (!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs));
    bbzvm_assert_exec(!bbztype_isfloat(*lhs) && !bbztype_isfloat(*rhs), BBZVM_ERROR_TYPE);
    bbzvm_pushi((*op)(lhs->i.value, rhs->i.value));
   d477a:	f7ff bfc0 	b.w	d46fe <bbzvm_pushi>
   d477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4780:	2003e3f4 	.word	0x2003e3f4

000d4784 <bbzvm_add>:

/****************************************/
/****************************************/

void bbzvm_add() {
    return bbzvm_binary_op_arith(&add);
   d4784:	4801      	ldr	r0, [pc, #4]	; (d478c <bbzvm_add+0x8>)
   d4786:	f7ff bfc1 	b.w	d470c <_ZL21bbzvm_binary_op_arithPFsssE>
   d478a:	bf00      	nop
   d478c:	000d4299 	.word	0x000d4299

000d4790 <bbzvm_sub>:

/****************************************/
/****************************************/

void bbzvm_sub() {
    return bbzvm_binary_op_arith(&sub);
   d4790:	4801      	ldr	r0, [pc, #4]	; (d4798 <bbzvm_sub+0x8>)
   d4792:	f7ff bfbb 	b.w	d470c <_ZL21bbzvm_binary_op_arithPFsssE>
   d4796:	bf00      	nop
   d4798:	000d429f 	.word	0x000d429f

000d479c <bbzvm_mul>:

/****************************************/
/****************************************/

void bbzvm_mul() {
    return bbzvm_binary_op_arith(&mul);
   d479c:	4801      	ldr	r0, [pc, #4]	; (d47a4 <bbzvm_mul+0x8>)
   d479e:	f7ff bfb5 	b.w	d470c <_ZL21bbzvm_binary_op_arithPFsssE>
   d47a2:	bf00      	nop
   d47a4:	000d42a5 	.word	0x000d42a5

000d47a8 <bbzvm_div>:

/****************************************/
/****************************************/

void bbzvm_div() {
    return bbzvm_binary_op_arith(&div);
   d47a8:	4801      	ldr	r0, [pc, #4]	; (d47b0 <bbzvm_div+0x8>)
   d47aa:	f7ff bfaf 	b.w	d470c <_ZL21bbzvm_binary_op_arithPFsssE>
   d47ae:	bf00      	nop
   d47b0:	000d42ab 	.word	0x000d42ab

000d47b4 <bbzvm_mod>:

/****************************************/
/****************************************/

void bbzvm_mod() {
    return bbzvm_binary_op_arith(&mod);
   d47b4:	4801      	ldr	r0, [pc, #4]	; (d47bc <bbzvm_mod+0x8>)
   d47b6:	f7ff bfa9 	b.w	d470c <_ZL21bbzvm_binary_op_arithPFsssE>
   d47ba:	bf00      	nop
   d47bc:	000d42b3 	.word	0x000d42b3

000d47c0 <bbzvm_pow>:

/****************************************/
/****************************************/

void bbzvm_pow() {
    return bbzvm_binary_op_arith(&bbzpow);
   d47c0:	4801      	ldr	r0, [pc, #4]	; (d47c8 <bbzvm_pow+0x8>)
   d47c2:	f7ff bfa3 	b.w	d470c <_ZL21bbzvm_binary_op_arithPFsssE>
   d47c6:	bf00      	nop
   d47c8:	000d4311 	.word	0x000d4311

000d47cc <bbzvm_unm>:

// --------------------------------
// -         Unary Minus          -
// --------------------------------

void bbzvm_unm() {
   d47cc:	b510      	push	{r4, lr}
    bbzvm_assert_stack(1);
   d47ce:	4b13      	ldr	r3, [pc, #76]	; (d481c <bbzvm_unm+0x50>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d47d6:	3301      	adds	r3, #1
   d47d8:	d101      	bne.n	d47de <bbzvm_unm+0x12>
   d47da:	2002      	movs	r0, #2
   d47dc:	e010      	b.n	d4800 <bbzvm_unm+0x34>
    bbzobj_t* operand = bbzheap_obj_at(bbzvm_stack_at(0));
   d47de:	2000      	movs	r0, #0
   d47e0:	f7ff fe62 	bl	d44a8 <bbzvm_stack_at>
   d47e4:	f001 fc7c 	bl	d60e0 <bbzheap_obj_at>
   d47e8:	4604      	mov	r4, r0
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d47ea:	2000      	movs	r0, #0
   d47ec:	f7ff fe5c 	bl	d44a8 <bbzvm_stack_at>
   d47f0:	f001 fc76 	bl	d60e0 <bbzheap_obj_at>
   d47f4:	7803      	ldrb	r3, [r0, #0]
   d47f6:	f003 0307 	and.w	r3, r3, #7
   d47fa:	2b01      	cmp	r3, #1
   d47fc:	d004      	beq.n	d4808 <bbzvm_unm+0x3c>
   d47fe:	2006      	movs	r0, #6
    bbzvm_pop();

    // We *could* implement the unary minus on a float, but we
    // disallow it, since we can do nothing with it anyway.
    bbzvm_pushi(-operand->i.value);
}
   d4800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// --------------------------------

void bbzvm_unm() {
    bbzvm_assert_stack(1);
    bbzobj_t* operand = bbzheap_obj_at(bbzvm_stack_at(0));
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d4804:	f7ff bd78 	b.w	d42f8 <bbzvm_seterror>
    bbzvm_pop();
   d4808:	f7ff fe5c 	bl	d44c4 <bbzvm_pop>

    // We *could* implement the unary minus on a float, but we
    // disallow it, since we can do nothing with it anyway.
    bbzvm_pushi(-operand->i.value);
   d480c:	f9b4 0001 	ldrsh.w	r0, [r4, #1]
   d4810:	4240      	negs	r0, r0
   d4812:	b200      	sxth	r0, r0
}
   d4814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
    bbzvm_pop();

    // We *could* implement the unary minus on a float, but we
    // disallow it, since we can do nothing with it anyway.
    bbzvm_pushi(-operand->i.value);
   d4818:	f7ff bf71 	b.w	d46fe <bbzvm_pushi>
   d481c:	2003e3f4 	.word	0x2003e3f4

000d4820 <_ZL21bbzvm_binary_op_logicPFhhhE>:
/**
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_logic(binary_op_logic op) {
   d4820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbzvm_assert_stack(2);
   d4822:	4f21      	ldr	r7, [pc, #132]	; (d48a8 <_ZL21bbzvm_binary_op_logicPFhhhE+0x88>)
   d4824:	683b      	ldr	r3, [r7, #0]
   d4826:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d482a:	3301      	adds	r3, #1
   d482c:	b29b      	uxth	r3, r3
   d482e:	2b01      	cmp	r3, #1
/**
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_logic(binary_op_logic op) {
   d4830:	4604      	mov	r4, r0
    bbzvm_assert_stack(2);
   d4832:	d804      	bhi.n	d483e <_ZL21bbzvm_binary_op_logicPFhhhE+0x1e>
   d4834:	2002      	movs	r0, #2
    uint8_t
            lhs_bool = bbztype_tobool(lhs),
            rhs_bool = bbztype_tobool(rhs);

    bbzvm_pushi((*op)(lhs_bool, rhs_bool));
}
   d4836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_logic(binary_op_logic op) {
    bbzvm_assert_stack(2);
   d483a:	f7ff bd5d 	b.w	d42f8 <bbzvm_seterror>
    bbzobj_t* rhs = bbzheap_obj_at(bbzvm_stack_at(0));
   d483e:	2000      	movs	r0, #0
   d4840:	f7ff fe32 	bl	d44a8 <bbzvm_stack_at>
   d4844:	f001 fc4c 	bl	d60e0 <bbzheap_obj_at>
   d4848:	4605      	mov	r5, r0
    bbzobj_t* lhs = bbzheap_obj_at(bbzvm_stack_at(1));
   d484a:	2001      	movs	r0, #1
   d484c:	f7ff fe2c 	bl	d44a8 <bbzvm_stack_at>
   d4850:	f001 fc46 	bl	d60e0 <bbzheap_obj_at>
   d4854:	4606      	mov	r6, r0
    bbzvm_pop();
   d4856:	f7ff fe35 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d485a:	f7ff fe33 	bl	d44c4 <bbzvm_pop>
    bbzvm_assert_state();
   d485e:	683b      	ldr	r3, [r7, #0]
   d4860:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d4864:	2b04      	cmp	r3, #4
   d4866:	d01d      	beq.n	d48a4 <_ZL21bbzvm_binary_op_logicPFhhhE+0x84>
 * @param[in] o The object to verify.
 * @return 1 if the object can be considered true, otherwise 0.
 */
ALWAYS_INLINE
uint8_t bbztype_tobool(const bbzobj_t* o) {
    switch(bbztype(*o)) {
   d4868:	7833      	ldrb	r3, [r6, #0]
   d486a:	f003 0307 	and.w	r3, r3, #7
   d486e:	2b01      	cmp	r3, #1
   d4870:	d105      	bne.n	d487e <_ZL21bbzvm_binary_op_logicPFhhhE+0x5e>
        case BBZTYPE_INT: return o->i.value != 0;
   d4872:	f9b6 0001 	ldrsh.w	r0, [r6, #1]
   d4876:	3000      	adds	r0, #0
   d4878:	bf18      	it	ne
   d487a:	2001      	movne	r0, #1
   d487c:	e000      	b.n	d4880 <_ZL21bbzvm_binary_op_logicPFhhhE+0x60>
        default: return 0;
   d487e:	2000      	movs	r0, #0
 * @param[in] o The object to verify.
 * @return 1 if the object can be considered true, otherwise 0.
 */
ALWAYS_INLINE
uint8_t bbztype_tobool(const bbzobj_t* o) {
    switch(bbztype(*o)) {
   d4880:	782b      	ldrb	r3, [r5, #0]
   d4882:	f003 0307 	and.w	r3, r3, #7
   d4886:	2b01      	cmp	r3, #1
   d4888:	d105      	bne.n	d4896 <_ZL21bbzvm_binary_op_logicPFhhhE+0x76>
        case BBZTYPE_INT: return o->i.value != 0;
   d488a:	f9b5 1001 	ldrsh.w	r1, [r5, #1]
   d488e:	3100      	adds	r1, #0
   d4890:	bf18      	it	ne
   d4892:	2101      	movne	r1, #1
   d4894:	e000      	b.n	d4898 <_ZL21bbzvm_binary_op_logicPFhhhE+0x78>
        default: return 0;
   d4896:	2100      	movs	r1, #0

    uint8_t
            lhs_bool = bbztype_tobool(lhs),
            rhs_bool = bbztype_tobool(rhs);

    bbzvm_pushi((*op)(lhs_bool, rhs_bool));
   d4898:	47a0      	blx	r4
}
   d489a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    uint8_t
            lhs_bool = bbztype_tobool(lhs),
            rhs_bool = bbztype_tobool(rhs);

    bbzvm_pushi((*op)(lhs_bool, rhs_bool));
   d489e:	b200      	sxth	r0, r0
   d48a0:	f7ff bf2d 	b.w	d46fe <bbzvm_pushi>
   d48a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48a6:	bf00      	nop
   d48a8:	2003e3f4 	.word	0x2003e3f4

000d48ac <bbzvm_and>:

/****************************************/
/****************************************/

void bbzvm_and() {
    return bbzvm_binary_op_logic(&bbzand);
   d48ac:	4801      	ldr	r0, [pc, #4]	; (d48b4 <bbzvm_and+0x8>)
   d48ae:	f7ff bfb7 	b.w	d4820 <_ZL21bbzvm_binary_op_logicPFhhhE>
   d48b2:	bf00      	nop
   d48b4:	000d42bf 	.word	0x000d42bf

000d48b8 <bbzvm_or>:

/****************************************/
/****************************************/

void bbzvm_or() {
    return bbzvm_binary_op_logic(&bbzor);
   d48b8:	4801      	ldr	r0, [pc, #4]	; (d48c0 <bbzvm_or+0x8>)
   d48ba:	f7ff bfb1 	b.w	d4820 <_ZL21bbzvm_binary_op_logicPFhhhE>
   d48be:	bf00      	nop
   d48c0:	000d42c3 	.word	0x000d42c3

000d48c4 <bbzvm_not>:
}

/****************************************/
/****************************************/

void bbzvm_not() {
   d48c4:	b510      	push	{r4, lr}
    bbzvm_assert_stack(1);
   d48c6:	4b11      	ldr	r3, [pc, #68]	; (d490c <bbzvm_not+0x48>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d48ce:	3301      	adds	r3, #1
   d48d0:	d101      	bne.n	d48d6 <bbzvm_not+0x12>
   d48d2:	2002      	movs	r0, #2
   d48d4:	e016      	b.n	d4904 <bbzvm_not+0x40>
    bbzobj_t* operand = bbzheap_obj_at(bbzvm_stack_at(0));
   d48d6:	2000      	movs	r0, #0
   d48d8:	f7ff fde6 	bl	d44a8 <bbzvm_stack_at>
   d48dc:	f001 fc00 	bl	d60e0 <bbzheap_obj_at>
   d48e0:	4604      	mov	r4, r0
    bbzvm_pop();
   d48e2:	f7ff fdef 	bl	d44c4 <bbzvm_pop>
    switch(bbztype(*operand)) {
   d48e6:	7823      	ldrb	r3, [r4, #0]
   d48e8:	f003 0307 	and.w	r3, r3, #7
   d48ec:	2b01      	cmp	r3, #1
   d48ee:	d808      	bhi.n	d4902 <bbzvm_not+0x3e>
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: bbzvm_pushi(operand->i.value != 0); break;
   d48f0:	f9b4 0001 	ldrsh.w	r0, [r4, #1]
   d48f4:	3000      	adds	r0, #0
   d48f6:	bf18      	it	ne
   d48f8:	2001      	movne	r0, #1
        default: bbzvm_seterror(BBZVM_ERROR_TYPE);
    }
}
   d48fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbzvm_assert_stack(1);
    bbzobj_t* operand = bbzheap_obj_at(bbzvm_stack_at(0));
    bbzvm_pop();
    switch(bbztype(*operand)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: bbzvm_pushi(operand->i.value != 0); break;
   d48fe:	f7ff befe 	b.w	d46fe <bbzvm_pushi>
        default: bbzvm_seterror(BBZVM_ERROR_TYPE);
   d4902:	2006      	movs	r0, #6
    }
}
   d4904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbzobj_t* operand = bbzheap_obj_at(bbzvm_stack_at(0));
    bbzvm_pop();
    switch(bbztype(*operand)) {
        case BBZTYPE_NIL: // fallthrough
        case BBZTYPE_INT: bbzvm_pushi(operand->i.value != 0); break;
        default: bbzvm_seterror(BBZVM_ERROR_TYPE);
   d4908:	f7ff bcf6 	b.w	d42f8 <bbzvm_seterror>
   d490c:	2003e3f4 	.word	0x2003e3f4

000d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>:
/**
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_cmp(binary_op_cmp op) {
   d4910:	b570      	push	{r4, r5, r6, lr}
    bbzvm_assert_stack(2);
   d4912:	4b14      	ldr	r3, [pc, #80]	; (d4964 <_ZL19bbzvm_binary_op_cmpPFhaE+0x54>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d491a:	3301      	adds	r3, #1
   d491c:	b29b      	uxth	r3, r3
   d491e:	2b01      	cmp	r3, #1
/**
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_cmp(binary_op_cmp op) {
   d4920:	4604      	mov	r4, r0
    bbzvm_assert_stack(2);
   d4922:	d804      	bhi.n	d492e <_ZL19bbzvm_binary_op_cmpPFhaE+0x1e>
   d4924:	2002      	movs	r0, #2
    bbzobj_t* lhs = bbzheap_obj_at(bbzvm_stack_at(1));
    bbzvm_pop();
    bbzvm_pop();

    bbzvm_pushi((*op)(bbztype_cmp(lhs, rhs)));
}
   d4926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @brief Performs an arithmetic binary operation.
 * @details Pops both operand, and pushes the result.
 * @param[in] op The operation to perform.
 */
static void bbzvm_binary_op_cmp(binary_op_cmp op) {
    bbzvm_assert_stack(2);
   d492a:	f7ff bce5 	b.w	d42f8 <bbzvm_seterror>
    bbzobj_t* rhs = bbzheap_obj_at(bbzvm_stack_at(0));
   d492e:	2000      	movs	r0, #0
   d4930:	f7ff fdba 	bl	d44a8 <bbzvm_stack_at>
   d4934:	f001 fbd4 	bl	d60e0 <bbzheap_obj_at>
   d4938:	4606      	mov	r6, r0
    bbzobj_t* lhs = bbzheap_obj_at(bbzvm_stack_at(1));
   d493a:	2001      	movs	r0, #1
   d493c:	f7ff fdb4 	bl	d44a8 <bbzvm_stack_at>
   d4940:	f001 fbce 	bl	d60e0 <bbzheap_obj_at>
   d4944:	4605      	mov	r5, r0
    bbzvm_pop();
   d4946:	f7ff fdbd 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d494a:	f7ff fdbb 	bl	d44c4 <bbzvm_pop>

    bbzvm_pushi((*op)(bbztype_cmp(lhs, rhs)));
   d494e:	4631      	mov	r1, r6
   d4950:	4628      	mov	r0, r5
   d4952:	f001 fab3 	bl	d5ebc <bbztype_cmp>
   d4956:	47a0      	blx	r4
}
   d4958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbzobj_t* rhs = bbzheap_obj_at(bbzvm_stack_at(0));
    bbzobj_t* lhs = bbzheap_obj_at(bbzvm_stack_at(1));
    bbzvm_pop();
    bbzvm_pop();

    bbzvm_pushi((*op)(bbztype_cmp(lhs, rhs)));
   d495c:	b200      	sxth	r0, r0
   d495e:	f7ff bece 	b.w	d46fe <bbzvm_pushi>
   d4962:	bf00      	nop
   d4964:	2003e3f4 	.word	0x2003e3f4

000d4968 <bbzvm_eq>:

/****************************************/
/****************************************/

void bbzvm_eq() {
    return bbzvm_binary_op_cmp(&bbzeq);
   d4968:	4801      	ldr	r0, [pc, #4]	; (d4970 <bbzvm_eq+0x8>)
   d496a:	f7ff bfd1 	b.w	d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>
   d496e:	bf00      	nop
   d4970:	000d42c7 	.word	0x000d42c7

000d4974 <bbzvm_neq>:

/****************************************/
/****************************************/

void bbzvm_neq() {
    return bbzvm_binary_op_cmp(&bbzneq);
   d4974:	4801      	ldr	r0, [pc, #4]	; (d497c <bbzvm_neq+0x8>)
   d4976:	f7ff bfcb 	b.w	d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>
   d497a:	bf00      	nop
   d497c:	000d42cf 	.word	0x000d42cf

000d4980 <bbzvm_gt>:

/****************************************/
/****************************************/

void bbzvm_gt() {
    return bbzvm_binary_op_cmp(&bbzgt);
   d4980:	4801      	ldr	r0, [pc, #4]	; (d4988 <bbzvm_gt+0x8>)
   d4982:	f7ff bfc5 	b.w	d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>
   d4986:	bf00      	nop
   d4988:	000d42d7 	.word	0x000d42d7

000d498c <bbzvm_gte>:

/****************************************/
/****************************************/

void bbzvm_gte() {
    return bbzvm_binary_op_cmp(&bbzgte);
   d498c:	4801      	ldr	r0, [pc, #4]	; (d4994 <bbzvm_gte+0x8>)
   d498e:	f7ff bfbf 	b.w	d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>
   d4992:	bf00      	nop
   d4994:	000d42e1 	.word	0x000d42e1

000d4998 <bbzvm_lt>:

/****************************************/
/****************************************/

void bbzvm_lt() {
    return bbzvm_binary_op_cmp(&bbzlt);
   d4998:	4801      	ldr	r0, [pc, #4]	; (d49a0 <bbzvm_lt+0x8>)
   d499a:	f7ff bfb9 	b.w	d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>
   d499e:	bf00      	nop
   d49a0:	000d42e7 	.word	0x000d42e7

000d49a4 <bbzvm_lte>:

/****************************************/
/****************************************/

void bbzvm_lte() {
    return bbzvm_binary_op_cmp(&bbzlte);
   d49a4:	4801      	ldr	r0, [pc, #4]	; (d49ac <bbzvm_lte+0x8>)
   d49a6:	f7ff bfb3 	b.w	d4910 <_ZL19bbzvm_binary_op_cmpPFhaE>
   d49aa:	bf00      	nop
   d49ac:	000d42eb 	.word	0x000d42eb

000d49b0 <bbzvm_callc>:
}

/****************************************/
/****************************************/

void bbzvm_callc() {
   d49b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    /* Get argument number and pop it */
    bbzvm_assert_stack(1);
   d49b4:	f8df 81b4 	ldr.w	r8, [pc, #436]	; d4b6c <bbzvm_callc+0x1bc>
   d49b8:	f8d8 3000 	ldr.w	r3, [r8]
   d49bc:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d49c0:	3301      	adds	r3, #1
   d49c2:	4645      	mov	r5, r8
   d49c4:	d101      	bne.n	d49ca <bbzvm_callc+0x1a>
   d49c6:	2002      	movs	r0, #2
   d49c8:	e00a      	b.n	d49e0 <bbzvm_callc+0x30>
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d49ca:	2000      	movs	r0, #0
   d49cc:	f7ff fd6c 	bl	d44a8 <bbzvm_stack_at>
   d49d0:	f001 fb86 	bl	d60e0 <bbzheap_obj_at>
   d49d4:	7803      	ldrb	r3, [r0, #0]
   d49d6:	f003 0307 	and.w	r3, r3, #7
   d49da:	2b01      	cmp	r3, #1
   d49dc:	d003      	beq.n	d49e6 <bbzvm_callc+0x36>
   d49de:	2006      	movs	r0, #6
   d49e0:	f7ff fc8a 	bl	d42f8 <bbzvm_seterror>
   d49e4:	e0be      	b.n	d4b64 <bbzvm_callc+0x1b4>
    uint16_t argn = (uint16_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d49e6:	2000      	movs	r0, #0
   d49e8:	f7ff fd5e 	bl	d44a8 <bbzvm_stack_at>
   d49ec:	f001 fb78 	bl	d60e0 <bbzheap_obj_at>
   d49f0:	f9b0 7001 	ldrsh.w	r7, [r0, #1]
    bbzvm_pop();
   d49f4:	f7ff fd66 	bl	d44c4 <bbzvm_pop>
    /* Make sure the stack has enough elements */
    bbzvm_assert_stack(argn+1);
   d49f8:	f8d8 3000 	ldr.w	r3, [r8]
   d49fc:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4a00:	3301      	adds	r3, #1

void bbzvm_callc() {
    /* Get argument number and pop it */
    bbzvm_assert_stack(1);
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
    uint16_t argn = (uint16_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d4a02:	b2be      	uxth	r6, r7
    bbzvm_pop();
    /* Make sure the stack has enough elements */
    bbzvm_assert_stack(argn+1);
   d4a04:	b29b      	uxth	r3, r3
   d4a06:	429e      	cmp	r6, r3

void bbzvm_callc() {
    /* Get argument number and pop it */
    bbzvm_assert_stack(1);
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
    uint16_t argn = (uint16_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d4a08:	b23c      	sxth	r4, r7
    bbzvm_pop();
    /* Make sure the stack has enough elements */
    bbzvm_assert_stack(argn+1);
   d4a0a:	dadc      	bge.n	d49c6 <bbzvm_callc+0x16>
    /* Make sure the closure is where expected */
    bbzvm_assert_type(bbzvm_stack_at(argn), BBZTYPE_CLOSURE);
   d4a0c:	4620      	mov	r0, r4
   d4a0e:	f7ff fd4b 	bl	d44a8 <bbzvm_stack_at>
   d4a12:	f001 fb65 	bl	d60e0 <bbzheap_obj_at>
   d4a16:	f890 9000 	ldrb.w	r9, [r0]
   d4a1a:	f009 0907 	and.w	r9, r9, #7
   d4a1e:	f1b9 0f05 	cmp.w	r9, #5
   d4a22:	d1dc      	bne.n	d49de <bbzvm_callc+0x2e>
    bbzobj_t* c = bbzheap_obj_at(bbzvm_stack_at(argn));
   d4a24:	4620      	mov	r0, r4
   d4a26:	f7ff fd3f 	bl	d44a8 <bbzvm_stack_at>
   d4a2a:	f001 fb59 	bl	d60e0 <bbzheap_obj_at>
    /* Make sure that the data about lambda closures is correct */
    bbzvm_assert_exec(!(bbztype_isclosurelambda(*c) && ((c->l.value.ref) >= bbzdarray_size(vm->flist))),
   d4a2e:	f990 3000 	ldrsb.w	r3, [r0]
   d4a32:	2b00      	cmp	r3, #0
    bbzvm_pop();
    /* Make sure the stack has enough elements */
    bbzvm_assert_stack(argn+1);
    /* Make sure the closure is where expected */
    bbzvm_assert_type(bbzvm_stack_at(argn), BBZTYPE_CLOSURE);
    bbzobj_t* c = bbzheap_obj_at(bbzvm_stack_at(argn));
   d4a34:	4604      	mov	r4, r0
    /* Make sure that the data about lambda closures is correct */
    bbzvm_assert_exec(!(bbztype_isclosurelambda(*c) && ((c->l.value.ref) >= bbzdarray_size(vm->flist))),
   d4a36:	da0b      	bge.n	d4a50 <bbzvm_callc+0xa0>
   d4a38:	f8d8 3000 	ldr.w	r3, [r8]
   d4a3c:	f890 a001 	ldrb.w	sl, [r0, #1]
   d4a40:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4a44:	f002 fbf4 	bl	d7230 <bbzdarray_size>
   d4a48:	4582      	cmp	sl, r0
   d4a4a:	d301      	bcc.n	d4a50 <bbzvm_callc+0xa0>
   d4a4c:	4648      	mov	r0, r9
   d4a4e:	e7c7      	b.n	d49e0 <bbzvm_callc+0x30>
                      BBZVM_ERROR_FLIST);
    /* Keep a refererence to the old local symbol list */
    bbzheap_idx_t oldLsyms = vm->lsyms;
   d4a50:	682b      	ldr	r3, [r5, #0]
    /* Create a new local symbol list copying the parent's */
    if (!bbztype_isclosurelambda(*c) ||
   d4a52:	f994 2000 	ldrsb.w	r2, [r4]
    bbzobj_t* c = bbzheap_obj_at(bbzvm_stack_at(argn));
    /* Make sure that the data about lambda closures is correct */
    bbzvm_assert_exec(!(bbztype_isclosurelambda(*c) && ((c->l.value.ref) >= bbzdarray_size(vm->flist))),
                      BBZVM_ERROR_FLIST);
    /* Keep a refererence to the old local symbol list */
    bbzheap_idx_t oldLsyms = vm->lsyms;
   d4a56:	4619      	mov	r1, r3
    /* Create a new local symbol list copying the parent's */
    if (!bbztype_isclosurelambda(*c) ||
   d4a58:	2a00      	cmp	r2, #0
    bbzobj_t* c = bbzheap_obj_at(bbzvm_stack_at(argn));
    /* Make sure that the data about lambda closures is correct */
    bbzvm_assert_exec(!(bbztype_isclosurelambda(*c) && ((c->l.value.ref) >= bbzdarray_size(vm->flist))),
                      BBZVM_ERROR_FLIST);
    /* Keep a refererence to the old local symbol list */
    bbzheap_idx_t oldLsyms = vm->lsyms;
   d4a5a:	f831 8f0c 	ldrh.w	r8, [r1, #12]!
    /* Create a new local symbol list copying the parent's */
    if (!bbztype_isclosurelambda(*c) ||
   d4a5e:	da02      	bge.n	d4a66 <bbzvm_callc+0xb6>
        (c->l.value.actrec) == BBZHEAP_CLOSURE_DFLT_ACTREC) {
   d4a60:	78a0      	ldrb	r0, [r4, #2]
    bbzvm_assert_exec(!(bbztype_isclosurelambda(*c) && ((c->l.value.ref) >= bbzdarray_size(vm->flist))),
                      BBZVM_ERROR_FLIST);
    /* Keep a refererence to the old local symbol list */
    bbzheap_idx_t oldLsyms = vm->lsyms;
    /* Create a new local symbol list copying the parent's */
    if (!bbztype_isclosurelambda(*c) ||
   d4a62:	28ff      	cmp	r0, #255	; 0xff
   d4a64:	d101      	bne.n	d4a6a <bbzvm_callc+0xba>
        (c->l.value.actrec) == BBZHEAP_CLOSURE_DFLT_ACTREC) {
        bbzvm_assert_exec(bbzdarray_clone(vm->dflt_actrec, &vm->lsyms), BBZVM_ERROR_MEM);
   d4a66:	f8b3 045a 	ldrh.w	r0, [r3, #1114]	; 0x45a
   d4a6a:	f002 fc11 	bl	d7290 <bbzdarray_clone>
   d4a6e:	b908      	cbnz	r0, d4a74 <bbzvm_callc+0xc4>
   d4a70:	200d      	movs	r0, #13
   d4a72:	e7b5      	b.n	d49e0 <bbzvm_callc+0x30>
    }
    else {
        bbzvm_assert_exec(bbzdarray_clone(c->l.value.actrec, &vm->lsyms), BBZVM_ERROR_MEM);
    }
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->lsyms));
   d4a74:	682b      	ldr	r3, [r5, #0]
   d4a76:	8998      	ldrh	r0, [r3, #12]
   d4a78:	f001 fb32 	bl	d60e0 <bbzheap_obj_at>
   d4a7c:	7803      	ldrb	r3, [r0, #0]
   d4a7e:	f043 0310 	orr.w	r3, r3, #16
   d4a82:	7003      	strb	r3, [r0, #0]
    /* Add function arguments to the local symbols */
    /* and */
    /* Get rid of the function arguments */
    uint16_t i;
    for (i = argn; i; --i) {
   d4a84:	f8ad 7006 	strh.w	r7, [sp, #6]
   d4a88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4a8c:	b170      	cbz	r0, d4aac <bbzvm_callc+0xfc>
        bbzdarray_push(vm->lsyms, bbzvm_stack_at(i - (uint16_t)1));
   d4a8e:	3801      	subs	r0, #1
   d4a90:	b200      	sxth	r0, r0
   d4a92:	f7ff fd09 	bl	d44a8 <bbzvm_stack_at>
   d4a96:	682b      	ldr	r3, [r5, #0]
   d4a98:	4601      	mov	r1, r0
   d4a9a:	8998      	ldrh	r0, [r3, #12]
   d4a9c:	f002 fb28 	bl	d70f0 <bbzdarray_push>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->lsyms));
    /* Add function arguments to the local symbols */
    /* and */
    /* Get rid of the function arguments */
    uint16_t i;
    for (i = argn; i; --i) {
   d4aa0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4aa4:	3b01      	subs	r3, #1
   d4aa6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4aaa:	e7ed      	b.n	d4a88 <bbzvm_callc+0xd8>
        bbzdarray_push(vm->lsyms, bbzvm_stack_at(i - (uint16_t)1));
    }
    vm->stackptr -= argn + 1; // Get rid of the closure's reference on the stack.
   d4aac:	682a      	ldr	r2, [r5, #0]
   d4aae:	f9b2 359b 	ldrsh.w	r3, [r2, #1435]	; 0x59b
   d4ab2:	3b01      	subs	r3, #1
   d4ab4:	1b9b      	subs	r3, r3, r6
   d4ab6:	f8a2 359b 	strh.w	r3, [r2, #1435]	; 0x59b
    /* Recover and pop the self table */
    if (!bbztype_isclosurelambda(*c) ||
        c->l.value.actrec == BBZHEAP_CLOSURE_DFLT_ACTREC ||
   d4aba:	f994 3000 	ldrsb.w	r3, [r4]
   d4abe:	2b00      	cmp	r3, #0
   d4ac0:	da46      	bge.n	d4b50 <bbzvm_callc+0x1a0>
   d4ac2:	78a0      	ldrb	r0, [r4, #2]
    for (i = argn; i; --i) {
        bbzdarray_push(vm->lsyms, bbzvm_stack_at(i - (uint16_t)1));
    }
    vm->stackptr -= argn + 1; // Get rid of the closure's reference on the stack.
    /* Recover and pop the self table */
    if (!bbztype_isclosurelambda(*c) ||
   d4ac4:	28ff      	cmp	r0, #255	; 0xff
   d4ac6:	d043      	beq.n	d4b50 <bbzvm_callc+0x1a0>
        c->l.value.actrec == BBZHEAP_CLOSURE_DFLT_ACTREC ||
        !bbztype_darray_hasself(*bbzheap_obj_at(c->l.value.actrec))) {
   d4ac8:	f001 fb0a 	bl	d60e0 <bbzheap_obj_at>
        bbzdarray_push(vm->lsyms, bbzvm_stack_at(i - (uint16_t)1));
    }
    vm->stackptr -= argn + 1; // Get rid of the closure's reference on the stack.
    /* Recover and pop the self table */
    if (!bbztype_isclosurelambda(*c) ||
        c->l.value.actrec == BBZHEAP_CLOSURE_DFLT_ACTREC ||
   d4acc:	f990 3000 	ldrsb.w	r3, [r0]
   d4ad0:	2b00      	cmp	r3, #0
   d4ad2:	da3d      	bge.n	d4b50 <bbzvm_callc+0x1a0>
        !bbztype_darray_hasself(*bbzheap_obj_at(c->l.value.actrec))) {
        bbzdarray_set(vm->lsyms, 0, bbzvm_stack_at(0));
    }
    bbzvm_pop();
   d4ad4:	f7ff fcf6 	bl	d44c4 <bbzvm_pop>
    /* Push return address */
    bbzvm_pushi(vm->pc);
   d4ad8:	682b      	ldr	r3, [r5, #0]
   d4ada:	4e24      	ldr	r6, [pc, #144]	; (d4b6c <bbzvm_callc+0x1bc>)
   d4adc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
   d4ae0:	f7ff fe0d 	bl	d46fe <bbzvm_pushi>
    bbzvm_assert_state();
   d4ae4:	682b      	ldr	r3, [r5, #0]
   d4ae6:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d4aea:	2b04      	cmp	r3, #4
   d4aec:	d03a      	beq.n	d4b64 <bbzvm_callc+0x1b4>
    /* Push old local symbol list */
    bbzvm_push(oldLsyms);
   d4aee:	4640      	mov	r0, r8
   d4af0:	f7ff fd78 	bl	d45e4 <bbzvm_push>
    bbzvm_assert_state();
   d4af4:	6833      	ldr	r3, [r6, #0]
   d4af6:	f893 2594 	ldrb.w	r2, [r3, #1428]	; 0x594
   d4afa:	2a04      	cmp	r2, #4
   d4afc:	d032      	beq.n	d4b64 <bbzvm_callc+0x1b4>
    /* Push block pointer */
    bbzvm_pushi(vm->blockptr);
   d4afe:	f9b3 059d 	ldrsh.w	r0, [r3, #1437]	; 0x59d
   d4b02:	f7ff fdfc 	bl	d46fe <bbzvm_pushi>
    bbzvm_assert_state();
   d4b06:	6833      	ldr	r3, [r6, #0]
   d4b08:	f893 2594 	ldrb.w	r2, [r3, #1428]	; 0x594
   d4b0c:	2a04      	cmp	r2, #4
   d4b0e:	d029      	beq.n	d4b64 <bbzvm_callc+0x1b4>
    vm->blockptr = vm->stackptr;
   d4b10:	f9b3 259b 	ldrsh.w	r2, [r3, #1435]	; 0x59b
   d4b14:	f8a3 259d 	strh.w	r2, [r3, #1437]	; 0x59d
    /* Jump to/execute the function */
    uintptr_t x;
    if (bbztype_isclosurelambda(*c)) {
   d4b18:	f994 2000 	ldrsb.w	r2, [r4]
   d4b1c:	2a00      	cmp	r2, #0
   d4b1e:	da0d      	bge.n	d4b3c <bbzvm_callc+0x18c>
        bbzdarray_get(vm->flist, c->l.value.ref, &i);
   d4b20:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4b24:	7861      	ldrb	r1, [r4, #1]
   d4b26:	f10d 0206 	add.w	r2, sp, #6
   d4b2a:	f002 fa51 	bl	d6fd0 <bbzdarray_get>
        x = bbzheap_obj_at((uint16_t)i)->biggest.value;
   d4b2e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4b32:	f001 fad5 	bl	d60e0 <bbzheap_obj_at>
   d4b36:	f8d0 3001 	ldr.w	r3, [r0, #1]
   d4b3a:	e001      	b.n	d4b40 <bbzvm_callc+0x190>
    }
    else {
        x = c->biggest.value;
   d4b3c:	f8d4 3001 	ldr.w	r3, [r4, #1]
    }
    if (bbztype_isclosurenative(*c)) {
   d4b40:	7822      	ldrb	r2, [r4, #0]
   d4b42:	0652      	lsls	r2, r2, #25
   d4b44:	d502      	bpl.n	d4b4c <bbzvm_callc+0x19c>
        vm->pc = (bbzpc_t)x;
   d4b46:	682a      	ldr	r2, [r5, #0]
   d4b48:	8153      	strh	r3, [r2, #10]
   d4b4a:	e00b      	b.n	d4b64 <bbzvm_callc+0x1b4>
    }
    else {
        ((bbzvm_funp)x)();
   d4b4c:	4798      	blx	r3
   d4b4e:	e009      	b.n	d4b64 <bbzvm_callc+0x1b4>
    vm->stackptr -= argn + 1; // Get rid of the closure's reference on the stack.
    /* Recover and pop the self table */
    if (!bbztype_isclosurelambda(*c) ||
        c->l.value.actrec == BBZHEAP_CLOSURE_DFLT_ACTREC ||
        !bbztype_darray_hasself(*bbzheap_obj_at(c->l.value.actrec))) {
        bbzdarray_set(vm->lsyms, 0, bbzvm_stack_at(0));
   d4b50:	2000      	movs	r0, #0
   d4b52:	f7ff fca9 	bl	d44a8 <bbzvm_stack_at>
   d4b56:	682b      	ldr	r3, [r5, #0]
   d4b58:	4602      	mov	r2, r0
   d4b5a:	2100      	movs	r1, #0
   d4b5c:	8998      	ldrh	r0, [r3, #12]
   d4b5e:	f002 fa87 	bl	d7070 <bbzdarray_set>
   d4b62:	e7b7      	b.n	d4ad4 <bbzvm_callc+0x124>
        vm->pc = (bbzpc_t)x;
    }
    else {
        ((bbzvm_funp)x)();
    }
}
   d4b64:	b002      	add	sp, #8
   d4b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4b6a:	bf00      	nop
   d4b6c:	2003e3f4 	.word	0x2003e3f4

000d4b70 <bbzvm_pushf>:
}

/****************************************/
/****************************************/

void bbzvm_pushf(bbzfloat v) {
   d4b70:	b508      	push	{r3, lr}
    bbzvm_push(bbzfloat_new(v));
   d4b72:	f7ff fc4a 	bl	d440a <bbzfloat_new>
}
   d4b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/****************************************/
/****************************************/

void bbzvm_pushf(bbzfloat v) {
    bbzvm_push(bbzfloat_new(v));
   d4b7a:	f7ff bd33 	b.w	d45e4 <bbzvm_push>

000d4b7e <bbzvm_pushs>:
}

/****************************************/
/****************************************/

void bbzvm_pushs(uint16_t strid) {
   d4b7e:	b508      	push	{r3, lr}
    bbzvm_push(bbzstring_get(strid));
   d4b80:	f7ff fc58 	bl	d4434 <bbzstring_get>
}
   d4b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/****************************************/
/****************************************/

void bbzvm_pushs(uint16_t strid) {
    bbzvm_push(bbzstring_get(strid));
   d4b88:	f7ff bd2c 	b.w	d45e4 <bbzvm_push>

000d4b8c <bbzvm_pushl>:
}

/****************************************/
/****************************************/

void bbzvm_pushl(uint16_t addr) {
   d4b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4b8e:	4604      	mov	r4, r0
    bbzheap_idx_t o;
    bbzvm_assert_mem_alloc(BBZTYPE_CLOSURE, &o);
   d4b90:	a901      	add	r1, sp, #4
   d4b92:	2005      	movs	r0, #5
   d4b94:	f001 fb26 	bl	d61e4 <bbzheap_obj_alloc>
   d4b98:	b918      	cbnz	r0, d4ba2 <bbzvm_pushl+0x16>
   d4b9a:	200d      	movs	r0, #13
   d4b9c:	f7ff fbac 	bl	d42f8 <bbzvm_seterror>
   d4ba0:	e053      	b.n	d4c4a <bbzvm_pushl+0xbe>
    bbzclosure_make_native(*bbzheap_obj_at(o));
   d4ba2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4ba6:	f001 fa9b 	bl	d60e0 <bbzheap_obj_at>
   d4baa:	7803      	ldrb	r3, [r0, #0]
   d4bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4bb0:	7003      	strb	r3, [r0, #0]
    bbzclosure_make_lambda(*bbzheap_obj_at(o));
   d4bb2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4bb6:	f001 fa93 	bl	d60e0 <bbzheap_obj_at>
   d4bba:	7803      	ldrb	r3, [r0, #0]
   d4bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4bc0:	7003      	strb	r3, [r0, #0]
    bbzheap_idx_t idx;
    bbzvm_assert_mem_alloc(BBZTYPE_INT, &idx);
   d4bc2:	f10d 0106 	add.w	r1, sp, #6
   d4bc6:	2001      	movs	r0, #1
   d4bc8:	f001 fb0c 	bl	d61e4 <bbzheap_obj_alloc>
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	d0e4      	beq.n	d4b9a <bbzvm_pushl+0xe>
    bbzheap_obj_at(idx)->i.value = addr;
   d4bd0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4bd4:	f001 fa84 	bl	d60e0 <bbzheap_obj_at>
   d4bd8:	f8a0 4001 	strh.w	r4, [r0, #1]
    addr = bbzdarray_find(vm->flist, bbztype_cmp, idx);
   d4bdc:	4c1c      	ldr	r4, [pc, #112]	; (d4c50 <bbzvm_pushl+0xc4>)
   d4bde:	491d      	ldr	r1, [pc, #116]	; (d4c54 <bbzvm_pushl+0xc8>)
   d4be0:	6823      	ldr	r3, [r4, #0]
   d4be2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4be6:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4bea:	f002 fb8b 	bl	d7304 <bbzdarray_find>
    /* If the function isn't in the list yet, ... */
    if (addr == bbzdarray_size(vm->flist)) {
   d4bee:	6823      	ldr	r3, [r4, #0]
    bbzclosure_make_native(*bbzheap_obj_at(o));
    bbzclosure_make_lambda(*bbzheap_obj_at(o));
    bbzheap_idx_t idx;
    bbzvm_assert_mem_alloc(BBZTYPE_INT, &idx);
    bbzheap_obj_at(idx)->i.value = addr;
    addr = bbzdarray_find(vm->flist, bbztype_cmp, idx);
   d4bf0:	4605      	mov	r5, r0
    /* If the function isn't in the list yet, ... */
    if (addr == bbzdarray_size(vm->flist)) {
   d4bf2:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4bf6:	f002 fb1b 	bl	d7230 <bbzdarray_size>
   d4bfa:	4285      	cmp	r5, r0
   d4bfc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d4c00:	d106      	bne.n	d4c10 <bbzvm_pushl+0x84>
        /* ... Add the bbzuserdata_t to the function list */
        bbzvm_assert_exec(bbzdarray_push(vm->flist, idx), BBZVM_ERROR_MEM);
   d4c02:	6823      	ldr	r3, [r4, #0]
   d4c04:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4c08:	f002 fa72 	bl	d70f0 <bbzdarray_push>
   d4c0c:	b938      	cbnz	r0, d4c1e <bbzvm_pushl+0x92>
   d4c0e:	e7c4      	b.n	d4b9a <bbzvm_pushl+0xe>
    }
    else {
        /* ... else, Free the memory used by the buffer */
        bbzheap_obj_makeinvalid(*bbzheap_obj_at(idx));
   d4c10:	4608      	mov	r0, r1
   d4c12:	f001 fa65 	bl	d60e0 <bbzheap_obj_at>
   d4c16:	7803      	ldrb	r3, [r0, #0]
   d4c18:	f023 0308 	bic.w	r3, r3, #8
   d4c1c:	7003      	strb	r3, [r0, #0]
    }
    bbzheap_obj_at(o)->l.value.ref = (uint8_t)addr;
   d4c1e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4c22:	f001 fa5d 	bl	d60e0 <bbzheap_obj_at>
   d4c26:	7045      	strb	r5, [r0, #1]
    if (vm->lsyms) {
   d4c28:	6823      	ldr	r3, [r4, #0]
   d4c2a:	899c      	ldrh	r4, [r3, #12]
   d4c2c:	b14c      	cbz	r4, d4c42 <bbzvm_pushl+0xb6>
        bbzvm_assert_exec(
   d4c2e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4c32:	f001 fa55 	bl	d60e0 <bbzheap_obj_at>
   d4c36:	1c81      	adds	r1, r0, #2
   d4c38:	4620      	mov	r0, r4
   d4c3a:	f002 fbb1 	bl	d73a0 <bbzdarray_lambda_alloc>
   d4c3e:	2800      	cmp	r0, #0
   d4c40:	d0ab      	beq.n	d4b9a <bbzvm_pushl+0xe>
                bbzdarray_lambda_alloc(vm->lsyms, &bbzheap_obj_at(o)->l.value.actrec),
                BBZVM_ERROR_MEM);
    }

    bbzvm_push(o);
   d4c42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4c46:	f7ff fccd 	bl	d45e4 <bbzvm_push>
}
   d4c4a:	b003      	add	sp, #12
   d4c4c:	bd30      	pop	{r4, r5, pc}
   d4c4e:	bf00      	nop
   d4c50:	2003e3f4 	.word	0x2003e3f4
   d4c54:	000d5ebd 	.word	0x000d5ebd

000d4c58 <bbzvm_tput>:

/****************************************/
/****************************************/

void bbzvm_tput() {
   d4c58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    // Get value, key and table, and pop them.
    bbzvm_assert_stack(3);
   d4c5c:	4c76      	ldr	r4, [pc, #472]	; (d4e38 <bbzvm_tput+0x1e0>)
   d4c5e:	6823      	ldr	r3, [r4, #0]
   d4c60:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4c64:	3301      	adds	r3, #1
   d4c66:	b29b      	uxth	r3, r3
   d4c68:	2b02      	cmp	r3, #2
   d4c6a:	d801      	bhi.n	d4c70 <bbzvm_tput+0x18>
   d4c6c:	2002      	movs	r0, #2
   d4c6e:	e06b      	b.n	d4d48 <bbzvm_tput+0xf0>
    bbzheap_idx_t v = bbzvm_stack_at(0);
   d4c70:	2000      	movs	r0, #0
   d4c72:	f7ff fc19 	bl	d44a8 <bbzvm_stack_at>
   d4c76:	f8ad 0002 	strh.w	r0, [sp, #2]
    bbzheap_idx_t k = bbzvm_stack_at(1);
   d4c7a:	2001      	movs	r0, #1
   d4c7c:	f7ff fc14 	bl	d44a8 <bbzvm_stack_at>
   d4c80:	4680      	mov	r8, r0
    bbzheap_idx_t t = bbzvm_stack_at(2);
   d4c82:	2002      	movs	r0, #2
   d4c84:	f7ff fc10 	bl	d44a8 <bbzvm_stack_at>
   d4c88:	4607      	mov	r7, r0
    bbzvm_assert_type(t, BBZTYPE_TABLE);
   d4c8a:	f001 fa29 	bl	d60e0 <bbzheap_obj_at>
   d4c8e:	7803      	ldrb	r3, [r0, #0]
   d4c90:	f003 0307 	and.w	r3, r3, #7
   d4c94:	2b04      	cmp	r3, #4
   d4c96:	d001      	beq.n	d4c9c <bbzvm_tput+0x44>
   d4c98:	2006      	movs	r0, #6
   d4c9a:	e055      	b.n	d4d48 <bbzvm_tput+0xf0>
    bbzvm_pop();
   d4c9c:	f7ff fc12 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d4ca0:	f7ff fc10 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d4ca4:	f7ff fc0e 	bl	d44c4 <bbzvm_pop>
    bbzvm_assert_state();
   d4ca8:	6823      	ldr	r3, [r4, #0]
   d4caa:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d4cae:	2b04      	cmp	r3, #4
   d4cb0:	f000 80bf 	beq.w	d4e32 <bbzvm_tput+0x1da>

    bbzobj_t* vObj = bbzheap_obj_at(v);
   d4cb4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d4cb8:	f001 fa12 	bl	d60e0 <bbzheap_obj_at>
    if (bbztype_isclosure(*vObj) &&
   d4cbc:	7803      	ldrb	r3, [r0, #0]
        bbztype_isclosurelambda(*vObj) &&
        vObj->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC &&
   d4cbe:	f003 0207 	and.w	r2, r3, #7
   d4cc2:	2a05      	cmp	r2, #5
    bbzvm_pop();
    bbzvm_pop();
    bbzvm_pop();
    bbzvm_assert_state();

    bbzobj_t* vObj = bbzheap_obj_at(v);
   d4cc4:	4605      	mov	r5, r0
    if (bbztype_isclosure(*vObj) &&
        bbztype_isclosurelambda(*vObj) &&
        vObj->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC &&
   d4cc6:	d142      	bne.n	d4d4e <bbzvm_tput+0xf6>
    bbzvm_pop();
    bbzvm_pop();
    bbzvm_assert_state();

    bbzobj_t* vObj = bbzheap_obj_at(v);
    if (bbztype_isclosure(*vObj) &&
   d4cc8:	061b      	lsls	r3, r3, #24
   d4cca:	d540      	bpl.n	d4d4e <bbzvm_tput+0xf6>
        bbztype_isclosurelambda(*vObj) &&
        vObj->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC &&
   d4ccc:	7880      	ldrb	r0, [r0, #2]
    bbzvm_pop();
    bbzvm_assert_state();

    bbzobj_t* vObj = bbzheap_obj_at(v);
    if (bbztype_isclosure(*vObj) &&
        bbztype_isclosurelambda(*vObj) &&
   d4cce:	28ff      	cmp	r0, #255	; 0xff
   d4cd0:	d03d      	beq.n	d4d4e <bbzvm_tput+0xf6>
        vObj->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC &&
        !bbztype_darray_hasself(*bbzheap_obj_at(vObj->l.value.actrec))) {
   d4cd2:	f001 fa05 	bl	d60e0 <bbzheap_obj_at>
    bbzvm_assert_state();

    bbzobj_t* vObj = bbzheap_obj_at(v);
    if (bbztype_isclosure(*vObj) &&
        bbztype_isclosurelambda(*vObj) &&
        vObj->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC &&
   d4cd6:	f990 3000 	ldrsb.w	r3, [r0]
   d4cda:	2b00      	cmp	r3, #0
   d4cdc:	db37      	blt.n	d4d4e <bbzvm_tput+0xf6>
        !bbztype_darray_hasself(*bbzheap_obj_at(vObj->l.value.actrec))) {
        // Method call
        bbzheap_idx_t o, ar, o2;
        bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o);
   d4cde:	a901      	add	r1, sp, #4
   d4ce0:	2006      	movs	r0, #6
   d4ce2:	f001 fa7f 	bl	d61e4 <bbzheap_obj_alloc>
   d4ce6:	2800      	cmp	r0, #0
   d4ce8:	d039      	beq.n	d4d5e <bbzvm_tput+0x106>
        bbzheap_obj_copy(v, o);
   d4cea:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4cee:	f001 f9f7 	bl	d60e0 <bbzheap_obj_at>
   d4cf2:	4606      	mov	r6, r0
   d4cf4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d4cf8:	f001 f9f2 	bl	d60e0 <bbzheap_obj_at>
   d4cfc:	6803      	ldr	r3, [r0, #0]
   d4cfe:	6033      	str	r3, [r6, #0]
   d4d00:	7903      	ldrb	r3, [r0, #4]
   d4d02:	7133      	strb	r3, [r6, #4]
        bbzclosure_make_lambda(*bbzheap_obj_at(o));
   d4d04:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4d08:	f001 f9ea 	bl	d60e0 <bbzheap_obj_at>
   d4d0c:	7803      	ldrb	r3, [r0, #0]
   d4d0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4d12:	7003      	strb	r3, [r0, #0]

        bbzvm_assert_mem_alloc(bbztype_isclosurenative(*vObj) ? BBZTYPE_INT : BBZTYPE_USERDATA, &v);
   d4d14:	782b      	ldrb	r3, [r5, #0]
   d4d16:	f013 0f40 	tst.w	r3, #64	; 0x40
   d4d1a:	bf14      	ite	ne
   d4d1c:	2001      	movne	r0, #1
   d4d1e:	2006      	moveq	r0, #6
   d4d20:	f10d 0102 	add.w	r1, sp, #2
   d4d24:	f001 fa5e 	bl	d61e4 <bbzheap_obj_alloc>
   d4d28:	b1c8      	cbz	r0, d4d5e <bbzvm_tput+0x106>
        if(bbztype_isclosurelambda(*vObj)) {
   d4d2a:	f995 3000 	ldrsb.w	r3, [r5]
   d4d2e:	2b00      	cmp	r3, #0
   d4d30:	da26      	bge.n	d4d80 <bbzvm_tput+0x128>
            ar = vObj->l.value.actrec;
            bbzvm_assert_exec(bbzdarray_get(vm->flist, (uint16_t)vObj->l.value.ref, &o2), BBZVM_ERROR_FLIST);
   d4d32:	6823      	ldr	r3, [r4, #0]
   d4d34:	7869      	ldrb	r1, [r5, #1]
   d4d36:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
        bbzheap_obj_copy(v, o);
        bbzclosure_make_lambda(*bbzheap_obj_at(o));

        bbzvm_assert_mem_alloc(bbztype_isclosurenative(*vObj) ? BBZTYPE_INT : BBZTYPE_USERDATA, &v);
        if(bbztype_isclosurelambda(*vObj)) {
            ar = vObj->l.value.actrec;
   d4d3a:	78ae      	ldrb	r6, [r5, #2]
            bbzvm_assert_exec(bbzdarray_get(vm->flist, (uint16_t)vObj->l.value.ref, &o2), BBZVM_ERROR_FLIST);
   d4d3c:	f10d 0206 	add.w	r2, sp, #6
   d4d40:	f002 f946 	bl	d6fd0 <bbzdarray_get>
   d4d44:	b968      	cbnz	r0, d4d62 <bbzvm_tput+0x10a>
   d4d46:	2005      	movs	r0, #5
        bbzheap_obj_at(o)->l.value.ref = (uint8_t)o2;
        bbzvm_assert_exec(bbzdarray_set(bbzheap_obj_at(o)->l.value.actrec, 0, t), BBZVM_ERROR_FLIST);
        bbzvm_assert_exec(bbztable_set(t, k, o), BBZVM_ERROR_MEM);
    }
    else {
        bbzvm_assert_exec(bbztable_set(t, k, v), BBZVM_ERROR_MEM);
   d4d48:	f7ff fad6 	bl	d42f8 <bbzvm_seterror>
   d4d4c:	e071      	b.n	d4e32 <bbzvm_tput+0x1da>
   d4d4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                bbzdarray_lambda_alloc(ar, &bbzheap_obj_at(o)->l.value.actrec),
                BBZVM_ERROR_MEM);
        bbztype_darray_markself(*bbzheap_obj_at(bbzheap_obj_at(o)->l.value.actrec));
        bbzheap_obj_at(o)->l.value.ref = (uint8_t)o2;
        bbzvm_assert_exec(bbzdarray_set(bbzheap_obj_at(o)->l.value.actrec, 0, t), BBZVM_ERROR_FLIST);
        bbzvm_assert_exec(bbztable_set(t, k, o), BBZVM_ERROR_MEM);
   d4d52:	4641      	mov	r1, r8
   d4d54:	4638      	mov	r0, r7
   d4d56:	f001 fd4b 	bl	d67f0 <bbztable_set>
   d4d5a:	2800      	cmp	r0, #0
   d4d5c:	d169      	bne.n	d4e32 <bbzvm_tput+0x1da>
    }
    else {
        bbzvm_assert_exec(bbztable_set(t, k, v), BBZVM_ERROR_MEM);
   d4d5e:	200d      	movs	r0, #13
   d4d60:	e7f2      	b.n	d4d48 <bbzvm_tput+0xf0>

        bbzvm_assert_mem_alloc(bbztype_isclosurenative(*vObj) ? BBZTYPE_INT : BBZTYPE_USERDATA, &v);
        if(bbztype_isclosurelambda(*vObj)) {
            ar = vObj->l.value.actrec;
            bbzvm_assert_exec(bbzdarray_get(vm->flist, (uint16_t)vObj->l.value.ref, &o2), BBZVM_ERROR_FLIST);
            bbzheap_obj_at(v)->u.value = bbzheap_obj_at(o2)->u.value;
   d4d62:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   d4d66:	f001 f9bb 	bl	d60e0 <bbzheap_obj_at>
   d4d6a:	4605      	mov	r5, r0
   d4d6c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4d70:	f001 f9b6 	bl	d60e0 <bbzheap_obj_at>
   d4d74:	f8d0 3001 	ldr.w	r3, [r0, #1]
   d4d78:	f8c5 3001 	str.w	r3, [r5, #1]
        bbzheap_obj_copy(v, o);
        bbzclosure_make_lambda(*bbzheap_obj_at(o));

        bbzvm_assert_mem_alloc(bbztype_isclosurenative(*vObj) ? BBZTYPE_INT : BBZTYPE_USERDATA, &v);
        if(bbztype_isclosurelambda(*vObj)) {
            ar = vObj->l.value.actrec;
   d4d7c:	b2b6      	uxth	r6, r6
   d4d7e:	e00a      	b.n	d4d96 <bbzvm_tput+0x13e>
            bbzvm_assert_exec(bbzdarray_get(vm->flist, (uint16_t)vObj->l.value.ref, &o2), BBZVM_ERROR_FLIST);
            bbzheap_obj_at(v)->u.value = bbzheap_obj_at(o2)->u.value;
        }
        else {
            ar = vm->dflt_actrec;
   d4d80:	6823      	ldr	r3, [r4, #0]
            bbzheap_obj_at(v)->c.value = vObj->c.value;
   d4d82:	f8bd 0002 	ldrh.w	r0, [sp, #2]
            ar = vObj->l.value.actrec;
            bbzvm_assert_exec(bbzdarray_get(vm->flist, (uint16_t)vObj->l.value.ref, &o2), BBZVM_ERROR_FLIST);
            bbzheap_obj_at(v)->u.value = bbzheap_obj_at(o2)->u.value;
        }
        else {
            ar = vm->dflt_actrec;
   d4d86:	f8b3 645a 	ldrh.w	r6, [r3, #1114]	; 0x45a
            bbzheap_obj_at(v)->c.value = vObj->c.value;
   d4d8a:	f001 f9a9 	bl	d60e0 <bbzheap_obj_at>
   d4d8e:	f8d5 3001 	ldr.w	r3, [r5, #1]
   d4d92:	f8c0 3001 	str.w	r3, [r0, #1]
        }
        o2 = bbzdarray_find(vm->flist, bbztype_cmp, v);
   d4d96:	6823      	ldr	r3, [r4, #0]
   d4d98:	4928      	ldr	r1, [pc, #160]	; (d4e3c <bbzvm_tput+0x1e4>)
   d4d9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   d4d9e:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4da2:	f002 faaf 	bl	d7304 <bbzdarray_find>
        if (o2 == bbzdarray_size(vm->flist)) {
   d4da6:	6823      	ldr	r3, [r4, #0]
        }
        else {
            ar = vm->dflt_actrec;
            bbzheap_obj_at(v)->c.value = vObj->c.value;
        }
        o2 = bbzdarray_find(vm->flist, bbztype_cmp, v);
   d4da8:	f8ad 0006 	strh.w	r0, [sp, #6]
        if (o2 == bbzdarray_size(vm->flist)) {
   d4dac:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4db0:	f002 fa3e 	bl	d7230 <bbzdarray_size>
   d4db4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4db8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   d4dbc:	4283      	cmp	r3, r0
   d4dbe:	d107      	bne.n	d4dd0 <bbzvm_tput+0x178>
            bbzvm_assert_exec(bbzdarray_push(vm->flist, v), BBZVM_ERROR_MEM);
   d4dc0:	4b1d      	ldr	r3, [pc, #116]	; (d4e38 <bbzvm_tput+0x1e0>)
   d4dc2:	681b      	ldr	r3, [r3, #0]
   d4dc4:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d4dc8:	f002 f992 	bl	d70f0 <bbzdarray_push>
   d4dcc:	b938      	cbnz	r0, d4dde <bbzvm_tput+0x186>
   d4dce:	e7c6      	b.n	d4d5e <bbzvm_tput+0x106>
        }
        else {
            bbzheap_obj_makeinvalid(*bbzheap_obj_at(v));
   d4dd0:	4608      	mov	r0, r1
   d4dd2:	f001 f985 	bl	d60e0 <bbzheap_obj_at>
   d4dd6:	7803      	ldrb	r3, [r0, #0]
   d4dd8:	f023 0308 	bic.w	r3, r3, #8
   d4ddc:	7003      	strb	r3, [r0, #0]
        }

        bbzvm_assert_exec(
   d4dde:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4de2:	f001 f97d 	bl	d60e0 <bbzheap_obj_at>
   d4de6:	1c81      	adds	r1, r0, #2
   d4de8:	4630      	mov	r0, r6
   d4dea:	f002 fad9 	bl	d73a0 <bbzdarray_lambda_alloc>
   d4dee:	2800      	cmp	r0, #0
   d4df0:	d0b5      	beq.n	d4d5e <bbzvm_tput+0x106>
                bbzdarray_lambda_alloc(ar, &bbzheap_obj_at(o)->l.value.actrec),
                BBZVM_ERROR_MEM);
        bbztype_darray_markself(*bbzheap_obj_at(bbzheap_obj_at(o)->l.value.actrec));
   d4df2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4df6:	f001 f973 	bl	d60e0 <bbzheap_obj_at>
   d4dfa:	7880      	ldrb	r0, [r0, #2]
   d4dfc:	f001 f970 	bl	d60e0 <bbzheap_obj_at>
   d4e00:	7803      	ldrb	r3, [r0, #0]
   d4e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4e06:	7003      	strb	r3, [r0, #0]
        bbzheap_obj_at(o)->l.value.ref = (uint8_t)o2;
   d4e08:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4e0c:	f001 f968 	bl	d60e0 <bbzheap_obj_at>
   d4e10:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4e14:	7043      	strb	r3, [r0, #1]
        bbzvm_assert_exec(bbzdarray_set(bbzheap_obj_at(o)->l.value.actrec, 0, t), BBZVM_ERROR_FLIST);
   d4e16:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4e1a:	f001 f961 	bl	d60e0 <bbzheap_obj_at>
   d4e1e:	463a      	mov	r2, r7
   d4e20:	2100      	movs	r1, #0
   d4e22:	7880      	ldrb	r0, [r0, #2]
   d4e24:	f002 f924 	bl	d7070 <bbzdarray_set>
   d4e28:	2800      	cmp	r0, #0
   d4e2a:	d08c      	beq.n	d4d46 <bbzvm_tput+0xee>
        bbzvm_assert_exec(bbztable_set(t, k, o), BBZVM_ERROR_MEM);
   d4e2c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   d4e30:	e78f      	b.n	d4d52 <bbzvm_tput+0xfa>
    }
    else {
        bbzvm_assert_exec(bbztable_set(t, k, v), BBZVM_ERROR_MEM);
    }
}
   d4e32:	b002      	add	sp, #8
   d4e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e38:	2003e3f4 	.word	0x2003e3f4
   d4e3c:	000d5ebd 	.word	0x000d5ebd

000d4e40 <bbzvm_tget>:

/****************************************/
/****************************************/

void bbzvm_tget() {
   d4e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Get & pop the arguments
    bbzvm_assert_stack(2);
   d4e42:	4e1c      	ldr	r6, [pc, #112]	; (d4eb4 <bbzvm_tget+0x74>)
   d4e44:	6833      	ldr	r3, [r6, #0]
   d4e46:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4e4a:	3301      	adds	r3, #1
   d4e4c:	b29b      	uxth	r3, r3
   d4e4e:	2b01      	cmp	r3, #1
   d4e50:	d801      	bhi.n	d4e56 <bbzvm_tget+0x16>
   d4e52:	2002      	movs	r0, #2
   d4e54:	e00f      	b.n	d4e76 <bbzvm_tget+0x36>
    bbzheap_idx_t k = bbzvm_stack_at(0);
   d4e56:	2000      	movs	r0, #0
   d4e58:	f7ff fb26 	bl	d44a8 <bbzvm_stack_at>
   d4e5c:	4605      	mov	r5, r0
    bbzheap_idx_t t = bbzvm_stack_at(1);
   d4e5e:	2001      	movs	r0, #1
   d4e60:	f7ff fb22 	bl	d44a8 <bbzvm_stack_at>
   d4e64:	4604      	mov	r4, r0
    bbzvm_assert_type(t, BBZTYPE_TABLE);
   d4e66:	f001 f93b 	bl	d60e0 <bbzheap_obj_at>
   d4e6a:	7803      	ldrb	r3, [r0, #0]
   d4e6c:	f003 0307 	and.w	r3, r3, #7
   d4e70:	2b04      	cmp	r3, #4
   d4e72:	d003      	beq.n	d4e7c <bbzvm_tget+0x3c>
   d4e74:	2006      	movs	r0, #6
   d4e76:	f7ff fa3f 	bl	d42f8 <bbzvm_seterror>
   d4e7a:	e019      	b.n	d4eb0 <bbzvm_tget+0x70>
    bbzvm_pop();
   d4e7c:	f7ff fb22 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d4e80:	f7ff fb20 	bl	d44c4 <bbzvm_pop>
    bbzvm_assert_state();
   d4e84:	6832      	ldr	r2, [r6, #0]
   d4e86:	f892 3594 	ldrb.w	r3, [r2, #1428]	; 0x594
   d4e8a:	2b04      	cmp	r3, #4
   d4e8c:	d010      	beq.n	d4eb0 <bbzvm_tget+0x70>

    // Get the value and push it
    bbzheap_idx_t idx = vm->nil;
   d4e8e:	f892 3458 	ldrb.w	r3, [r2, #1112]	; 0x458
   d4e92:	f892 2459 	ldrb.w	r2, [r2, #1113]	; 0x459
   d4e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e9a:	aa02      	add	r2, sp, #8
    bbztable_get(t, k, &idx);
   d4e9c:	4629      	mov	r1, r5
    bbzvm_pop();
    bbzvm_pop();
    bbzvm_assert_state();

    // Get the value and push it
    bbzheap_idx_t idx = vm->nil;
   d4e9e:	f822 3d02 	strh.w	r3, [r2, #-2]!
    bbztable_get(t, k, &idx);
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	f001 fc56 	bl	d6754 <bbztable_get>
    bbzvm_push(idx);
   d4ea8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4eac:	f7ff fb9a 	bl	d45e4 <bbzvm_push>
}
   d4eb0:	b002      	add	sp, #8
   d4eb2:	bd70      	pop	{r4, r5, r6, pc}
   d4eb4:	2003e3f4 	.word	0x2003e3f4

000d4eb8 <bbzvm_gload>:

/****************************************/
/****************************************/

void bbzvm_gload() {
   d4eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Get and pop the string
    bbzvm_assert_stack(1);
   d4eba:	4c17      	ldr	r4, [pc, #92]	; (d4f18 <bbzvm_gload+0x60>)
   d4ebc:	6823      	ldr	r3, [r4, #0]
   d4ebe:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4ec2:	3301      	adds	r3, #1
   d4ec4:	d101      	bne.n	d4eca <bbzvm_gload+0x12>
   d4ec6:	2002      	movs	r0, #2
   d4ec8:	e00b      	b.n	d4ee2 <bbzvm_gload+0x2a>
    bbzheap_idx_t str = bbzvm_stack_at(0);
   d4eca:	2000      	movs	r0, #0
   d4ecc:	f7ff faec 	bl	d44a8 <bbzvm_stack_at>
   d4ed0:	4605      	mov	r5, r0
    bbzvm_assert_type(str, BBZTYPE_STRING);
   d4ed2:	f001 f905 	bl	d60e0 <bbzheap_obj_at>
   d4ed6:	7803      	ldrb	r3, [r0, #0]
   d4ed8:	f003 0307 	and.w	r3, r3, #7
   d4edc:	2b03      	cmp	r3, #3
   d4ede:	d003      	beq.n	d4ee8 <bbzvm_gload+0x30>
   d4ee0:	2006      	movs	r0, #6
   d4ee2:	f7ff fa09 	bl	d42f8 <bbzvm_seterror>
   d4ee6:	e014      	b.n	d4f12 <bbzvm_gload+0x5a>
    bbzvm_pop();
   d4ee8:	f7ff faec 	bl	d44c4 <bbzvm_pop>
    bbzvm_assert_state();
   d4eec:	6823      	ldr	r3, [r4, #0]
   d4eee:	f893 2594 	ldrb.w	r2, [r3, #1428]	; 0x594
   d4ef2:	2a04      	cmp	r2, #4
   d4ef4:	d00d      	beq.n	d4f12 <bbzvm_gload+0x5a>

    // Get and push the associated value
    bbzheap_idx_t o;
    if(bbztable_get(vm->gsyms, str, &o)) {
   d4ef6:	f10d 0206 	add.w	r2, sp, #6
   d4efa:	4629      	mov	r1, r5
   d4efc:	89d8      	ldrh	r0, [r3, #14]
   d4efe:	f001 fc29 	bl	d6754 <bbztable_get>
   d4f02:	b120      	cbz	r0, d4f0e <bbzvm_gload+0x56>
        bbzvm_push(o);
   d4f04:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4f08:	f7ff fb6c 	bl	d45e4 <bbzvm_push>
   d4f0c:	e001      	b.n	d4f12 <bbzvm_gload+0x5a>
    }
    else {
        bbzvm_pushnil();
   d4f0e:	f7ff fbdd 	bl	d46cc <bbzvm_pushnil>
    }
}
   d4f12:	b003      	add	sp, #12
   d4f14:	bd30      	pop	{r4, r5, pc}
   d4f16:	bf00      	nop
   d4f18:	2003e3f4 	.word	0x2003e3f4

000d4f1c <bbzvm_gstore>:

/****************************************/
/****************************************/

void bbzvm_gstore() {
   d4f1c:	b570      	push	{r4, r5, r6, lr}
    // Get and pop the arguments
    bbzvm_assert_stack(2);
   d4f1e:	4d18      	ldr	r5, [pc, #96]	; (d4f80 <bbzvm_gstore+0x64>)
   d4f20:	682b      	ldr	r3, [r5, #0]
   d4f22:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4f26:	3301      	adds	r3, #1
   d4f28:	b29b      	uxth	r3, r3
   d4f2a:	2b01      	cmp	r3, #1
   d4f2c:	d801      	bhi.n	d4f32 <bbzvm_gstore+0x16>
   d4f2e:	2002      	movs	r0, #2
   d4f30:	e021      	b.n	d4f76 <bbzvm_gstore+0x5a>
    bbzheap_idx_t str = bbzvm_stack_at(1);
   d4f32:	2001      	movs	r0, #1
   d4f34:	f7ff fab8 	bl	d44a8 <bbzvm_stack_at>
   d4f38:	4604      	mov	r4, r0
    bbzheap_idx_t o = bbzvm_stack_at(0);
   d4f3a:	2000      	movs	r0, #0
   d4f3c:	f7ff fab4 	bl	d44a8 <bbzvm_stack_at>
   d4f40:	4606      	mov	r6, r0
    bbzvm_assert_type(str, BBZTYPE_STRING);
   d4f42:	4620      	mov	r0, r4
   d4f44:	f001 f8cc 	bl	d60e0 <bbzheap_obj_at>
   d4f48:	7803      	ldrb	r3, [r0, #0]
   d4f4a:	f003 0307 	and.w	r3, r3, #7
   d4f4e:	2b03      	cmp	r3, #3
   d4f50:	d001      	beq.n	d4f56 <bbzvm_gstore+0x3a>
   d4f52:	2006      	movs	r0, #6
   d4f54:	e00f      	b.n	d4f76 <bbzvm_gstore+0x5a>
    bbzvm_pop();
   d4f56:	f7ff fab5 	bl	d44c4 <bbzvm_pop>
    bbzvm_pop();
   d4f5a:	f7ff fab3 	bl	d44c4 <bbzvm_pop>
    bbzvm_assert_state();
   d4f5e:	682b      	ldr	r3, [r5, #0]
   d4f60:	f893 2594 	ldrb.w	r2, [r3, #1428]	; 0x594
   d4f64:	2a04      	cmp	r2, #4
   d4f66:	d00a      	beq.n	d4f7e <bbzvm_gstore+0x62>
    // Store the value
    bbzvm_assert_exec(bbztable_set(vm->gsyms, str, o), BBZVM_ERROR_MEM);
   d4f68:	4632      	mov	r2, r6
   d4f6a:	4621      	mov	r1, r4
   d4f6c:	89d8      	ldrh	r0, [r3, #14]
   d4f6e:	f001 fc3f 	bl	d67f0 <bbztable_set>
   d4f72:	b920      	cbnz	r0, d4f7e <bbzvm_gstore+0x62>
   d4f74:	200d      	movs	r0, #13
}
   d4f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbzvm_assert_type(str, BBZTYPE_STRING);
    bbzvm_pop();
    bbzvm_pop();
    bbzvm_assert_state();
    // Store the value
    bbzvm_assert_exec(bbztable_set(vm->gsyms, str, o), BBZVM_ERROR_MEM);
   d4f7a:	f7ff b9bd 	b.w	d42f8 <bbzvm_seterror>
   d4f7e:	bd70      	pop	{r4, r5, r6, pc}
   d4f80:	2003e3f4 	.word	0x2003e3f4

000d4f84 <bbzvm_ret0>:
}

/****************************************/
/****************************************/

void bbzvm_ret0() {
   d4f84:	b538      	push	{r3, r4, r5, lr}
    /* Make sure there's enough elements on the stack */
    bbzvm_assert_stack(3);
   d4f86:	4c28      	ldr	r4, [pc, #160]	; (d5028 <bbzvm_ret0+0xa4>)
   d4f88:	6825      	ldr	r5, [r4, #0]
   d4f8a:	f9b5 359b 	ldrsh.w	r3, [r5, #1435]	; 0x59b
   d4f8e:	3301      	adds	r3, #1
   d4f90:	b29b      	uxth	r3, r3
   d4f92:	2b02      	cmp	r3, #2
   d4f94:	d801      	bhi.n	d4f9a <bbzvm_ret0+0x16>
   d4f96:	2002      	movs	r0, #2
   d4f98:	e035      	b.n	d5006 <bbzvm_ret0+0x82>
    /* Pop block pointer and stack */
    vm->stackptr = vm->blockptr;
   d4f9a:	f9b5 259d 	ldrsh.w	r2, [r5, #1437]	; 0x59d
   d4f9e:	f8a5 259b 	strh.w	r2, [r5, #1435]	; 0x59b
   d4fa2:	b213      	sxth	r3, r2
    vm->blockptr = bbzheap_obj_at(vm->stack[vm->stackptr])->i.value;
   d4fa4:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
   d4fa8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d4fac:	f8b3 0007 	ldrh.w	r0, [r3, #7]
   d4fb0:	f001 f896 	bl	d60e0 <bbzheap_obj_at>
   d4fb4:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d4fb8:	f8a5 359d 	strh.w	r3, [r5, #1437]	; 0x59d
    bbzvm_pop();
   d4fbc:	f7ff fa82 	bl	d44c4 <bbzvm_pop>
    /* Pop local symbol table */
    bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->lsyms));
   d4fc0:	6823      	ldr	r3, [r4, #0]
   d4fc2:	8998      	ldrh	r0, [r3, #12]
   d4fc4:	f001 f88c 	bl	d60e0 <bbzheap_obj_at>
   d4fc8:	7803      	ldrb	r3, [r0, #0]
   d4fca:	f023 0310 	bic.w	r3, r3, #16
   d4fce:	7003      	strb	r3, [r0, #0]
    bbzdarray_destroy(vm->lsyms);
   d4fd0:	6823      	ldr	r3, [r4, #0]
   d4fd2:	8998      	ldrh	r0, [r3, #12]
   d4fd4:	f001 ffd6 	bl	d6f84 <bbzdarray_destroy>
    vm->lsyms = bbzvm_stack_at(0);
   d4fd8:	2000      	movs	r0, #0
   d4fda:	6821      	ldr	r1, [r4, #0]
   d4fdc:	f7ff fa64 	bl	d44a8 <bbzvm_stack_at>
   d4fe0:	8188      	strh	r0, [r1, #12]
    bbzvm_pop();
   d4fe2:	f7ff fa6f 	bl	d44c4 <bbzvm_pop>
    /* Make sure the stack contains at least one element */
    bbzvm_assert_stack(1);
   d4fe6:	6823      	ldr	r3, [r4, #0]
   d4fe8:	f9b3 359b 	ldrsh.w	r3, [r3, #1435]	; 0x59b
   d4fec:	3301      	adds	r3, #1
   d4fee:	d0d2      	beq.n	d4f96 <bbzvm_ret0+0x12>
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d4ff0:	2000      	movs	r0, #0
   d4ff2:	f7ff fa59 	bl	d44a8 <bbzvm_stack_at>
   d4ff6:	f001 f873 	bl	d60e0 <bbzheap_obj_at>
   d4ffa:	7803      	ldrb	r3, [r0, #0]
   d4ffc:	f003 0307 	and.w	r3, r3, #7
   d5000:	2b01      	cmp	r3, #1
   d5002:	d004      	beq.n	d500e <bbzvm_ret0+0x8a>
   d5004:	2006      	movs	r0, #6
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
    /* Pop the return address */
    bbzvm_pop();
}
   d5006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    vm->lsyms = bbzvm_stack_at(0);
    bbzvm_pop();
    /* Make sure the stack contains at least one element */
    bbzvm_assert_stack(1);
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d500a:	f7ff b975 	b.w	d42f8 <bbzvm_seterror>
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d500e:	2000      	movs	r0, #0
   d5010:	f7ff fa4a 	bl	d44a8 <bbzvm_stack_at>
   d5014:	6824      	ldr	r4, [r4, #0]
   d5016:	f001 f863 	bl	d60e0 <bbzheap_obj_at>
   d501a:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d501e:	8163      	strh	r3, [r4, #10]
    /* Pop the return address */
    bbzvm_pop();
}
   d5020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
    /* Pop the return address */
    bbzvm_pop();
   d5024:	f7ff ba4e 	b.w	d44c4 <bbzvm_pop>
   d5028:	2003e3f4 	.word	0x2003e3f4

000d502c <bbzvm_ret1>:
}

/****************************************/
/****************************************/

void bbzvm_ret1() {
   d502c:	b570      	push	{r4, r5, r6, lr}
    /* Make sure there's enough elements on the stack */
    bbzvm_assert_stack(4);
   d502e:	4c29      	ldr	r4, [pc, #164]	; (d50d4 <bbzvm_ret1+0xa8>)
   d5030:	6825      	ldr	r5, [r4, #0]
   d5032:	f9b5 359b 	ldrsh.w	r3, [r5, #1435]	; 0x59b
   d5036:	3301      	adds	r3, #1
   d5038:	b29b      	uxth	r3, r3
   d503a:	2b03      	cmp	r3, #3
   d503c:	d801      	bhi.n	d5042 <bbzvm_ret1+0x16>
   d503e:	2002      	movs	r0, #2
   d5040:	e034      	b.n	d50ac <bbzvm_ret1+0x80>
    /* Save it, it's the return value to pass to the lower stack */
    bbzheap_idx_t ret = bbzvm_stack_at(0);
   d5042:	2000      	movs	r0, #0
   d5044:	f7ff fa30 	bl	d44a8 <bbzvm_stack_at>
    /* Pop block pointer and stack */
    vm->stackptr = vm->blockptr;
   d5048:	f9b5 259d 	ldrsh.w	r2, [r5, #1437]	; 0x59d
   d504c:	f8a5 259b 	strh.w	r2, [r5, #1435]	; 0x59b
   d5050:	b213      	sxth	r3, r2
    vm->blockptr = bbzheap_obj_at(vm->stack[vm->blockptr])->i.value;
   d5052:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
   d5056:	eb05 0343 	add.w	r3, r5, r3, lsl #1

void bbzvm_ret1() {
    /* Make sure there's enough elements on the stack */
    bbzvm_assert_stack(4);
    /* Save it, it's the return value to pass to the lower stack */
    bbzheap_idx_t ret = bbzvm_stack_at(0);
   d505a:	4606      	mov	r6, r0
    /* Pop block pointer and stack */
    vm->stackptr = vm->blockptr;
    vm->blockptr = bbzheap_obj_at(vm->stack[vm->blockptr])->i.value;
   d505c:	f8b3 0007 	ldrh.w	r0, [r3, #7]
   d5060:	f001 f83e 	bl	d60e0 <bbzheap_obj_at>
   d5064:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d5068:	f8a5 359d 	strh.w	r3, [r5, #1437]	; 0x59d
    bbzvm_pop();
   d506c:	f7ff fa2a 	bl	d44c4 <bbzvm_pop>
    /* Pop local symbol table */
    bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->lsyms));
   d5070:	6823      	ldr	r3, [r4, #0]
   d5072:	8998      	ldrh	r0, [r3, #12]
   d5074:	f001 f834 	bl	d60e0 <bbzheap_obj_at>
   d5078:	7803      	ldrb	r3, [r0, #0]
   d507a:	f023 0310 	bic.w	r3, r3, #16
   d507e:	7003      	strb	r3, [r0, #0]
    bbzdarray_destroy(vm->lsyms);
   d5080:	6823      	ldr	r3, [r4, #0]
   d5082:	8998      	ldrh	r0, [r3, #12]
   d5084:	f001 ff7e 	bl	d6f84 <bbzdarray_destroy>
    vm->lsyms = bbzvm_stack_at(0);
   d5088:	2000      	movs	r0, #0
   d508a:	6821      	ldr	r1, [r4, #0]
   d508c:	f7ff fa0c 	bl	d44a8 <bbzvm_stack_at>
   d5090:	8188      	strh	r0, [r1, #12]
    bbzvm_pop();
   d5092:	f7ff fa17 	bl	d44c4 <bbzvm_pop>
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d5096:	2000      	movs	r0, #0
   d5098:	f7ff fa06 	bl	d44a8 <bbzvm_stack_at>
   d509c:	f001 f820 	bl	d60e0 <bbzheap_obj_at>
   d50a0:	7803      	ldrb	r3, [r0, #0]
   d50a2:	f003 0307 	and.w	r3, r3, #7
   d50a6:	2b01      	cmp	r3, #1
   d50a8:	d004      	beq.n	d50b4 <bbzvm_ret1+0x88>
   d50aa:	2006      	movs	r0, #6
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
    /* Pop the return address */
    bbzvm_pop();
    /* Push the return value */
    bbzvm_push(ret);
}
   d50ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->lsyms));
    bbzdarray_destroy(vm->lsyms);
    vm->lsyms = bbzvm_stack_at(0);
    bbzvm_pop();
    /* Make sure that element is an integer */
    bbzvm_assert_type(bbzvm_stack_at(0), BBZTYPE_INT);
   d50b0:	f7ff b922 	b.w	d42f8 <bbzvm_seterror>
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d50b4:	2000      	movs	r0, #0
   d50b6:	f7ff f9f7 	bl	d44a8 <bbzvm_stack_at>
   d50ba:	6824      	ldr	r4, [r4, #0]
   d50bc:	f001 f810 	bl	d60e0 <bbzheap_obj_at>
   d50c0:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d50c4:	8163      	strh	r3, [r4, #10]
    /* Pop the return address */
    bbzvm_pop();
   d50c6:	f7ff f9fd 	bl	d44c4 <bbzvm_pop>
    /* Push the return value */
    bbzvm_push(ret);
   d50ca:	4630      	mov	r0, r6
}
   d50cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* Use that element as program counter */
    vm->pc = (bbzpc_t)bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
    /* Pop the return address */
    bbzvm_pop();
    /* Push the return value */
    bbzvm_push(ret);
   d50d0:	f7ff ba88 	b.w	d45e4 <bbzvm_push>
   d50d4:	2003e3f4 	.word	0x2003e3f4

000d50d8 <bbzvm_step>:
        // or, in the case of BBZVM_INSTR_DONE, loop on it.
        vm->pc = instrOffset;
    }
}

void bbzvm_step() {
   d50d8:	b570      	push	{r4, r5, r6, lr}
    if(vm->state == BBZVM_STATE_READY) {
   d50da:	4cb8      	ldr	r4, [pc, #736]	; (d53bc <bbzvm_step+0x2e4>)
   d50dc:	6823      	ldr	r3, [r4, #0]
   d50de:	f893 6594 	ldrb.w	r6, [r3, #1428]	; 0x594
   d50e2:	2e01      	cmp	r6, #1
   d50e4:	f040 8169 	bne.w	d53ba <bbzvm_step+0x2e2>
        bbzvm_gc();
   d50e8:	f7ff f934 	bl	d4354 <bbzvm_gc>
/**
 * @brief Executes a single Buzz instruction.
 */
//ALWAYS_INLINE
static void bbzvm_exec_instr() {
    bbzpc_t instrOffset = vm->pc; // Save PC in case of error or DONE.
   d50ec:	6823      	ldr	r3, [r4, #0]
   d50ee:	895d      	ldrh	r5, [r3, #10]

    uint8_t instr = *(*vm->bcode_fetch_fun)(vm->pc, 1);
   d50f0:	685b      	ldr	r3, [r3, #4]
   d50f2:	4631      	mov	r1, r6
   d50f4:	b2a8      	uxth	r0, r5
   d50f6:	4798      	blx	r3
#ifdef DEBUG_VM
    vm->dbg_pc = vm->pc;
   d50f8:	6822      	ldr	r2, [r4, #0]
 */
//ALWAYS_INLINE
static void bbzvm_exec_instr() {
    bbzpc_t instrOffset = vm->pc; // Save PC in case of error or DONE.

    uint8_t instr = *(*vm->bcode_fetch_fun)(vm->pc, 1);
   d50fa:	7803      	ldrb	r3, [r0, #0]
#ifdef DEBUG_VM
    vm->dbg_pc = vm->pc;
   d50fc:	8951      	ldrh	r1, [r2, #10]
   d50fe:	f8a2 1598 	strh.w	r1, [r2, #1432]	; 0x598
    vm->instr = (bbzvm_instr)instr;
#endif
    if (instr != BBZVM_INSTR_DONE) inc_pc();
   d5102:	2b01      	cmp	r3, #1
static void bbzvm_exec_instr() {
    bbzpc_t instrOffset = vm->pc; // Save PC in case of error or DONE.

    uint8_t instr = *(*vm->bcode_fetch_fun)(vm->pc, 1);
#ifdef DEBUG_VM
    vm->dbg_pc = vm->pc;
   d5104:	b288      	uxth	r0, r1
    vm->instr = (bbzvm_instr)instr;
   d5106:	f882 359a 	strb.w	r3, [r2, #1434]	; 0x59a
#endif
    if (instr != BBZVM_INSTR_DONE) inc_pc();
   d510a:	d007      	beq.n	d511c <bbzvm_step+0x44>
   d510c:	8911      	ldrh	r1, [r2, #8]
   d510e:	4281      	cmp	r1, r0
   d5110:	d204      	bcs.n	d511c <bbzvm_step+0x44>
   d5112:	2004      	movs	r0, #4
void bbzvm_step() {
    if(vm->state == BBZVM_STATE_READY) {
        bbzvm_gc();
        bbzvm_exec_instr();
    }
}
   d5114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uint8_t instr = *(*vm->bcode_fetch_fun)(vm->pc, 1);
#ifdef DEBUG_VM
    vm->dbg_pc = vm->pc;
    vm->instr = (bbzvm_instr)instr;
#endif
    if (instr != BBZVM_INSTR_DONE) inc_pc();
   d5118:	f7ff b8ee 	b.w	d42f8 <bbzvm_seterror>
   d511c:	3001      	adds	r0, #1
   d511e:	b280      	uxth	r0, r0
   d5120:	8150      	strh	r0, [r2, #10]
    switch(instr) {
   d5122:	2b28      	cmp	r3, #40	; 0x28
   d5124:	f200 813d 	bhi.w	d53a2 <bbzvm_step+0x2ca>
   d5128:	e8df f013 	tbh	[pc, r3, lsl #1]
   d512c:	0029013e 	.word	0x0029013e
   d5130:	0030002d 	.word	0x0030002d
   d5134:	00360033 	.word	0x00360033
   d5138:	003c0039 	.word	0x003c0039
   d513c:	0042003f 	.word	0x0042003f
   d5140:	00480045 	.word	0x00480045
   d5144:	004e004b 	.word	0x004e004b
   d5148:	00540051 	.word	0x00540051
   d514c:	005a0057 	.word	0x005a0057
   d5150:	0060005d 	.word	0x0060005d
   d5154:	00660063 	.word	0x00660063
   d5158:	006c0069 	.word	0x006c0069
   d515c:	0072006f 	.word	0x0072006f
   d5160:	00780075 	.word	0x00780075
   d5164:	013e007b 	.word	0x013e007b
   d5168:	00990089 	.word	0x00990089
   d516c:	00ba00aa 	.word	0x00ba00aa
   d5170:	00db00c9 	.word	0x00db00c9
   d5174:	00fb00eb 	.word	0x00fb00eb
   d5178:	011b010b 	.word	0x011b010b
   d517c:	012b      	.short	0x012b
    /**
     * @brief Terminates the current Buzz script.
     * @see BBZVM_INSTR_DONE
     */
    ALWAYS_INLINE
    void bbzvm_done() { vm->state = BBZVM_STATE_DONE; }
   d517e:	2303      	movs	r3, #3
   d5180:	f882 3594 	strb.w	r3, [r2, #1428]	; 0x594
   d5184:	e110      	b.n	d53a8 <bbzvm_step+0x2d0>
        case BBZVM_INSTR_DONE: {
            bbzvm_done();
            break;
        }
        case BBZVM_INSTR_PUSHNIL: {
            bbzvm_pushnil();
   d5186:	f7ff faa1 	bl	d46cc <bbzvm_pushnil>
   d518a:	e10d      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_DUP: {
            bbzvm_dup();
   d518c:	f7ff fa64 	bl	d4658 <bbzvm_dup>
   d5190:	e10a      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_POP: {
            bbzvm_pop();
   d5192:	f7ff f997 	bl	d44c4 <bbzvm_pop>
   d5196:	e107      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_RET0: {
            bbzvm_ret0();
   d5198:	f7ff fef4 	bl	d4f84 <bbzvm_ret0>
   d519c:	e043      	b.n	d5226 <bbzvm_step+0x14e>
                assert_pc(vm->pc);
            }
            break;
        }
        case BBZVM_INSTR_RET1: {
            bbzvm_ret1();
   d519e:	f7ff ff45 	bl	d502c <bbzvm_ret1>
   d51a2:	e040      	b.n	d5226 <bbzvm_step+0x14e>
                assert_pc(vm->pc);
            }
            break;
        }
        case BBZVM_INSTR_ADD: {
            bbzvm_add();
   d51a4:	f7ff faee 	bl	d4784 <bbzvm_add>
   d51a8:	e0fe      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_SUB: {
            bbzvm_sub();
   d51aa:	f7ff faf1 	bl	d4790 <bbzvm_sub>
   d51ae:	e0fb      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_MUL: {
            bbzvm_mul();
   d51b0:	f7ff faf4 	bl	d479c <bbzvm_mul>
   d51b4:	e0f8      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_DIV: {
            bbzvm_div();
   d51b6:	f7ff faf7 	bl	d47a8 <bbzvm_div>
   d51ba:	e0f5      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_MOD: {
            bbzvm_mod();
   d51bc:	f7ff fafa 	bl	d47b4 <bbzvm_mod>
   d51c0:	e0f2      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_POW: {
            bbzvm_pow();
   d51c2:	f7ff fafd 	bl	d47c0 <bbzvm_pow>
   d51c6:	e0ef      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_UNM: {
            bbzvm_unm();
   d51c8:	f7ff fb00 	bl	d47cc <bbzvm_unm>
   d51cc:	e0ec      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_AND: {
            bbzvm_and();
   d51ce:	f7ff fb6d 	bl	d48ac <bbzvm_and>
   d51d2:	e0e9      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_OR: {
            bbzvm_or();
   d51d4:	f7ff fb70 	bl	d48b8 <bbzvm_or>
   d51d8:	e0e6      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_NOT: {
            bbzvm_not();
   d51da:	f7ff fb73 	bl	d48c4 <bbzvm_not>
   d51de:	e0e3      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_EQ: {
            bbzvm_eq();
   d51e0:	f7ff fbc2 	bl	d4968 <bbzvm_eq>
   d51e4:	e0e0      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_NEQ: {
            bbzvm_neq();
   d51e6:	f7ff fbc5 	bl	d4974 <bbzvm_neq>
   d51ea:	e0dd      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_GT: {
            bbzvm_gt();
   d51ec:	f7ff fbc8 	bl	d4980 <bbzvm_gt>
   d51f0:	e0da      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_GTE: {
            bbzvm_gte();
   d51f2:	f7ff fbcb 	bl	d498c <bbzvm_gte>
   d51f6:	e0d7      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_LT: {
            bbzvm_lt();
   d51f8:	f7ff fbce 	bl	d4998 <bbzvm_lt>
   d51fc:	e0d4      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_LTE: {
            bbzvm_lte();
   d51fe:	f7ff fbd1 	bl	d49a4 <bbzvm_lte>
   d5202:	e0d1      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_GLOAD: {
            bbzvm_gload();
   d5204:	f7ff fe58 	bl	d4eb8 <bbzvm_gload>
   d5208:	e0ce      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_GSTORE: {
            bbzvm_gstore();
   d520a:	f7ff fe87 	bl	d4f1c <bbzvm_gstore>
   d520e:	e0cb      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_PUSHT: {
            bbzvm_pusht();
   d5210:	f7ff f9fc 	bl	d460c <bbzvm_pusht>
   d5214:	e0c8      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_TPUT: {
            bbzvm_tput();
   d5216:	f7ff fd1f 	bl	d4c58 <bbzvm_tput>
   d521a:	e0c5      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_TGET: {
            bbzvm_tget();
   d521c:	f7ff fe10 	bl	d4e40 <bbzvm_tget>
   d5220:	e0c2      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_CALLC: {
            bbzvm_callc();
   d5222:	f7ff fbc5 	bl	d49b0 <bbzvm_callc>
            if (vm->state == BBZVM_STATE_READY) {
   d5226:	6823      	ldr	r3, [r4, #0]
   d5228:	f893 2594 	ldrb.w	r2, [r3, #1428]	; 0x594
   d522c:	2a01      	cmp	r2, #1
   d522e:	f040 80c2 	bne.w	d53b6 <bbzvm_step+0x2de>
                assert_pc(vm->pc);
   d5232:	895a      	ldrh	r2, [r3, #10]
   d5234:	891b      	ldrh	r3, [r3, #8]
   d5236:	429a      	cmp	r2, r3
   d5238:	f240 80bf 	bls.w	d53ba <bbzvm_step+0x2e2>
   d523c:	e769      	b.n	d5112 <bbzvm_step+0x3a>
        }
        case BBZVM_INSTR_CALLS: { // For compatibility only
            break;
        }
        case BBZVM_INSTR_PUSHF: {
            get_arg(bbzfloat);
   d523e:	8911      	ldrh	r1, [r2, #8]
   d5240:	1c83      	adds	r3, r0, #2
   d5242:	428b      	cmp	r3, r1
   d5244:	f63f af65 	bhi.w	d5112 <bbzvm_step+0x3a>
   d5248:	6853      	ldr	r3, [r2, #4]
   d524a:	2102      	movs	r1, #2
   d524c:	4798      	blx	r3
   d524e:	6822      	ldr	r2, [r4, #0]
   d5250:	8800      	ldrh	r0, [r0, #0]
   d5252:	8953      	ldrh	r3, [r2, #10]
   d5254:	3302      	adds	r3, #2
   d5256:	8153      	strh	r3, [r2, #10]
            bbzvm_pushf(arg);
   d5258:	f7ff fc8a 	bl	d4b70 <bbzvm_pushf>
   d525c:	e0a4      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_PUSHI: {
            get_arg(int16_t);
   d525e:	8911      	ldrh	r1, [r2, #8]
   d5260:	1c83      	adds	r3, r0, #2
   d5262:	428b      	cmp	r3, r1
   d5264:	f63f af55 	bhi.w	d5112 <bbzvm_step+0x3a>
   d5268:	6853      	ldr	r3, [r2, #4]
   d526a:	2102      	movs	r1, #2
   d526c:	4798      	blx	r3
   d526e:	6822      	ldr	r2, [r4, #0]
   d5270:	f9b0 0000 	ldrsh.w	r0, [r0]
   d5274:	8953      	ldrh	r3, [r2, #10]
   d5276:	3302      	adds	r3, #2
   d5278:	8153      	strh	r3, [r2, #10]
            bbzvm_pushi(arg);
   d527a:	f7ff fa40 	bl	d46fe <bbzvm_pushi>
   d527e:	e093      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_PUSHS: {
            get_arg(uint16_t);
   d5280:	8911      	ldrh	r1, [r2, #8]
   d5282:	1c83      	adds	r3, r0, #2
   d5284:	428b      	cmp	r3, r1
   d5286:	f63f af44 	bhi.w	d5112 <bbzvm_step+0x3a>
   d528a:	6853      	ldr	r3, [r2, #4]
   d528c:	2102      	movs	r1, #2
   d528e:	4798      	blx	r3
   d5290:	6822      	ldr	r2, [r4, #0]
   d5292:	8800      	ldrh	r0, [r0, #0]
   d5294:	8953      	ldrh	r3, [r2, #10]
   d5296:	3302      	adds	r3, #2
   d5298:	8153      	strh	r3, [r2, #10]
            bbzvm_pushs(arg);
   d529a:	f7ff fc70 	bl	d4b7e <bbzvm_pushs>
   d529e:	e083      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_PUSHCN: {
            get_arg(uint16_t);
   d52a0:	8911      	ldrh	r1, [r2, #8]
   d52a2:	1c83      	adds	r3, r0, #2
   d52a4:	428b      	cmp	r3, r1
   d52a6:	f63f af34 	bhi.w	d5112 <bbzvm_step+0x3a>
   d52aa:	6853      	ldr	r3, [r2, #4]
   d52ac:	2102      	movs	r1, #2
   d52ae:	4798      	blx	r3
   d52b0:	6822      	ldr	r2, [r4, #0]
   d52b2:	8800      	ldrh	r0, [r0, #0]
   d52b4:	8953      	ldrh	r3, [r2, #10]
   d52b6:	3302      	adds	r3, #2
   d52b8:	8153      	strh	r3, [r2, #10]
     * @details Internally checks whether the operation is valid.
     * @see BBZVM_INSTR_PUSHCN
     * @param[in] addr The closure address.
     */
    ALWAYS_INLINE
    void bbzvm_pushcn(uint16_t addr) { return bbzvm_pushc((intptr_t)addr, 1); }
   d52ba:	2101      	movs	r1, #1
   d52bc:	e00e      	b.n	d52dc <bbzvm_step+0x204>
            bbzvm_pushcn(arg);
            break;
        }
        case BBZVM_INSTR_PUSHCC: { // _FIXME I don't think that a buzz script should/would ever use this instruction... Neither is it used in the buzz parser.
            get_arg(int16_t);
   d52be:	8911      	ldrh	r1, [r2, #8]
   d52c0:	1c83      	adds	r3, r0, #2
   d52c2:	428b      	cmp	r3, r1
   d52c4:	f63f af25 	bhi.w	d5112 <bbzvm_step+0x3a>
   d52c8:	6853      	ldr	r3, [r2, #4]
   d52ca:	2102      	movs	r1, #2
   d52cc:	4798      	blx	r3
   d52ce:	6822      	ldr	r2, [r4, #0]
   d52d0:	f9b0 0000 	ldrsh.w	r0, [r0]
   d52d4:	8953      	ldrh	r3, [r2, #10]
   d52d6:	3302      	adds	r3, #2
   d52d8:	8153      	strh	r3, [r2, #10]
     * It pops the function id and pushes the c-function closure.
     * @see BBZVM_INSTR_PUSHCC
     * @param[in] cid The closure id.
     */
    ALWAYS_INLINE
    void bbzvm_pushcc(bbzvm_funp cid) { return bbzvm_pushc((intptr_t)cid, 0); }
   d52da:	2100      	movs	r1, #0
   d52dc:	f7ff f9fe 	bl	d46dc <bbzvm_pushc>
   d52e0:	e062      	b.n	d53a8 <bbzvm_step+0x2d0>
            bbzvm_pushcc((bbzvm_funp)(intptr_t)arg);
            break;
        }
        case BBZVM_INSTR_PUSHL: {
            get_arg(uint16_t);
   d52e2:	8911      	ldrh	r1, [r2, #8]
   d52e4:	1c83      	adds	r3, r0, #2
   d52e6:	428b      	cmp	r3, r1
   d52e8:	f63f af13 	bhi.w	d5112 <bbzvm_step+0x3a>
   d52ec:	6853      	ldr	r3, [r2, #4]
   d52ee:	2102      	movs	r1, #2
   d52f0:	4798      	blx	r3
   d52f2:	6822      	ldr	r2, [r4, #0]
   d52f4:	8800      	ldrh	r0, [r0, #0]
   d52f6:	8953      	ldrh	r3, [r2, #10]
   d52f8:	3302      	adds	r3, #2
   d52fa:	8153      	strh	r3, [r2, #10]
            bbzvm_pushl(arg);
   d52fc:	f7ff fc46 	bl	d4b8c <bbzvm_pushl>
   d5300:	e052      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_LLOAD: {
            get_arg(uint16_t);
   d5302:	8911      	ldrh	r1, [r2, #8]
   d5304:	1c83      	adds	r3, r0, #2
   d5306:	428b      	cmp	r3, r1
   d5308:	f63f af03 	bhi.w	d5112 <bbzvm_step+0x3a>
   d530c:	6853      	ldr	r3, [r2, #4]
   d530e:	2102      	movs	r1, #2
   d5310:	4798      	blx	r3
   d5312:	6822      	ldr	r2, [r4, #0]
   d5314:	8800      	ldrh	r0, [r0, #0]
   d5316:	8953      	ldrh	r3, [r2, #10]
   d5318:	3302      	adds	r3, #2
   d531a:	8153      	strh	r3, [r2, #10]
            bbzvm_lload(arg);
   d531c:	f7ff f97e 	bl	d461c <bbzvm_lload>
   d5320:	e042      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_LSTORE: {
            get_arg(uint16_t);
   d5322:	8911      	ldrh	r1, [r2, #8]
   d5324:	1c83      	adds	r3, r0, #2
   d5326:	428b      	cmp	r3, r1
   d5328:	f63f aef3 	bhi.w	d5112 <bbzvm_step+0x3a>
   d532c:	6853      	ldr	r3, [r2, #4]
   d532e:	2102      	movs	r1, #2
   d5330:	4798      	blx	r3
   d5332:	6822      	ldr	r2, [r4, #0]
   d5334:	8800      	ldrh	r0, [r0, #0]
   d5336:	8953      	ldrh	r3, [r2, #10]
   d5338:	3302      	adds	r3, #2
   d533a:	8153      	strh	r3, [r2, #10]
            bbzvm_lstore(arg);
   d533c:	f7ff f8d2 	bl	d44e4 <bbzvm_lstore>
   d5340:	e032      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_JUMP: {
            get_arg(uint16_t);
   d5342:	8911      	ldrh	r1, [r2, #8]
   d5344:	1c83      	adds	r3, r0, #2
   d5346:	428b      	cmp	r3, r1
   d5348:	f63f aee3 	bhi.w	d5112 <bbzvm_step+0x3a>
   d534c:	6853      	ldr	r3, [r2, #4]
   d534e:	2102      	movs	r1, #2
   d5350:	4798      	blx	r3
   d5352:	6822      	ldr	r2, [r4, #0]
   d5354:	8800      	ldrh	r0, [r0, #0]
   d5356:	8953      	ldrh	r3, [r2, #10]
   d5358:	3302      	adds	r3, #2
   d535a:	8153      	strh	r3, [r2, #10]
            bbzvm_jump(arg);
   d535c:	f7ff f834 	bl	d43c8 <bbzvm_jump>
   d5360:	e022      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_JUMPZ: {
            get_arg(uint16_t);
   d5362:	8911      	ldrh	r1, [r2, #8]
   d5364:	1c83      	adds	r3, r0, #2
   d5366:	428b      	cmp	r3, r1
   d5368:	f63f aed3 	bhi.w	d5112 <bbzvm_step+0x3a>
   d536c:	6853      	ldr	r3, [r2, #4]
   d536e:	2102      	movs	r1, #2
   d5370:	4798      	blx	r3
   d5372:	6822      	ldr	r2, [r4, #0]
   d5374:	8800      	ldrh	r0, [r0, #0]
   d5376:	8953      	ldrh	r3, [r2, #10]
   d5378:	3302      	adds	r3, #2
   d537a:	8153      	strh	r3, [r2, #10]
            bbzvm_jumpz(arg);
   d537c:	f7ff f8da 	bl	d4534 <bbzvm_jumpz>
   d5380:	e012      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        case BBZVM_INSTR_JUMPNZ: {
            get_arg(uint16_t);
   d5382:	8911      	ldrh	r1, [r2, #8]
   d5384:	1c83      	adds	r3, r0, #2
   d5386:	428b      	cmp	r3, r1
   d5388:	f63f aec3 	bhi.w	d5112 <bbzvm_step+0x3a>
   d538c:	6853      	ldr	r3, [r2, #4]
   d538e:	2102      	movs	r1, #2
   d5390:	4798      	blx	r3
   d5392:	6822      	ldr	r2, [r4, #0]
   d5394:	8800      	ldrh	r0, [r0, #0]
   d5396:	8953      	ldrh	r3, [r2, #10]
   d5398:	3302      	adds	r3, #2
   d539a:	8153      	strh	r3, [r2, #10]
            bbzvm_jumpnz(arg);
   d539c:	f7ff f8f6 	bl	d458c <bbzvm_jumpnz>
   d53a0:	e002      	b.n	d53a8 <bbzvm_step+0x2d0>
            break;
        }
        default:
            bbzvm_seterror(BBZVM_ERROR_INSTR);
   d53a2:	2001      	movs	r0, #1
   d53a4:	f7fe ffa8 	bl	d42f8 <bbzvm_seterror>
            break;
    }

    if (vm->state != BBZVM_STATE_READY) {
   d53a8:	6823      	ldr	r3, [r4, #0]
   d53aa:	f893 2594 	ldrb.w	r2, [r3, #1428]	; 0x594
   d53ae:	2a01      	cmp	r2, #1
   d53b0:	d003      	beq.n	d53ba <bbzvm_step+0x2e2>
        // Stay on the instruction that caused the error,
        // or, in the case of BBZVM_INSTR_DONE, loop on it.
        vm->pc = instrOffset;
   d53b2:	815d      	strh	r5, [r3, #10]
void bbzvm_step() {
    if(vm->state == BBZVM_STATE_READY) {
        bbzvm_gc();
        bbzvm_exec_instr();
    }
}
   d53b4:	bd70      	pop	{r4, r5, r6, pc}
        default:
            bbzvm_seterror(BBZVM_ERROR_INSTR);
            break;
    }

    if (vm->state != BBZVM_STATE_READY) {
   d53b6:	6823      	ldr	r3, [r4, #0]
   d53b8:	e7fb      	b.n	d53b2 <bbzvm_step+0x2da>
   d53ba:	bd70      	pop	{r4, r5, r6, pc}
   d53bc:	2003e3f4 	.word	0x2003e3f4

000d53c0 <bbzvm_set_bcode>:
}

/****************************************/
/****************************************/

void bbzvm_set_bcode(bbzvm_bcode_fetch_fun bcode_fetch_fun, uint16_t bcode_size) {
   d53c0:	b538      	push	{r3, r4, r5, lr}
    // 1) Set the bytecode
    vm->bcode_fetch_fun = bcode_fetch_fun;
   d53c2:	4c10      	ldr	r4, [pc, #64]	; (d5404 <bbzvm_set_bcode+0x44>)
   d53c4:	6823      	ldr	r3, [r4, #0]
    vm->bcode_size = bcode_size;

    // 2) Reset the VM
    vm->state = BBZVM_STATE_READY;
   d53c6:	2201      	movs	r2, #1
/****************************************/

void bbzvm_set_bcode(bbzvm_bcode_fetch_fun bcode_fetch_fun, uint16_t bcode_size) {
    // 1) Set the bytecode
    vm->bcode_fetch_fun = bcode_fetch_fun;
    vm->bcode_size = bcode_size;
   d53c8:	8119      	strh	r1, [r3, #8]

    // 2) Reset the VM
    vm->state = BBZVM_STATE_READY;
   d53ca:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
    vm->error = BBZVM_ERROR_NONE;

    // 3) Register global strings
    vm->pc = sizeof(uint16_t);
   d53ce:	2102      	movs	r1, #2
    vm->bcode_fetch_fun = bcode_fetch_fun;
    vm->bcode_size = bcode_size;

    // 2) Reset the VM
    vm->state = BBZVM_STATE_READY;
    vm->error = BBZVM_ERROR_NONE;
   d53d0:	2200      	movs	r2, #0
/****************************************/
/****************************************/

void bbzvm_set_bcode(bbzvm_bcode_fetch_fun bcode_fetch_fun, uint16_t bcode_size) {
    // 1) Set the bytecode
    vm->bcode_fetch_fun = bcode_fetch_fun;
   d53d2:	6058      	str	r0, [r3, #4]
    vm->bcode_size = bcode_size;

    // 2) Reset the VM
    vm->state = BBZVM_STATE_READY;
    vm->error = BBZVM_ERROR_NONE;
   d53d4:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595

    // 3) Register global strings
    vm->pc = sizeof(uint16_t);
   d53d8:	7299      	strb	r1, [r3, #10]
   d53da:	72da      	strb	r2, [r3, #11]

    // 4) Register Buzz's built-in functions
    while(*vm->bcode_fetch_fun(vm->pc, sizeof(uint8_t)) != BBZVM_INSTR_NOP) {
   d53dc:	4625      	mov	r5, r4
   d53de:	6823      	ldr	r3, [r4, #0]
   d53e0:	2101      	movs	r1, #1
   d53e2:	685a      	ldr	r2, [r3, #4]
   d53e4:	8958      	ldrh	r0, [r3, #10]
   d53e6:	4790      	blx	r2
   d53e8:	7803      	ldrb	r3, [r0, #0]
   d53ea:	b13b      	cbz	r3, d53fc <bbzvm_set_bcode+0x3c>
        bbzvm_step();
   d53ec:	f7ff fe74 	bl	d50d8 <bbzvm_step>
        if(vm->state != BBZVM_STATE_READY) return;
   d53f0:	682b      	ldr	r3, [r5, #0]
   d53f2:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d53f6:	2b01      	cmp	r3, #1
   d53f8:	d0f1      	beq.n	d53de <bbzvm_set_bcode+0x1e>
   d53fa:	bd38      	pop	{r3, r4, r5, pc}
    }

    bbzvm_step();
}
   d53fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    while(*vm->bcode_fetch_fun(vm->pc, sizeof(uint8_t)) != BBZVM_INSTR_NOP) {
        bbzvm_step();
        if(vm->state != BBZVM_STATE_READY) return;
    }

    bbzvm_step();
   d5400:	f7ff be6a 	b.w	d50d8 <bbzvm_step>
   d5404:	2003e3f4 	.word	0x2003e3f4

000d5408 <bbzvm_closure_call>:
bbzheap_idx_t bbzvm_stack_at(int16_t idx) { return vm->stack[vm->stackptr - idx]; }

/****************************************/
/****************************************/

void bbzvm_closure_call(uint16_t argc) {
   d5408:	b538      	push	{r3, r4, r5, lr}
    bbzvm_assert_state();
   d540a:	4c0d      	ldr	r4, [pc, #52]	; (d5440 <bbzvm_closure_call+0x38>)
   d540c:	6823      	ldr	r3, [r4, #0]
   d540e:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d5412:	2b04      	cmp	r3, #4
   d5414:	d013      	beq.n	d543e <bbzvm_closure_call+0x36>
    bbzvm_pushi(argc);
   d5416:	b200      	sxth	r0, r0
   d5418:	f7ff f971 	bl	d46fe <bbzvm_pushi>
    int16_t blockptr = vm->blockptr;
   d541c:	6823      	ldr	r3, [r4, #0]
   d541e:	f9b3 559d 	ldrsh.w	r5, [r3, #1437]	; 0x59d
    bbzvm_callc();
   d5422:	f7ff fac5 	bl	d49b0 <bbzvm_callc>
    while(blockptr < vm->blockptr) {
   d5426:	6823      	ldr	r3, [r4, #0]
   d5428:	f9b3 259d 	ldrsh.w	r2, [r3, #1437]	; 0x59d
   d542c:	42aa      	cmp	r2, r5
   d542e:	dd06      	ble.n	d543e <bbzvm_closure_call+0x36>
        if(vm->state != BBZVM_STATE_READY) return;
   d5430:	f893 3594 	ldrb.w	r3, [r3, #1428]	; 0x594
   d5434:	2b01      	cmp	r3, #1
   d5436:	d102      	bne.n	d543e <bbzvm_closure_call+0x36>
        bbzvm_step();
   d5438:	f7ff fe4e 	bl	d50d8 <bbzvm_step>
   d543c:	e7f3      	b.n	d5426 <bbzvm_closure_call+0x1e>
   d543e:	bd38      	pop	{r3, r4, r5, pc}
   d5440:	2003e3f4 	.word	0x2003e3f4

000d5444 <bbzvm_gsym_register>:
}

/****************************************/
/****************************************/

uint8_t bbzvm_gsym_register(uint16_t sid, bbzheap_idx_t v) {
   d5444:	b538      	push	{r3, r4, r5, lr}
   d5446:	460c      	mov	r4, r1
   d5448:	4605      	mov	r5, r0
    Serial.printlnf("Test 4.1");
   d544a:	f002 fbeb 	bl	d7c24 <_Z16_fetch_usbserialv>
   d544e:	4911      	ldr	r1, [pc, #68]	; (d5494 <bbzvm_gsym_register+0x50>)
   d5450:	f7fe fe2d 	bl	d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_pushs(sid);
   d5454:	4628      	mov	r0, r5
   d5456:	f7ff fb92 	bl	d4b7e <bbzvm_pushs>
    Serial.printlnf("Test 4.2");
   d545a:	f002 fbe3 	bl	d7c24 <_Z16_fetch_usbserialv>
   d545e:	490e      	ldr	r1, [pc, #56]	; (d5498 <bbzvm_gsym_register+0x54>)
   d5460:	f7fe fe25 	bl	d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_push(v);
   d5464:	4620      	mov	r0, r4
   d5466:	f7ff f8bd 	bl	d45e4 <bbzvm_push>
    Serial.printlnf("Test 4.3");
   d546a:	f002 fbdb 	bl	d7c24 <_Z16_fetch_usbserialv>
   d546e:	490b      	ldr	r1, [pc, #44]	; (d549c <bbzvm_gsym_register+0x58>)
   d5470:	f7fe fe1d 	bl	d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_gstore();
   d5474:	f7ff fd52 	bl	d4f1c <bbzvm_gstore>
    Serial.printlnf("Test 4.4");
   d5478:	f002 fbd4 	bl	d7c24 <_Z16_fetch_usbserialv>
   d547c:	4908      	ldr	r1, [pc, #32]	; (d54a0 <bbzvm_gsym_register+0x5c>)
   d547e:	f7fe fe16 	bl	d40ae <_ZN5Print8printlnfIIEEEjPKcDpT_>
    bbzvm_assert_state(0);
   d5482:	4b08      	ldr	r3, [pc, #32]	; (d54a4 <bbzvm_gsym_register+0x60>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	f893 0594 	ldrb.w	r0, [r3, #1428]	; 0x594
    return 1;
}
   d548a:	3804      	subs	r0, #4
   d548c:	bf18      	it	ne
   d548e:	2001      	movne	r0, #1
   d5490:	bd38      	pop	{r3, r4, r5, pc}
   d5492:	bf00      	nop
   d5494:	000d8c97 	.word	0x000d8c97
   d5498:	000d8ca0 	.word	0x000d8ca0
   d549c:	000d8ca9 	.word	0x000d8ca9
   d54a0:	000d8cb2 	.word	0x000d8cb2
   d54a4:	2003e3f4 	.word	0x2003e3f4

000d54a8 <bbzvm_construct>:
           vm->bcode_fetch_fun ? _instr_desc[*vm->bcode_fetch_fun(vm->dbg_pc, 1)] : "N/A", _error_desc[errcode]);
#endif // !BBZ_XTREME_MEMORY
#endif // DEBUG_VM
}

void bbzvm_construct(bbzrobot_id_t robot) {
   d54a8:	b538      	push	{r3, r4, r5, lr}
    vm->bcode_fetch_fun = NULL;
   d54aa:	4d45      	ldr	r5, [pc, #276]	; (d55c0 <bbzvm_construct+0x118>)
    vm->bcode_size = 0;
    vm->pc = 0;
    vm->state = BBZVM_STATE_NOCODE;
    vm->error = BBZVM_ERROR_NONE;
    vm->error_receiver_fun = dftl_error_receiver;
   d54ac:	4a45      	ldr	r2, [pc, #276]	; (d55c4 <bbzvm_construct+0x11c>)
#endif // !BBZ_XTREME_MEMORY
#endif // DEBUG_VM
}

void bbzvm_construct(bbzrobot_id_t robot) {
    vm->bcode_fetch_fun = NULL;
   d54ae:	682b      	ldr	r3, [r5, #0]
   d54b0:	2400      	movs	r4, #0
    vm->bcode_size = 0;
    vm->pc = 0;
    vm->state = BBZVM_STATE_NOCODE;
    vm->error = BBZVM_ERROR_NONE;
    vm->error_receiver_fun = dftl_error_receiver;
   d54b2:	601a      	str	r2, [r3, #0]
#endif // !BBZ_XTREME_MEMORY
#endif // DEBUG_VM
}

void bbzvm_construct(bbzrobot_id_t robot) {
    vm->bcode_fetch_fun = NULL;
   d54b4:	711c      	strb	r4, [r3, #4]
   d54b6:	715c      	strb	r4, [r3, #5]
   d54b8:	719c      	strb	r4, [r3, #6]
   d54ba:	71dc      	strb	r4, [r3, #7]
    vm->bcode_size = 0;
   d54bc:	721c      	strb	r4, [r3, #8]
   d54be:	725c      	strb	r4, [r3, #9]
    vm->pc = 0;
   d54c0:	729c      	strb	r4, [r3, #10]
   d54c2:	72dc      	strb	r4, [r3, #11]
    vm->state = BBZVM_STATE_NOCODE;
   d54c4:	f883 4594 	strb.w	r4, [r3, #1428]	; 0x594
    vm->error = BBZVM_ERROR_NONE;
   d54c8:	f883 4595 	strb.w	r4, [r3, #1429]	; 0x595
    vm->error_receiver_fun = dftl_error_receiver;
    vm->stackptr = -1;
   d54cc:	682b      	ldr	r3, [r5, #0]
   d54ce:	f04f 32ff 	mov.w	r2, #4294967295
   d54d2:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
   d54d6:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
    vm->blockptr = vm->stackptr;
   d54da:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
   d54de:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
    vm->lsyms = 0;
   d54e2:	731c      	strb	r4, [r3, #12]
   d54e4:	735c      	strb	r4, [r3, #13]
    vm->robot = robot;
   d54e6:	f8a3 0596 	strh.w	r0, [r3, #1430]	; 0x596
    vm->flist = 0;
   d54ea:	f883 445c 	strb.w	r4, [r3, #1116]	; 0x45c
   d54ee:	f883 445d 	strb.w	r4, [r3, #1117]	; 0x45d

    // Setup things
    bbzheap_clear();
   d54f2:	f000 fde1 	bl	d60b8 <bbzheap_clear>
    bbzinmsg_queue_construct();
   d54f6:	6828      	ldr	r0, [r5, #0]
   d54f8:	230b      	movs	r3, #11
   d54fa:	461a      	mov	r2, r3
   d54fc:	f200 416b 	addw	r1, r0, #1131	; 0x46b
   d5500:	f200 4063 	addw	r0, r0, #1123	; 0x463
   d5504:	f001 fa8e 	bl	d6a24 <bbzringbuf_construct>
    bbzoutmsg_queue_construct();
   d5508:	f000 fd22 	bl	d5f50 <bbzoutmsg_queue_construct>

    // Allocate singleton objects
    bbzheap_obj_alloc(BBZTYPE_NIL, &vm->nil);
   d550c:	6829      	ldr	r1, [r5, #0]
   d550e:	4620      	mov	r0, r4
   d5510:	f501 618b 	add.w	r1, r1, #1112	; 0x458
   d5514:	f000 fe66 	bl	d61e4 <bbzheap_obj_alloc>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->nil));
   d5518:	682b      	ldr	r3, [r5, #0]
   d551a:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
   d551e:	f000 fddf 	bl	d60e0 <bbzheap_obj_at>
   d5522:	7803      	ldrb	r3, [r0, #0]
   d5524:	f043 0310 	orr.w	r3, r3, #16
   d5528:	7003      	strb	r3, [r0, #0]
    bbzheap_obj_at(vm->nil)->i.value = 0;
   d552a:	682b      	ldr	r3, [r5, #0]
   d552c:	f8b3 0458 	ldrh.w	r0, [r3, #1112]	; 0x458
   d5530:	f000 fdd6 	bl	d60e0 <bbzheap_obj_at>
   d5534:	7044      	strb	r4, [r0, #1]
   d5536:	7084      	strb	r4, [r0, #2]
    bbzdarray_new(&vm->dflt_actrec);
   d5538:	6828      	ldr	r0, [r5, #0]
   d553a:	f200 405a 	addw	r0, r0, #1114	; 0x45a
   d553e:	f001 fd0a 	bl	d6f56 <bbzdarray_new>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->dflt_actrec));
   d5542:	682b      	ldr	r3, [r5, #0]
   d5544:	f8b3 045a 	ldrh.w	r0, [r3, #1114]	; 0x45a
   d5548:	f000 fdca 	bl	d60e0 <bbzheap_obj_at>
   d554c:	7803      	ldrb	r3, [r0, #0]
   d554e:	f043 0310 	orr.w	r3, r3, #16
   d5552:	7003      	strb	r3, [r0, #0]
    bbzdarray_push(vm->dflt_actrec, vm->nil);
   d5554:	682b      	ldr	r3, [r5, #0]
   d5556:	f8b3 1458 	ldrh.w	r1, [r3, #1112]	; 0x458
   d555a:	f8b3 045a 	ldrh.w	r0, [r3, #1114]	; 0x45a
   d555e:	f001 fdc7 	bl	d70f0 <bbzdarray_push>

    // Create various arrays
    bbzdarray_new(&vm->flist);
   d5562:	6828      	ldr	r0, [r5, #0]
   d5564:	f200 405c 	addw	r0, r0, #1116	; 0x45c
   d5568:	f001 fcf5 	bl	d6f56 <bbzdarray_new>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->flist));
   d556c:	682b      	ldr	r3, [r5, #0]
   d556e:	f8b3 045c 	ldrh.w	r0, [r3, #1116]	; 0x45c
   d5572:	f000 fdb5 	bl	d60e0 <bbzheap_obj_at>
   d5576:	7803      	ldrb	r3, [r0, #0]
   d5578:	f043 0310 	orr.w	r3, r3, #16
   d557c:	7003      	strb	r3, [r0, #0]

    // Create global symbols table
    bbzheap_obj_alloc(BBZTYPE_TABLE, &vm->gsyms);
   d557e:	6829      	ldr	r1, [r5, #0]
   d5580:	2004      	movs	r0, #4
   d5582:	310e      	adds	r1, #14
   d5584:	f000 fe2e 	bl	d61e4 <bbzheap_obj_alloc>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->gsyms));
   d5588:	682b      	ldr	r3, [r5, #0]
   d558a:	89d8      	ldrh	r0, [r3, #14]
   d558c:	f000 fda8 	bl	d60e0 <bbzheap_obj_at>
   d5590:	7803      	ldrb	r3, [r0, #0]
   d5592:	f043 0310 	orr.w	r3, r3, #16
   d5596:	7003      	strb	r3, [r0, #0]
/****************************************/
/****************************************/

ALWAYS_INLINE
void bbzvm_register_globals() {
    bbzvm_pushi(vm->robot);
   d5598:	682b      	ldr	r3, [r5, #0]
   d559a:	f9b3 0596 	ldrsh.w	r0, [r3, #1430]	; 0x596
   d559e:	f7ff f8ae 	bl	d46fe <bbzvm_pushi>
    bbzvm_gsym_register(__BBZSTRID_id, bbzvm_stack_at(0));
   d55a2:	4620      	mov	r0, r4
   d55a4:	f7fe ff80 	bl	d44a8 <bbzvm_stack_at>
   d55a8:	4601      	mov	r1, r0
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff ff4a 	bl	d5444 <bbzvm_gsym_register>
    bbzvm_pop();
   d55b0:	f7fe ff88 	bl	d44c4 <bbzvm_pop>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->gsyms));

    bbzvm_register_globals();

    // Register things
    bbzvstig_register();
   d55b4:	f000 fc5a 	bl	d5e6c <bbzvstig_register>
    bbzswarm_register();
    bbzneighbors_register();
}
   d55b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    bbzvm_register_globals();

    // Register things
    bbzvstig_register();
    bbzswarm_register();
   d55bc:	f000 b954 	b.w	d5868 <bbzswarm_register>
   d55c0:	2003e3f4 	.word	0x2003e3f4
   d55c4:	000d4231 	.word	0x000d4231

000d55c8 <_GLOBAL__sub_I_vm>:
   d55c8:	f001 bffe 	b.w	d75c8 <HAL_Pin_Map>

000d55cc <_ZL13swarmlist_sett17swarmlist_entry_t>:
        return (swarmlist_entry_t){.swarmlist = (bbzswarmlist_t)~0};
    }
}

static void swarmlist_set(bbzrobot_id_t robot, swarmlist_entry_t entry) {
    if (robot == vm->robot) {
   d55cc:	4b05      	ldr	r3, [pc, #20]	; (d55e4 <_ZL13swarmlist_sett17swarmlist_entry_t+0x18>)
   d55ce:	681b      	ldr	r3, [r3, #0]
   d55d0:	f8b3 2596 	ldrh.w	r2, [r3, #1430]	; 0x596
   d55d4:	4282      	cmp	r2, r0
   d55d6:	d102      	bne.n	d55de <_ZL13swarmlist_sett17swarmlist_entry_t+0x12>
        vm->swarm.my_swarmlist = entry.swarmlist;
   d55d8:	f883 1462 	strb.w	r1, [r3, #1122]	; 0x462
   d55dc:	4770      	bx	lr
    }
    else {
        bbzvm_seterror(BBZVM_ERROR_OUTOFRANGE);
   d55de:	2007      	movs	r0, #7
   d55e0:	f7fe be8a 	b.w	d42f8 <bbzvm_seterror>
   d55e4:	2003e3f4 	.word	0x2003e3f4

000d55e8 <_ZL6get_idv>:
/**
 * @brief Gets the ID of a subswarm table.
 * @details The table is expected to be at stack top, and will be popped.
 * @return The ID of the subswarm table.
 */
static bbzswarm_id_t get_id() {
   d55e8:	b510      	push	{r4, lr}
    // Push swarm ID (which pops the table)
    bbzvm_pushs(__BBZSTRID_id);
   d55ea:	2000      	movs	r0, #0
   d55ec:	f7ff fac7 	bl	d4b7e <bbzvm_pushs>
    bbzvm_tget();
   d55f0:	f7ff fc26 	bl	d4e40 <bbzvm_tget>

    // Fetch and pop swarm ID
    bbzswarm_id_t swarm = bbzheap_obj_at(bbzvm_stack_at(0))->i.value;
   d55f4:	2000      	movs	r0, #0
   d55f6:	f7fe ff57 	bl	d44a8 <bbzvm_stack_at>
   d55fa:	f000 fd71 	bl	d60e0 <bbzheap_obj_at>
   d55fe:	f9b0 4001 	ldrsh.w	r4, [r0, #1]
   d5602:	b2e4      	uxtb	r4, r4
    bbzvm_pop();
   d5604:	f7fe ff5e 	bl	d44c4 <bbzvm_pop>
    return swarm;
}
   d5608:	4620      	mov	r0, r4
   d560a:	bd10      	pop	{r4, pc}

000d560c <_ZL25swarmlist_entry_fromswarmh>:
 * @note Sets BBZVM_ERROR_SWARM if swarm ID >= 8.
 * @param[in] swarm The swarm's ID.
 * @return The created entry.
 */
static swarmlist_entry_t swarmlist_entry_fromswarm(bbzswarm_id_t swarm) {
    if (swarm < 8 * sizeof(bbzswarmlist_t)) {
   d560c:	2807      	cmp	r0, #7
 * (if applicable).
 * @note Sets BBZVM_ERROR_SWARM if swarm ID >= 8.
 * @param[in] swarm The swarm's ID.
 * @return The created entry.
 */
static swarmlist_entry_t swarmlist_entry_fromswarm(bbzswarm_id_t swarm) {
   d560e:	b508      	push	{r3, lr}
    if (swarm < 8 * sizeof(bbzswarmlist_t)) {
   d5610:	d808      	bhi.n	d5624 <_ZL25swarmlist_entry_fromswarmh+0x18>
   d5612:	2301      	movs	r3, #1
        swarmlist_entry_t ret = {.swarmlist = 1};
        uint8_t i = swarm;
        while(i > 0) {
   d5614:	b120      	cbz	r0, d5620 <_ZL25swarmlist_entry_fromswarmh+0x14>
            // Assembler dump shows that left-shifting is done by 1 bit at
            // a time on AVR processors. Doing the left shift directly
            // increases code size.
            ret.swarmlist <<= 1;
   d5616:	005b      	lsls	r3, r3, #1
            --i;
   d5618:	3801      	subs	r0, #1
        uint8_t i = swarm;
        while(i > 0) {
            // Assembler dump shows that left-shifting is done by 1 bit at
            // a time on AVR processors. Doing the left shift directly
            // increases code size.
            ret.swarmlist <<= 1;
   d561a:	b2db      	uxtb	r3, r3
            --i;
   d561c:	b2c0      	uxtb	r0, r0
 */
static swarmlist_entry_t swarmlist_entry_fromswarm(bbzswarm_id_t swarm) {
    if (swarm < 8 * sizeof(bbzswarmlist_t)) {
        swarmlist_entry_t ret = {.swarmlist = 1};
        uint8_t i = swarm;
        while(i > 0) {
   d561e:	e7f9      	b.n	d5614 <_ZL25swarmlist_entry_fromswarmh+0x8>
            // a time on AVR processors. Doing the left shift directly
            // increases code size.
            ret.swarmlist <<= 1;
            --i;
        }
        return ret;
   d5620:	4618      	mov	r0, r3
   d5622:	bd08      	pop	{r3, pc}
    }
    else {
        bbzvm_seterror(BBZVM_ERROR_SWARM);
   d5624:	200b      	movs	r0, #11
   d5626:	f7fe fe67 	bl	d42f8 <bbzvm_seterror>
   d562a:	f04f 0000 	mov.w	r0, #0
        return (swarmlist_entry_t){};
    }
}
   d562e:	bd08      	pop	{r3, pc}

000d5630 <_ZL13swarmlist_gett>:
// -------------------------------------
// -   WITHOUT SWARMLIST BROADCASTS    -
// -------------------------------------
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS

static swarmlist_entry_t swarmlist_get(bbzrobot_id_t robot) {
   d5630:	b508      	push	{r3, lr}
    if (robot == vm->robot) {
   d5632:	4b07      	ldr	r3, [pc, #28]	; (d5650 <_ZL13swarmlist_gett+0x20>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	f8b3 2596 	ldrh.w	r2, [r3, #1430]	; 0x596
   d563a:	4282      	cmp	r2, r0
   d563c:	d102      	bne.n	d5644 <_ZL13swarmlist_gett+0x14>
        return (swarmlist_entry_t){.swarmlist = vm->swarm.my_swarmlist};
   d563e:	f893 0462 	ldrb.w	r0, [r3, #1122]	; 0x462
   d5642:	bd08      	pop	{r3, pc}
    }
    else {
        bbzvm_seterror(BBZVM_ERROR_OUTOFRANGE);
   d5644:	2007      	movs	r0, #7
   d5646:	f7fe fe57 	bl	d42f8 <bbzvm_seterror>
   d564a:	f04f 30ff 	mov.w	r0, #4294967295
        return (swarmlist_entry_t){.swarmlist = (bbzswarmlist_t)~0};
    }
}
   d564e:	bd08      	pop	{r3, pc}
   d5650:	2003e3f4 	.word	0x2003e3f4

000d5654 <bbzswarm_create>:

// ======================================
// =        BUZZ SWARM CLOSURES         =
// ======================================

void bbzswarm_create() {
   d5654:	b513      	push	{r0, r1, r4, lr}
    bbzvm_assert_lnum(1);
   d5656:	4c26      	ldr	r4, [pc, #152]	; (d56f0 <bbzswarm_create+0x9c>)
   d5658:	6823      	ldr	r3, [r4, #0]
   d565a:	8998      	ldrh	r0, [r3, #12]
   d565c:	f001 fde8 	bl	d7230 <bbzdarray_size>
   d5660:	2802      	cmp	r0, #2
   d5662:	d003      	beq.n	d566c <bbzswarm_create+0x18>
   d5664:	2003      	movs	r0, #3
   d5666:	f7fe fe47 	bl	d42f8 <bbzvm_seterror>
   d566a:	e03f      	b.n	d56ec <bbzswarm_create+0x98>

    uint16_t swarm = bbzheap_obj_at(bbzvm_locals_at(1))->i.value;
   d566c:	6823      	ldr	r3, [r4, #0]
   d566e:	f10d 0206 	add.w	r2, sp, #6
   d5672:	8998      	ldrh	r0, [r3, #12]
   d5674:	2101      	movs	r1, #1
   d5676:	f001 fcab 	bl	d6fd0 <bbzdarray_get>
   d567a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d567e:	f000 fd2f 	bl	d60e0 <bbzheap_obj_at>
   d5682:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d5686:	b21c      	sxth	r4, r3

    if (swarm < 8) {
   d5688:	b29b      	uxth	r3, r3
   d568a:	2b07      	cmp	r3, #7
   d568c:	d827      	bhi.n	d56de <bbzswarm_create+0x8a>
 * Pushes a table containing all the fields that a subswarm table has.
 * @param[in] swarm The ID of the swarm that this table is for.
 */
static void make_table(bbzswarm_id_t swarm) {
    // Create table
    bbzvm_pusht();
   d568e:	f7fe ffbd 	bl	d460c <bbzvm_pusht>

    // Add swarm id
    bbzvm_pushi(swarm);
   d5692:	4620      	mov	r0, r4
   d5694:	f7ff f833 	bl	d46fe <bbzvm_pushi>
    bbzheap_idx_t swarm_obj = bbzvm_stack_at(0);
   d5698:	2000      	movs	r0, #0
   d569a:	f7fe ff05 	bl	d44a8 <bbzvm_stack_at>
   d569e:	4604      	mov	r4, r0
    bbzvm_pop();
   d56a0:	f7fe ff10 	bl	d44c4 <bbzvm_pop>
    bbztable_add_data(__BBZSTRID_id, swarm_obj);
   d56a4:	4621      	mov	r1, r4
   d56a6:	2000      	movs	r0, #0
   d56a8:	f001 f82b 	bl	d6702 <_Z17bbztable_add_datatt>

    // Add closures
    bbztable_add_function(__BBZSTRID_join,   bbzswarm_join);
   d56ac:	4911      	ldr	r1, [pc, #68]	; (d56f4 <bbzswarm_create+0xa0>)
   d56ae:	2008      	movs	r0, #8
   d56b0:	f001 f812 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_leave,  bbzswarm_leave);
   d56b4:	4910      	ldr	r1, [pc, #64]	; (d56f8 <bbzswarm_create+0xa4>)
   d56b6:	200a      	movs	r0, #10
   d56b8:	f001 f80e 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_in,     bbzswarm_in);
   d56bc:	490f      	ldr	r1, [pc, #60]	; (d56fc <bbzswarm_create+0xa8>)
   d56be:	200b      	movs	r0, #11
   d56c0:	f001 f80a 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_select, bbzswarm_select);
   d56c4:	490e      	ldr	r1, [pc, #56]	; (d5700 <bbzswarm_create+0xac>)
   d56c6:	2003      	movs	r0, #3
   d56c8:	f001 f806 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_unselect, bbzswarm_unselect);
   d56cc:	490d      	ldr	r1, [pc, #52]	; (d5704 <bbzswarm_create+0xb0>)
   d56ce:	2009      	movs	r0, #9
   d56d0:	f001 f802 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_exec,   bbzswarm_exec);
   d56d4:	490c      	ldr	r1, [pc, #48]	; (d5708 <bbzswarm_create+0xb4>)
   d56d6:	200c      	movs	r0, #12
   d56d8:	f000 fffe 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
   d56dc:	e004      	b.n	d56e8 <bbzswarm_create+0x94>

    if (swarm < 8) {
        make_table(swarm);
    }
    else {
        bbzvm_pushnil();
   d56de:	f7fe fff5 	bl	d46cc <bbzvm_pushnil>
        bbzvm_seterror(BBZVM_ERROR_SWARM);
   d56e2:	200b      	movs	r0, #11
   d56e4:	f7fe fe08 	bl	d42f8 <bbzvm_seterror>
    }

    bbzvm_ret1();
   d56e8:	f7ff fca0 	bl	d502c <bbzvm_ret1>
}
   d56ec:	b002      	add	sp, #8
   d56ee:	bd10      	pop	{r4, pc}
   d56f0:	2003e3f4 	.word	0x2003e3f4
   d56f4:	000d5901 	.word	0x000d5901
   d56f8:	000d5961 	.word	0x000d5961
   d56fc:	000d59bd 	.word	0x000d59bd
   d5700:	000d5811 	.word	0x000d5811
   d5704:	000d583d 	.word	0x000d583d
   d5708:	000d5a01 	.word	0x000d5a01

000d570c <bbzswarm_id>:

/****************************************/
/****************************************/

void bbzswarm_id() {
   d570c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbzvm_assert_exec(bbzvm_locals_count() <= 1, BBZVM_ERROR_LNUM);
   d570e:	4c24      	ldr	r4, [pc, #144]	; (d57a0 <bbzswarm_id+0x94>)
   d5710:	6823      	ldr	r3, [r4, #0]
   d5712:	8998      	ldrh	r0, [r3, #12]
   d5714:	f001 fd8c 	bl	d7230 <bbzdarray_size>
   d5718:	2802      	cmp	r0, #2
   d571a:	dd01      	ble.n	d5720 <bbzswarm_id+0x14>
   d571c:	2003      	movs	r0, #3
   d571e:	e022      	b.n	d5766 <bbzswarm_id+0x5a>

    if (!bbzdarray_isempty(vm->swarm.swarmstack)) {
   d5720:	6823      	ldr	r3, [r4, #0]
   d5722:	f8b3 0460 	ldrh.w	r0, [r3, #1120]	; 0x460
   d5726:	f001 fd83 	bl	d7230 <bbzdarray_size>
   d572a:	b378      	cbz	r0, d578c <bbzswarm_id+0x80>
        uint16_t stack_depth;

        // Get stack depth (defaults to 0)
        if (bbzvm_locals_count() == 0) {
   d572c:	6823      	ldr	r3, [r4, #0]
   d572e:	8998      	ldrh	r0, [r3, #12]
   d5730:	f001 fd7e 	bl	d7230 <bbzdarray_size>
   d5734:	2801      	cmp	r0, #1
   d5736:	d00d      	beq.n	d5754 <bbzswarm_id+0x48>
            stack_depth = 0;
        }
        else {
            stack_depth = bbzheap_obj_at(bbzvm_locals_at(1))->i.value;
   d5738:	6823      	ldr	r3, [r4, #0]
   d573a:	f10d 0206 	add.w	r2, sp, #6
   d573e:	2101      	movs	r1, #1
   d5740:	8998      	ldrh	r0, [r3, #12]
   d5742:	f001 fc45 	bl	d6fd0 <bbzdarray_get>
   d5746:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d574a:	f000 fcc9 	bl	d60e0 <bbzheap_obj_at>
   d574e:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   d5752:	e000      	b.n	d5756 <bbzswarm_id+0x4a>
    if (!bbzdarray_isempty(vm->swarm.swarmstack)) {
        uint16_t stack_depth;

        // Get stack depth (defaults to 0)
        if (bbzvm_locals_count() == 0) {
            stack_depth = 0;
   d5754:	2500      	movs	r5, #0
        else {
            stack_depth = bbzheap_obj_at(bbzvm_locals_at(1))->i.value;
        }

        // Make sure we have enough elements
        uint16_t sz = bbzdarray_size(vm->swarm.swarmstack);
   d5756:	6823      	ldr	r3, [r4, #0]
   d5758:	f8b3 0460 	ldrh.w	r0, [r3, #1120]	; 0x460
   d575c:	f001 fd68 	bl	d7230 <bbzdarray_size>
        bbzvm_assert_exec(
   d5760:	42a8      	cmp	r0, r5
   d5762:	d803      	bhi.n	d576c <bbzswarm_id+0x60>
   d5764:	2007      	movs	r0, #7
   d5766:	f7fe fdc7 	bl	d42f8 <bbzvm_seterror>
   d576a:	e016      	b.n	d579a <bbzswarm_id+0x8e>
            stack_depth < sz,
            BBZVM_ERROR_OUTOFRANGE);

        // Get swarm ID.
        bbzheap_idx_t v;
        bbzdarray_get(vm->swarm.swarmstack, sz - stack_depth - 1, &v);
   d576c:	4b0c      	ldr	r3, [pc, #48]	; (d57a0 <bbzswarm_id+0x94>)
   d576e:	3801      	subs	r0, #1
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	1b41      	subs	r1, r0, r5
   d5774:	f10d 0206 	add.w	r2, sp, #6
   d5778:	b289      	uxth	r1, r1
   d577a:	f8b3 0460 	ldrh.w	r0, [r3, #1120]	; 0x460
   d577e:	f001 fc27 	bl	d6fd0 <bbzdarray_get>
        bbzvm_push(v);
   d5782:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d5786:	f7fe ff2d 	bl	d45e4 <bbzvm_push>
   d578a:	e004      	b.n	d5796 <bbzswarm_id+0x8a>
    }
    else {
        // Swarmstack empty. Push nil instead.
        bbzvm_pushnil();
   d578c:	f7fe ff9e 	bl	d46cc <bbzvm_pushnil>
        bbzvm_seterror(BBZVM_ERROR_OUTOFRANGE);
   d5790:	2007      	movs	r0, #7
   d5792:	f7fe fdb1 	bl	d42f8 <bbzvm_seterror>
    }

    bbzvm_ret1();
   d5796:	f7ff fc49 	bl	d502c <bbzvm_ret1>
}
   d579a:	b003      	add	sp, #12
   d579c:	bd30      	pop	{r4, r5, pc}
   d579e:	bf00      	nop
   d57a0:	2003e3f4 	.word	0x2003e3f4

000d57a4 <_ZL21swarm_select_unselecth>:

/**
 * @brief Base for bbzswarm_select and bbzswarm_unselect.
 * @param[in] select Nonzero if selecting, 0 if unselecting.
 */
static void swarm_select_unselect(uint8_t select) {
   d57a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t should_join = bbztype_tobool(bbzheap_obj_at(bbzvm_locals_at(1)));
   d57a6:	4c19      	ldr	r4, [pc, #100]	; (d580c <_ZL21swarm_select_unselecth+0x68>)
   d57a8:	6823      	ldr	r3, [r4, #0]
   d57aa:	f10d 0206 	add.w	r2, sp, #6
   d57ae:	2101      	movs	r1, #1

/**
 * @brief Base for bbzswarm_select and bbzswarm_unselect.
 * @param[in] select Nonzero if selecting, 0 if unselecting.
 */
static void swarm_select_unselect(uint8_t select) {
   d57b0:	4606      	mov	r6, r0
    uint8_t should_join = bbztype_tobool(bbzheap_obj_at(bbzvm_locals_at(1)));
   d57b2:	8998      	ldrh	r0, [r3, #12]
   d57b4:	f001 fc0c 	bl	d6fd0 <bbzdarray_get>
   d57b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d57bc:	f000 fc90 	bl	d60e0 <bbzheap_obj_at>
 * @param[in] o The object to verify.
 * @return 1 if the object can be considered true, otherwise 0.
 */
ALWAYS_INLINE
uint8_t bbztype_tobool(const bbzobj_t* o) {
    switch(bbztype(*o)) {
   d57c0:	7803      	ldrb	r3, [r0, #0]
   d57c2:	f003 0307 	and.w	r3, r3, #7
   d57c6:	2b01      	cmp	r3, #1
   d57c8:	d11d      	bne.n	d5806 <_ZL21swarm_select_unselecth+0x62>
    if (should_join) {
   d57ca:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d57ce:	b1d3      	cbz	r3, d5806 <_ZL21swarm_select_unselecth+0x62>
        bbzvm_lload(0); // Push table we are calling '(un)select' on.
   d57d0:	2000      	movs	r0, #0
   d57d2:	f7fe ff23 	bl	d461c <bbzvm_lload>
        bbzswarm_id_t swarm = get_id();
   d57d6:	f7ff ff07 	bl	d55e8 <_ZL6get_idv>
        swarmlist_entry_t entry = swarmlist_entry_fromswarm(swarm);
   d57da:	f7ff ff17 	bl	d560c <_ZL25swarmlist_entry_fromswarmh>
        swarmlist_entry_t existing = swarmlist_get(vm->robot);
   d57de:	6823      	ldr	r3, [r4, #0]
static void swarm_select_unselect(uint8_t select) {
    uint8_t should_join = bbztype_tobool(bbzheap_obj_at(bbzvm_locals_at(1)));
    if (should_join) {
        bbzvm_lload(0); // Push table we are calling '(un)select' on.
        bbzswarm_id_t swarm = get_id();
        swarmlist_entry_t entry = swarmlist_entry_fromswarm(swarm);
   d57e0:	4605      	mov	r5, r0
   d57e2:	b2c7      	uxtb	r7, r0
        swarmlist_entry_t existing = swarmlist_get(vm->robot);
   d57e4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
   d57e8:	f7ff ff22 	bl	d5630 <_ZL13swarmlist_gett>
   d57ec:	b2c3      	uxtb	r3, r0
        if (select) {
   d57ee:	b116      	cbz	r6, d57f6 <_ZL21swarm_select_unselecth+0x52>
            existing.swarmlist |= entry.swarmlist; // Copy into existing entry to preserve
   d57f0:	ea47 0103 	orr.w	r1, r7, r3
   d57f4:	e002      	b.n	d57fc <_ZL21swarm_select_unselecth+0x58>
                                                   // the Lamport clock, if applicable.
        }
        else {
            existing.swarmlist &= ~entry.swarmlist; // Copy into existing entry to preserve
   d57f6:	ea20 0105 	bic.w	r1, r0, r5
   d57fa:	b2c9      	uxtb	r1, r1
                                                    // the Lamport clock, if applicable.
        }
        swarmlist_set(vm->robot, existing);
   d57fc:	6823      	ldr	r3, [r4, #0]
   d57fe:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
   d5802:	f7ff fee3 	bl	d55cc <_ZL13swarmlist_sett17swarmlist_entry_t>
    }
}
   d5806:	b003      	add	sp, #12
   d5808:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d580a:	bf00      	nop
   d580c:	2003e3f4 	.word	0x2003e3f4

000d5810 <bbzswarm_select>:

void bbzswarm_select() {
   d5810:	b508      	push	{r3, lr}
    bbzvm_assert_lnum(1);
   d5812:	4b09      	ldr	r3, [pc, #36]	; (d5838 <bbzswarm_select+0x28>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	8998      	ldrh	r0, [r3, #12]
   d5818:	f001 fd0a 	bl	d7230 <bbzdarray_size>
   d581c:	2802      	cmp	r0, #2
   d581e:	d004      	beq.n	d582a <bbzswarm_select+0x1a>
   d5820:	2003      	movs	r0, #3
    swarm_select_unselect(1);
    bbzvm_ret0();
}
   d5822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        swarmlist_set(vm->robot, existing);
    }
}

void bbzswarm_select() {
    bbzvm_assert_lnum(1);
   d5826:	f7fe bd67 	b.w	d42f8 <bbzvm_seterror>
    swarm_select_unselect(1);
   d582a:	2001      	movs	r0, #1
   d582c:	f7ff ffba 	bl	d57a4 <_ZL21swarm_select_unselecth>
    bbzvm_ret0();
}
   d5830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void bbzswarm_select() {
    bbzvm_assert_lnum(1);
    swarm_select_unselect(1);
    bbzvm_ret0();
   d5834:	f7ff bba6 	b.w	d4f84 <bbzvm_ret0>
   d5838:	2003e3f4 	.word	0x2003e3f4

000d583c <bbzswarm_unselect>:
}

/****************************************/
/****************************************/

void bbzswarm_unselect() {
   d583c:	b508      	push	{r3, lr}
    bbzvm_assert_lnum(1);
   d583e:	4b09      	ldr	r3, [pc, #36]	; (d5864 <bbzswarm_unselect+0x28>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	8998      	ldrh	r0, [r3, #12]
   d5844:	f001 fcf4 	bl	d7230 <bbzdarray_size>
   d5848:	2802      	cmp	r0, #2
   d584a:	d004      	beq.n	d5856 <bbzswarm_unselect+0x1a>
   d584c:	2003      	movs	r0, #3
    swarm_select_unselect(0);
    bbzvm_ret0();
}
   d584e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/****************************************/
/****************************************/

void bbzswarm_unselect() {
    bbzvm_assert_lnum(1);
   d5852:	f7fe bd51 	b.w	d42f8 <bbzvm_seterror>
    swarm_select_unselect(0);
   d5856:	2000      	movs	r0, #0
   d5858:	f7ff ffa4 	bl	d57a4 <_ZL21swarm_select_unselecth>
    bbzvm_ret0();
}
   d585c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/****************************************/

void bbzswarm_unselect() {
    bbzvm_assert_lnum(1);
    swarm_select_unselect(0);
    bbzvm_ret0();
   d5860:	f7ff bb90 	b.w	d4f84 <bbzvm_ret0>
   d5864:	2003e3f4 	.word	0x2003e3f4

000d5868 <bbzswarm_register>:
    // Initialize swarmlist.
    vm->swarm.my_swarmlist = 0;
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS
}

void bbzswarm_register() {
   d5868:	b510      	push	{r4, lr}
    bbzvm_pushs(__BBZSTRID_swarm);
   d586a:	2001      	movs	r0, #1
   d586c:	f7ff f987 	bl	d4b7e <bbzvm_pushs>
 * Constructs the 'swarm' table and its dependencies.
 * @param[in] swarm Position, in the heap, of the swarm table.
 */
static void swarm_construct(bbzheap_idx_t swarm) {
    // Set swarm table
    vm->swarm.hpos = swarm;
   d5870:	4c17      	ldr	r4, [pc, #92]	; (d58d0 <bbzswarm_register+0x68>)

void bbzswarm_register() {
    bbzvm_pushs(__BBZSTRID_swarm);

    // Create the 'swarm' table
    bbzvm_pusht();
   d5872:	f7fe fecb 	bl	d460c <bbzvm_pusht>

    // Construct the 'swarm' structure.
    bbzheap_idx_t s = bbzvm_stack_at(0);
   d5876:	2000      	movs	r0, #0
   d5878:	f7fe fe16 	bl	d44a8 <bbzvm_stack_at>
 * Constructs the 'swarm' table and its dependencies.
 * @param[in] swarm Position, in the heap, of the swarm table.
 */
static void swarm_construct(bbzheap_idx_t swarm) {
    // Set swarm table
    vm->swarm.hpos = swarm;
   d587c:	6823      	ldr	r3, [r4, #0]
   d587e:	f8a3 045e 	strh.w	r0, [r3, #1118]	; 0x45e

    // Create swarmstack
    bbzdarray_new(&vm->swarm.swarmstack);
   d5882:	f503 608c 	add.w	r0, r3, #1120	; 0x460
   d5886:	f001 fb66 	bl	d6f56 <bbzdarray_new>

    // Make stuff permanent
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->swarm.hpos));
   d588a:	6823      	ldr	r3, [r4, #0]
   d588c:	f8b3 045e 	ldrh.w	r0, [r3, #1118]	; 0x45e
   d5890:	f000 fc26 	bl	d60e0 <bbzheap_obj_at>
   d5894:	7803      	ldrb	r3, [r0, #0]
   d5896:	f043 0310 	orr.w	r3, r3, #16
   d589a:	7003      	strb	r3, [r0, #0]
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->swarm.swarmstack));
   d589c:	6823      	ldr	r3, [r4, #0]
   d589e:	f8b3 0460 	ldrh.w	r0, [r3, #1120]	; 0x460
   d58a2:	f000 fc1d 	bl	d60e0 <bbzheap_obj_at>
   d58a6:	7803      	ldrb	r3, [r0, #0]
    // Construct the 'swarm' structure.
    bbzheap_idx_t s = bbzvm_stack_at(0);
    swarm_construct(s);

    // Add some fields to the table (most common fields first)
    bbztable_add_function(__BBZSTRID_create,       bbzswarm_create);
   d58a8:	490a      	ldr	r1, [pc, #40]	; (d58d4 <bbzswarm_register+0x6c>)
    // Create swarmstack
    bbzdarray_new(&vm->swarm.swarmstack);

    // Make stuff permanent
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->swarm.hpos));
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->swarm.swarmstack));
   d58aa:	f043 0310 	orr.w	r3, r3, #16
   d58ae:	7003      	strb	r3, [r0, #0]

#ifdef BBZ_DISABLE_SWARMLIST_BROADCASTS
    // Initialize swarmlist.
    vm->swarm.my_swarmlist = 0;
   d58b0:	6823      	ldr	r3, [r4, #0]
   d58b2:	2400      	movs	r4, #0
   d58b4:	f883 4462 	strb.w	r4, [r3, #1122]	; 0x462
    // Construct the 'swarm' structure.
    bbzheap_idx_t s = bbzvm_stack_at(0);
    swarm_construct(s);

    // Add some fields to the table (most common fields first)
    bbztable_add_function(__BBZSTRID_create,       bbzswarm_create);
   d58b8:	2002      	movs	r0, #2
   d58ba:	f000 ff0d 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_id,           bbzswarm_id);
   d58be:	4620      	mov	r0, r4
   d58c0:	4905      	ldr	r1, [pc, #20]	; (d58d8 <bbzswarm_register+0x70>)
   d58c2:	f000 ff09 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbzswarm_rmmember(vm->robot, 0); // Immediately remove us from swarm 0. The entry will still exist.
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    // Table is stack top, and string 'swarm' is stack #1. Register it.
    bbzvm_gstore();
}
   d58c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbzswarm_addmember(vm->robot, 0); // Add us as member of swarm 0, which creates the entry.
    bbzswarm_rmmember(vm->robot, 0); // Immediately remove us from swarm 0. The entry will still exist.
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    // Table is stack top, and string 'swarm' is stack #1. Register it.
    bbzvm_gstore();
   d58ca:	f7ff bb27 	b.w	d4f1c <bbzvm_gstore>
   d58ce:	bf00      	nop
   d58d0:	2003e3f4 	.word	0x2003e3f4
   d58d4:	000d5655 	.word	0x000d5655
   d58d8:	000d570d 	.word	0x000d570d

000d58dc <bbzswarm_addmember>:
    swarmlist_set(robot, existing);
    return existing.swarmlist;
}

bbzswarmlist_t bbzswarm_addmember(bbzrobot_id_t robot,
                                  bbzswarm_id_t swarm) {
   d58dc:	b538      	push	{r3, r4, r5, lr}
   d58de:	4605      	mov	r5, r0
 * @return The swarm list of the robot we added to/removed from the swarm.
 */
static bbzswarmlist_t addrm_member(bbzrobot_id_t robot,
                                   bbzswarm_id_t swarm,
                                   uint8_t should_add) {
    swarmlist_entry_t entry    = swarmlist_entry_fromswarm(swarm);
   d58e0:	4608      	mov	r0, r1
   d58e2:	f7ff fe93 	bl	d560c <_ZL25swarmlist_entry_fromswarmh>
   d58e6:	b2c4      	uxtb	r4, r0
    swarmlist_entry_t existing = swarmlist_get(robot);
   d58e8:	4628      	mov	r0, r5
   d58ea:	f7ff fea1 	bl	d5630 <_ZL13swarmlist_gett>
   d58ee:	b2c0      	uxtb	r0, r0
    if (should_add) {
        existing.swarmlist |= entry.swarmlist;
   d58f0:	4304      	orrs	r4, r0
    }
    else {
        existing.swarmlist &= ~entry.swarmlist;
    }
    swarmlist_set(robot, existing);
   d58f2:	4621      	mov	r1, r4
   d58f4:	4628      	mov	r0, r5
   d58f6:	f7ff fe69 	bl	d55cc <_ZL13swarmlist_sett17swarmlist_entry_t>
}

bbzswarmlist_t bbzswarm_addmember(bbzrobot_id_t robot,
                                  bbzswarm_id_t swarm) {
    return addrm_member(robot, swarm, 1);
}
   d58fa:	4620      	mov	r0, r4
   d58fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5900 <bbzswarm_join>:
}

/****************************************/
/****************************************/

void bbzswarm_join() {
   d5900:	b510      	push	{r4, lr}
    bbzvm_assert_lnum(0);
   d5902:	4c0d      	ldr	r4, [pc, #52]	; (d5938 <bbzswarm_join+0x38>)
   d5904:	6823      	ldr	r3, [r4, #0]
   d5906:	8998      	ldrh	r0, [r3, #12]
   d5908:	f001 fc92 	bl	d7230 <bbzdarray_size>
   d590c:	2801      	cmp	r0, #1
   d590e:	d004      	beq.n	d591a <bbzswarm_join+0x1a>
   d5910:	2003      	movs	r0, #3
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS
        RM_UNUSED_WARN(swarmlist);
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    bbzvm_ret0();
}
   d5912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/****************************************/
/****************************************/

void bbzswarm_join() {
    bbzvm_assert_lnum(0);
   d5916:	f7fe bcef 	b.w	d42f8 <bbzvm_seterror>

    bbzvm_lload(0); // Push table we are calling 'join' on.
   d591a:	2000      	movs	r0, #0
   d591c:	f7fe fe7e 	bl	d461c <bbzvm_lload>
    bbzswarm_id_t swarm = get_id();
   d5920:	f7ff fe62 	bl	d55e8 <_ZL6get_idv>
    bbzswarmlist_t swarmlist = bbzswarm_addmember(vm->robot, swarm);
   d5924:	6823      	ldr	r3, [r4, #0]
   d5926:	4601      	mov	r1, r0
   d5928:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
   d592c:	f7ff ffd6 	bl	d58dc <bbzswarm_addmember>
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS
        RM_UNUSED_WARN(swarmlist);
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    bbzvm_ret0();
}
   d5930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        RM_UNUSED_WARN(swarmlist);
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS
        RM_UNUSED_WARN(swarmlist);
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    bbzvm_ret0();
   d5934:	f7ff bb26 	b.w	d4f84 <bbzvm_ret0>
   d5938:	2003e3f4 	.word	0x2003e3f4

000d593c <bbzswarm_rmmember>:

/****************************************/
/****************************************/

bbzswarmlist_t bbzswarm_rmmember(bbzrobot_id_t robot,
                                 bbzswarm_id_t swarm) {
   d593c:	b538      	push	{r3, r4, r5, lr}
   d593e:	4605      	mov	r5, r0
 * @return The swarm list of the robot we added to/removed from the swarm.
 */
static bbzswarmlist_t addrm_member(bbzrobot_id_t robot,
                                   bbzswarm_id_t swarm,
                                   uint8_t should_add) {
    swarmlist_entry_t entry    = swarmlist_entry_fromswarm(swarm);
   d5940:	4608      	mov	r0, r1
   d5942:	f7ff fe63 	bl	d560c <_ZL25swarmlist_entry_fromswarmh>
   d5946:	4604      	mov	r4, r0
    swarmlist_entry_t existing = swarmlist_get(robot);
   d5948:	4628      	mov	r0, r5
   d594a:	f7ff fe71 	bl	d5630 <_ZL13swarmlist_gett>
    if (should_add) {
        existing.swarmlist |= entry.swarmlist;
    }
    else {
        existing.swarmlist &= ~entry.swarmlist;
   d594e:	ea20 0004 	bic.w	r0, r0, r4
   d5952:	b2c4      	uxtb	r4, r0
    }
    swarmlist_set(robot, existing);
   d5954:	4621      	mov	r1, r4
   d5956:	4628      	mov	r0, r5
   d5958:	f7ff fe38 	bl	d55cc <_ZL13swarmlist_sett17swarmlist_entry_t>
/****************************************/

bbzswarmlist_t bbzswarm_rmmember(bbzrobot_id_t robot,
                                 bbzswarm_id_t swarm) {
    return addrm_member(robot, swarm, 0);
}
   d595c:	4620      	mov	r0, r4
   d595e:	bd38      	pop	{r3, r4, r5, pc}

000d5960 <bbzswarm_leave>:
}

/****************************************/
/****************************************/

void bbzswarm_leave() {
   d5960:	b510      	push	{r4, lr}
    bbzvm_assert_lnum(0);
   d5962:	4c0d      	ldr	r4, [pc, #52]	; (d5998 <bbzswarm_leave+0x38>)
   d5964:	6823      	ldr	r3, [r4, #0]
   d5966:	8998      	ldrh	r0, [r3, #12]
   d5968:	f001 fc62 	bl	d7230 <bbzdarray_size>
   d596c:	2801      	cmp	r0, #1
   d596e:	d004      	beq.n	d597a <bbzswarm_leave+0x1a>
   d5970:	2003      	movs	r0, #3
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS
        RM_UNUSED_WARN(swarmlist);
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    bbzvm_ret0();
}
   d5972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/****************************************/
/****************************************/

void bbzswarm_leave() {
    bbzvm_assert_lnum(0);
   d5976:	f7fe bcbf 	b.w	d42f8 <bbzvm_seterror>

    bbzvm_lload(0); // Push table we are calling 'leave' on.
   d597a:	2000      	movs	r0, #0
   d597c:	f7fe fe4e 	bl	d461c <bbzvm_lload>
    bbzswarm_id_t swarm = get_id();
   d5980:	f7ff fe32 	bl	d55e8 <_ZL6get_idv>
    bbzswarmlist_t swarmlist = bbzswarm_rmmember(vm->robot, swarm);
   d5984:	6823      	ldr	r3, [r4, #0]
   d5986:	4601      	mov	r1, r0
   d5988:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
   d598c:	f7ff ffd6 	bl	d593c <bbzswarm_rmmember>
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS
        RM_UNUSED_WARN(swarmlist);
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    bbzvm_ret0();
}
   d5990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        RM_UNUSED_WARN(swarmlist);
#else // !BBZ_DISABLE_SWARMLIST_BROADCASTS
        RM_UNUSED_WARN(swarmlist);
#endif // !BBZ_DISABLE_SWARMLIST_BROADCASTS

    bbzvm_ret0();
   d5994:	f7ff baf6 	b.w	d4f84 <bbzvm_ret0>
   d5998:	2003e3f4 	.word	0x2003e3f4

000d599c <bbzswarm_isrobotin>:

/****************************************/
/****************************************/

uint8_t bbzswarm_isrobotin(bbzrobot_id_t robot,
                           bbzswarm_id_t swarm) {
   d599c:	b538      	push	{r3, r4, r5, lr}
   d599e:	4605      	mov	r5, r0
    swarmlist_entry_t entry = swarmlist_entry_fromswarm(swarm);
   d59a0:	4608      	mov	r0, r1
   d59a2:	f7ff fe33 	bl	d560c <_ZL25swarmlist_entry_fromswarmh>
   d59a6:	4604      	mov	r4, r0
    swarmlist_entry_t existing = swarmlist_get(robot);
   d59a8:	4628      	mov	r0, r5
   d59aa:	f7ff fe41 	bl	d5630 <_ZL13swarmlist_gett>
    return (existing.swarmlist & entry.swarmlist) != 0;
   d59ae:	4020      	ands	r0, r4
   d59b0:	b2c0      	uxtb	r0, r0
}
   d59b2:	3000      	adds	r0, #0
   d59b4:	bf18      	it	ne
   d59b6:	2001      	movne	r0, #1
   d59b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59bc <bbzswarm_in>:
}

/****************************************/
/****************************************/

void bbzswarm_in() {
   d59bc:	b510      	push	{r4, lr}
    bbzvm_assert_lnum(0);
   d59be:	4c0f      	ldr	r4, [pc, #60]	; (d59fc <bbzswarm_in+0x40>)
   d59c0:	6823      	ldr	r3, [r4, #0]
   d59c2:	8998      	ldrh	r0, [r3, #12]
   d59c4:	f001 fc34 	bl	d7230 <bbzdarray_size>
   d59c8:	2801      	cmp	r0, #1
   d59ca:	d004      	beq.n	d59d6 <bbzswarm_in+0x1a>
   d59cc:	2003      	movs	r0, #3
    // Get my swarm list
    uint8_t in = bbzswarm_isrobotin(vm->robot, swarm);
    bbzvm_pushi(in);

    bbzvm_ret1();
}
   d59ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/****************************************/
/****************************************/

void bbzswarm_in() {
    bbzvm_assert_lnum(0);
   d59d2:	f7fe bc91 	b.w	d42f8 <bbzvm_seterror>

    // Get swarm ID
    bbzvm_lload(0); // Push table we are calling 'in' on.
   d59d6:	2000      	movs	r0, #0
   d59d8:	f7fe fe20 	bl	d461c <bbzvm_lload>
    bbzswarm_id_t swarm = get_id();
   d59dc:	f7ff fe04 	bl	d55e8 <_ZL6get_idv>

    // Get my swarm list
    uint8_t in = bbzswarm_isrobotin(vm->robot, swarm);
   d59e0:	6823      	ldr	r3, [r4, #0]
   d59e2:	4601      	mov	r1, r0
   d59e4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
   d59e8:	f7ff ffd8 	bl	d599c <bbzswarm_isrobotin>
    bbzvm_pushi(in);
   d59ec:	b200      	sxth	r0, r0
   d59ee:	f7fe fe86 	bl	d46fe <bbzvm_pushi>

    bbzvm_ret1();
}
   d59f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Get my swarm list
    uint8_t in = bbzswarm_isrobotin(vm->robot, swarm);
    bbzvm_pushi(in);

    bbzvm_ret1();
   d59f6:	f7ff bb19 	b.w	d502c <bbzvm_ret1>
   d59fa:	bf00      	nop
   d59fc:	2003e3f4 	.word	0x2003e3f4

000d5a00 <bbzswarm_exec>:
}

/****************************************/
/****************************************/

void bbzswarm_exec() {
   d5a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbzvm_assert_lnum(1);
   d5a02:	4c25      	ldr	r4, [pc, #148]	; (d5a98 <bbzswarm_exec+0x98>)
   d5a04:	6823      	ldr	r3, [r4, #0]
   d5a06:	8998      	ldrh	r0, [r3, #12]
   d5a08:	f001 fc12 	bl	d7230 <bbzdarray_size>
   d5a0c:	2802      	cmp	r0, #2
   d5a0e:	d001      	beq.n	d5a14 <bbzswarm_exec+0x14>
   d5a10:	2003      	movs	r0, #3
   d5a12:	e010      	b.n	d5a36 <bbzswarm_exec+0x36>
    bbzvm_assert_type(bbzvm_locals_at(1), BBZTYPE_CLOSURE);
   d5a14:	6823      	ldr	r3, [r4, #0]
   d5a16:	f10d 0206 	add.w	r2, sp, #6
   d5a1a:	8998      	ldrh	r0, [r3, #12]
   d5a1c:	2101      	movs	r1, #1
   d5a1e:	f001 fad7 	bl	d6fd0 <bbzdarray_get>
   d5a22:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d5a26:	f000 fb5b 	bl	d60e0 <bbzheap_obj_at>
   d5a2a:	7803      	ldrb	r3, [r0, #0]
   d5a2c:	f003 0307 	and.w	r3, r3, #7
   d5a30:	2b05      	cmp	r3, #5
   d5a32:	d003      	beq.n	d5a3c <bbzswarm_exec+0x3c>
   d5a34:	2006      	movs	r0, #6
   d5a36:	f7fe fc5f 	bl	d42f8 <bbzvm_seterror>
   d5a3a:	e02b      	b.n	d5a94 <bbzswarm_exec+0x94>

    // Get swarm ID and push it on the swarmstack
    bbzvm_lload(0); // Push table we are calling 'exec' on.
   d5a3c:	2000      	movs	r0, #0
   d5a3e:	f7fe fded 	bl	d461c <bbzvm_lload>
    bbzswarm_id_t swarm = get_id();
   d5a42:	f7ff fdd1 	bl	d55e8 <_ZL6get_idv>
    if (bbzswarm_isrobotin(vm->robot, swarm)) {
   d5a46:	6823      	ldr	r3, [r4, #0]
    bbzvm_assert_lnum(1);
    bbzvm_assert_type(bbzvm_locals_at(1), BBZTYPE_CLOSURE);

    // Get swarm ID and push it on the swarmstack
    bbzvm_lload(0); // Push table we are calling 'exec' on.
    bbzswarm_id_t swarm = get_id();
   d5a48:	4605      	mov	r5, r0
    if (bbzswarm_isrobotin(vm->robot, swarm)) {
   d5a4a:	4601      	mov	r1, r0
   d5a4c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
   d5a50:	f7ff ffa4 	bl	d599c <bbzswarm_isrobotin>
   d5a54:	b1e0      	cbz	r0, d5a90 <bbzswarm_exec+0x90>
        bbzvm_pushi(swarm);
   d5a56:	b228      	sxth	r0, r5
   d5a58:	f7fe fe51 	bl	d46fe <bbzvm_pushi>
        bbzheap_idx_t swarm_obj = bbzvm_stack_at(0);
   d5a5c:	2000      	movs	r0, #0
   d5a5e:	f7fe fd23 	bl	d44a8 <bbzvm_stack_at>
   d5a62:	4605      	mov	r5, r0
        bbzvm_pop();
   d5a64:	f7fe fd2e 	bl	d44c4 <bbzvm_pop>

        // Push swarmstack
        bbzdarray_push(vm->swarm.swarmstack, swarm_obj);
   d5a68:	6823      	ldr	r3, [r4, #0]
   d5a6a:	4629      	mov	r1, r5
   d5a6c:	f8b3 0460 	ldrh.w	r0, [r3, #1120]	; 0x460
   d5a70:	f001 fb3e 	bl	d70f0 <bbzdarray_push>

        // Call closure
        bbzvm_lload(0); // Push self table
   d5a74:	2000      	movs	r0, #0
   d5a76:	f7fe fdd1 	bl	d461c <bbzvm_lload>
        bbzvm_lload(1); // Push closure
   d5a7a:	2001      	movs	r0, #1
   d5a7c:	f7fe fdce 	bl	d461c <bbzvm_lload>
        bbzvm_closure_call(0);
   d5a80:	2000      	movs	r0, #0
   d5a82:	f7ff fcc1 	bl	d5408 <bbzvm_closure_call>

        // Pop swarmstack
        bbzdarray_pop(vm->swarm.swarmstack);
   d5a86:	6823      	ldr	r3, [r4, #0]
   d5a88:	f8b3 0460 	ldrh.w	r0, [r3, #1120]	; 0x460
   d5a8c:	f001 fb7a 	bl	d7184 <bbzdarray_pop>
    }

    bbzvm_ret0();
   d5a90:	f7ff fa78 	bl	d4f84 <bbzvm_ret0>
}
   d5a94:	b003      	add	sp, #12
   d5a96:	bd30      	pop	{r4, r5, pc}
   d5a98:	2003e3f4 	.word	0x2003e3f4

000d5a9c <bbzvstig_put>:
}

/****************************************/
/****************************************/

void bbzvstig_put() {
   d5a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bbzvm_assert_lnum(2);
   d5aa0:	4c62      	ldr	r4, [pc, #392]	; (d5c2c <bbzvstig_put+0x190>)
   d5aa2:	6823      	ldr	r3, [r4, #0]
}

/****************************************/
/****************************************/

void bbzvstig_put() {
   d5aa4:	b085      	sub	sp, #20
    bbzvm_assert_lnum(2);
   d5aa6:	8998      	ldrh	r0, [r3, #12]
   d5aa8:	f001 fbc2 	bl	d7230 <bbzdarray_size>
   d5aac:	2803      	cmp	r0, #3
   d5aae:	46a0      	mov	r8, r4
   d5ab0:	d001      	beq.n	d5ab6 <bbzvstig_put+0x1a>
   d5ab2:	2003      	movs	r0, #3
   d5ab4:	e018      	b.n	d5ae8 <bbzvstig_put+0x4c>

    // Get args
    bbzheap_idx_t key   = bbzvm_locals_at(1);
   d5ab6:	6823      	ldr	r3, [r4, #0]
   d5ab8:	aa02      	add	r2, sp, #8
   d5aba:	2101      	movs	r1, #1
   d5abc:	8998      	ldrh	r0, [r3, #12]
   d5abe:	f001 fa87 	bl	d6fd0 <bbzdarray_get>
    bbzheap_idx_t value = bbzvm_locals_at(2);
   d5ac2:	6823      	ldr	r3, [r4, #0]

void bbzvstig_put() {
    bbzvm_assert_lnum(2);

    // Get args
    bbzheap_idx_t key   = bbzvm_locals_at(1);
   d5ac4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
    bbzheap_idx_t value = bbzvm_locals_at(2);
   d5ac8:	8998      	ldrh	r0, [r3, #12]
   d5aca:	aa02      	add	r2, sp, #8
   d5acc:	2102      	movs	r1, #2
   d5ace:	f001 fa7f 	bl	d6fd0 <bbzdarray_get>
   d5ad2:	f8bd 6008 	ldrh.w	r6, [sp, #8]
    // BittyBuzz's virtual stigmertgie cannot handle composite types.
    bbzvm_assert_exec(!bbztype_istable(*bbzheap_obj_at(value)), BBZVM_ERROR_TYPE);
   d5ad6:	4630      	mov	r0, r6
   d5ad8:	f000 fb02 	bl	d60e0 <bbzheap_obj_at>
   d5adc:	7803      	ldrb	r3, [r0, #0]
   d5ade:	f003 0307 	and.w	r3, r3, #7
   d5ae2:	2b04      	cmp	r3, #4
   d5ae4:	d103      	bne.n	d5aee <bbzvstig_put+0x52>
   d5ae6:	2006      	movs	r0, #6
   d5ae8:	f7fe fc06 	bl	d42f8 <bbzvm_seterror>
   d5aec:	e09b      	b.n	d5c26 <bbzvstig_put+0x18a>

    bbzvm_gc();
   d5aee:	f7fe fc31 	bl	d4354 <bbzvm_gc>

    // Find the 'key' entry.
    bbzobj_t tmp;
    bbztype_cast(tmp, BBZTYPE_STRING);
   d5af2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5af6:	f023 0307 	bic.w	r3, r3, #7
   d5afa:	f043 0303 	orr.w	r3, r3, #3
   d5afe:	f88d 3008 	strb.w	r3, [sp, #8]
   d5b02:	f04f 0900 	mov.w	r9, #0
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
   d5b06:	f8d8 2000 	ldr.w	r2, [r8]
   d5b0a:	4d48      	ldr	r5, [pc, #288]	; (d5c2c <bbzvstig_put+0x190>)
   d5b0c:	f892 3590 	ldrb.w	r3, [r2, #1424]	; 0x590
   d5b10:	fa1f f489 	uxth.w	r4, r9
   d5b14:	429c      	cmp	r4, r3
   d5b16:	d23f      	bcs.n	d5b98 <bbzvstig_put+0xfc>
        tmp.s.value = vm->vstig.data[i].key;
   d5b18:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   d5b1c:	4422      	add	r2, r4
        if (bbztype_cmp(
                &tmp,
                bbzheap_obj_at(key)) == 0) {
   d5b1e:	4638      	mov	r0, r7

    // Find the 'key' entry.
    bbzobj_t tmp;
    bbztype_cast(tmp, BBZTYPE_STRING);
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
        tmp.s.value = vm->vstig.data[i].key;
   d5b20:	f8b2 357b 	ldrh.w	r3, [r2, #1403]	; 0x57b
   d5b24:	f8ad 3009 	strh.w	r3, [sp, #9]
        if (bbztype_cmp(
                &tmp,
                bbzheap_obj_at(key)) == 0) {
   d5b28:	f000 fada 	bl	d60e0 <bbzheap_obj_at>
    // Find the 'key' entry.
    bbzobj_t tmp;
    bbztype_cast(tmp, BBZTYPE_STRING);
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
        tmp.s.value = vm->vstig.data[i].key;
        if (bbztype_cmp(
   d5b2c:	4601      	mov	r1, r0
   d5b2e:	a802      	add	r0, sp, #8
   d5b30:	f000 f9c4 	bl	d5ebc <bbztype_cmp>
   d5b34:	f109 0901 	add.w	r9, r9, #1
   d5b38:	2800      	cmp	r0, #0
   d5b3a:	d1e4      	bne.n	d5b06 <bbzvstig_put+0x6a>
                &tmp,
                bbzheap_obj_at(key)) == 0) {
            // Entry found. Set it and exit.
            vm->vstig.data[i].robot = vm->robot;
   d5b3c:	682a      	ldr	r2, [r5, #0]
   d5b3e:	1913      	adds	r3, r2, r4
   d5b40:	f8b2 2596 	ldrh.w	r2, [r2, #1430]	; 0x596
   d5b44:	f8a3 2580 	strh.w	r2, [r3, #1408]	; 0x580
            bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->vstig.data[i].value));
   d5b48:	f8b3 057d 	ldrh.w	r0, [r3, #1405]	; 0x57d
   d5b4c:	f000 fac8 	bl	d60e0 <bbzheap_obj_at>
   d5b50:	7803      	ldrb	r3, [r0, #0]
   d5b52:	f023 0310 	bic.w	r3, r3, #16
   d5b56:	7003      	strb	r3, [r0, #0]
            vm->vstig.data[i].value = value;
   d5b58:	682b      	ldr	r3, [r5, #0]
   d5b5a:	4423      	add	r3, r4
            bbzheap_obj_make_permanent(*bbzheap_obj_at(value));
   d5b5c:	4630      	mov	r0, r6
                &tmp,
                bbzheap_obj_at(key)) == 0) {
            // Entry found. Set it and exit.
            vm->vstig.data[i].robot = vm->robot;
            bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->vstig.data[i].value));
            vm->vstig.data[i].value = value;
   d5b5e:	f8a3 657d 	strh.w	r6, [r3, #1405]	; 0x57d
            bbzheap_obj_make_permanent(*bbzheap_obj_at(value));
   d5b62:	f000 fabd 	bl	d60e0 <bbzheap_obj_at>
   d5b66:	7803      	ldrb	r3, [r0, #0]
   d5b68:	f043 0310 	orr.w	r3, r3, #16
   d5b6c:	7003      	strb	r3, [r0, #0]
            bbzvm_gc();
   d5b6e:	f7fe fbf1 	bl	d4354 <bbzvm_gc>
            ++vm->vstig.data[i].timestamp;
   d5b72:	682b      	ldr	r3, [r5, #0]
   d5b74:	441c      	add	r4, r3
   d5b76:	f894 057f 	ldrb.w	r0, [r4, #1407]	; 0x57f
            bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT,
                                         vm->vstig.data[i].robot,
                                         vm->vstig.data[i].key,
                                         vm->vstig.data[i].value,
                                         vm->vstig.data[i].timestamp);
   d5b7a:	f8b4 357d 	ldrh.w	r3, [r4, #1405]	; 0x57d
   d5b7e:	f8b4 257b 	ldrh.w	r2, [r4, #1403]	; 0x57b
   d5b82:	f8b4 1580 	ldrh.w	r1, [r4, #1408]	; 0x580
            vm->vstig.data[i].robot = vm->robot;
            bbzheap_obj_unmake_permanent(*bbzheap_obj_at(vm->vstig.data[i].value));
            vm->vstig.data[i].value = value;
            bbzheap_obj_make_permanent(*bbzheap_obj_at(value));
            bbzvm_gc();
            ++vm->vstig.data[i].timestamp;
   d5b86:	3001      	adds	r0, #1
   d5b88:	b2c0      	uxtb	r0, r0
   d5b8a:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
            bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT,
                                         vm->vstig.data[i].robot,
                                         vm->vstig.data[i].key,
                                         vm->vstig.data[i].value,
                                         vm->vstig.data[i].timestamp);
   d5b8e:	9000      	str	r0, [sp, #0]
   d5b90:	2001      	movs	r0, #1
   d5b92:	f000 f9e9 	bl	d5f68 <bbzoutmsg_queue_append_vstig>
   d5b96:	e042      	b.n	d5c1e <bbzvstig_put+0x182>
            return;
        }
    }

    // No such entry found ; create it if we have enough space.
    if (vm->vstig.size < BBZVSTIG_CAP) {
   d5b98:	2b02      	cmp	r3, #2
   d5b9a:	d83d      	bhi.n	d5c18 <bbzvstig_put+0x17c>
        vm->vstig.data[vm->vstig.size].robot = vm->robot;
   d5b9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5ba0:	18d4      	adds	r4, r2, r3
   d5ba2:	f8b2 3596 	ldrh.w	r3, [r2, #1430]	; 0x596
   d5ba6:	f8a4 3580 	strh.w	r3, [r4, #1408]	; 0x580
        vm->vstig.data[vm->vstig.size].key   = bbzheap_obj_at(key)->s.value;
   d5baa:	4638      	mov	r0, r7
   d5bac:	f000 fa98 	bl	d60e0 <bbzheap_obj_at>
   d5bb0:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d5bb4:	f8a4 357b 	strh.w	r3, [r4, #1403]	; 0x57b
        bbzheap_obj_make_permanent(*bbzheap_obj_at(key));
   d5bb8:	4638      	mov	r0, r7
   d5bba:	f000 fa91 	bl	d60e0 <bbzheap_obj_at>
   d5bbe:	7803      	ldrb	r3, [r0, #0]
   d5bc0:	f043 0310 	orr.w	r3, r3, #16
   d5bc4:	7003      	strb	r3, [r0, #0]
        vm->vstig.data[vm->vstig.size].value = value;
   d5bc6:	682a      	ldr	r2, [r5, #0]
   d5bc8:	f892 3590 	ldrb.w	r3, [r2, #1424]	; 0x590
   d5bcc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5bd0:	4413      	add	r3, r2
        bbzheap_obj_make_permanent(*bbzheap_obj_at(value));
   d5bd2:	4630      	mov	r0, r6
    // No such entry found ; create it if we have enough space.
    if (vm->vstig.size < BBZVSTIG_CAP) {
        vm->vstig.data[vm->vstig.size].robot = vm->robot;
        vm->vstig.data[vm->vstig.size].key   = bbzheap_obj_at(key)->s.value;
        bbzheap_obj_make_permanent(*bbzheap_obj_at(key));
        vm->vstig.data[vm->vstig.size].value = value;
   d5bd4:	f8a3 657d 	strh.w	r6, [r3, #1405]	; 0x57d
        bbzheap_obj_make_permanent(*bbzheap_obj_at(value));
   d5bd8:	f000 fa82 	bl	d60e0 <bbzheap_obj_at>
   d5bdc:	7803      	ldrb	r3, [r0, #0]
   d5bde:	f043 0310 	orr.w	r3, r3, #16
   d5be2:	7003      	strb	r3, [r0, #0]
        vm->vstig.data[vm->vstig.size].timestamp = 1;
   d5be4:	6829      	ldr	r1, [r5, #0]
   d5be6:	f891 3590 	ldrb.w	r3, [r1, #1424]	; 0x590
   d5bea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5bee:	4419      	add	r1, r3
   d5bf0:	2001      	movs	r0, #1
        bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT,
                                     vm->vstig.data[vm->vstig.size].robot,
                                     vm->vstig.data[vm->vstig.size].key,
                                     vm->vstig.data[vm->vstig.size].value,
                                     vm->vstig.data[vm->vstig.size].timestamp);
   d5bf2:	f8b1 357d 	ldrh.w	r3, [r1, #1405]	; 0x57d
   d5bf6:	f8b1 257b 	ldrh.w	r2, [r1, #1403]	; 0x57b
        vm->vstig.data[vm->vstig.size].robot = vm->robot;
        vm->vstig.data[vm->vstig.size].key   = bbzheap_obj_at(key)->s.value;
        bbzheap_obj_make_permanent(*bbzheap_obj_at(key));
        vm->vstig.data[vm->vstig.size].value = value;
        bbzheap_obj_make_permanent(*bbzheap_obj_at(value));
        vm->vstig.data[vm->vstig.size].timestamp = 1;
   d5bfa:	f881 057f 	strb.w	r0, [r1, #1407]	; 0x57f
        bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT,
   d5bfe:	f501 61af 	add.w	r1, r1, #1400	; 0x578
                                     vm->vstig.data[vm->vstig.size].robot,
                                     vm->vstig.data[vm->vstig.size].key,
                                     vm->vstig.data[vm->vstig.size].value,
                                     vm->vstig.data[vm->vstig.size].timestamp);
   d5c02:	8909      	ldrh	r1, [r1, #8]
   d5c04:	9000      	str	r0, [sp, #0]
   d5c06:	f000 f9af 	bl	d5f68 <bbzoutmsg_queue_append_vstig>
        ++vm->vstig.size;
   d5c0a:	682a      	ldr	r2, [r5, #0]
   d5c0c:	f892 3590 	ldrb.w	r3, [r2, #1424]	; 0x590
   d5c10:	3301      	adds	r3, #1
   d5c12:	f882 3590 	strb.w	r3, [r2, #1424]	; 0x590
   d5c16:	e002      	b.n	d5c1e <bbzvstig_put+0x182>
    }
    else {
        bbzvm_seterror(BBZVM_ERROR_VSTIG);
   d5c18:	200c      	movs	r0, #12
   d5c1a:	f7fe fb6d 	bl	d42f8 <bbzvm_seterror>
    }

    bbzvm_ret0();
   d5c1e:	f7ff f9b1 	bl	d4f84 <bbzvm_ret0>
    bbzvm_gc();
   d5c22:	f7fe fb97 	bl	d4354 <bbzvm_gc>
}
   d5c26:	b005      	add	sp, #20
   d5c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c2c:	2003e3f4 	.word	0x2003e3f4

000d5c30 <bbzvstig_get>:
}

/****************************************/
/****************************************/

void bbzvstig_get() {
   d5c30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bbzvm_assert_lnum(1);
   d5c34:	4d33      	ldr	r5, [pc, #204]	; (d5d04 <bbzvstig_get+0xd4>)
   d5c36:	682b      	ldr	r3, [r5, #0]
   d5c38:	8998      	ldrh	r0, [r3, #12]
   d5c3a:	f001 faf9 	bl	d7230 <bbzdarray_size>
   d5c3e:	2802      	cmp	r0, #2
   d5c40:	d003      	beq.n	d5c4a <bbzvstig_get+0x1a>
   d5c42:	2003      	movs	r0, #3
   d5c44:	f7fe fb58 	bl	d42f8 <bbzvm_seterror>
   d5c48:	e059      	b.n	d5cfe <bbzvstig_get+0xce>

    // Get args
    bbzheap_idx_t key = bbzvm_locals_at(1);
   d5c4a:	682b      	ldr	r3, [r5, #0]
   d5c4c:	aa02      	add	r2, sp, #8
   d5c4e:	8998      	ldrh	r0, [r3, #12]
   d5c50:	2101      	movs	r1, #1
   d5c52:	f001 f9bd 	bl	d6fd0 <bbzdarray_get>
   d5c56:	f8bd 7008 	ldrh.w	r7, [sp, #8]

    bbzvm_gc();
   d5c5a:	f7fe fb7b 	bl	d4354 <bbzvm_gc>

    // Find the 'key' entry.
    bbzobj_t tmp;
    bbztype_cast(tmp, BBZTYPE_STRING);
   d5c5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5c62:	f023 0307 	bic.w	r3, r3, #7
   d5c66:	f043 0303 	orr.w	r3, r3, #3
   d5c6a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c6e:	f04f 0800 	mov.w	r8, #0
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
   d5c72:	682b      	ldr	r3, [r5, #0]
   d5c74:	4e23      	ldr	r6, [pc, #140]	; (d5d04 <bbzvstig_get+0xd4>)
   d5c76:	f893 2590 	ldrb.w	r2, [r3, #1424]	; 0x590
   d5c7a:	fa1f f488 	uxth.w	r4, r8
   d5c7e:	42a2      	cmp	r2, r4
   d5c80:	d926      	bls.n	d5cd0 <bbzvstig_get+0xa0>
        tmp.s.value = vm->vstig.data[i].key;
   d5c82:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   d5c86:	4423      	add	r3, r4
        if (bbztype_cmp(
                &tmp,
                bbzheap_obj_at(key)) == 0) {
   d5c88:	4638      	mov	r0, r7

    // Find the 'key' entry.
    bbzobj_t tmp;
    bbztype_cast(tmp, BBZTYPE_STRING);
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
        tmp.s.value = vm->vstig.data[i].key;
   d5c8a:	f8b3 357b 	ldrh.w	r3, [r3, #1403]	; 0x57b
   d5c8e:	f8ad 3009 	strh.w	r3, [sp, #9]
        if (bbztype_cmp(
                &tmp,
                bbzheap_obj_at(key)) == 0) {
   d5c92:	f000 fa25 	bl	d60e0 <bbzheap_obj_at>
    // Find the 'key' entry.
    bbzobj_t tmp;
    bbztype_cast(tmp, BBZTYPE_STRING);
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
        tmp.s.value = vm->vstig.data[i].key;
        if (bbztype_cmp(
   d5c96:	4601      	mov	r1, r0
   d5c98:	a802      	add	r0, sp, #8
   d5c9a:	f000 f90f 	bl	d5ebc <bbztype_cmp>
   d5c9e:	f108 0801 	add.w	r8, r8, #1
   d5ca2:	2800      	cmp	r0, #0
   d5ca4:	d1e5      	bne.n	d5c72 <bbzvstig_get+0x42>
                &tmp,
                bbzheap_obj_at(key)) == 0) {
            // Entry found. Get it and exit.
            bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_QUERY,
   d5ca6:	6830      	ldr	r0, [r6, #0]
   d5ca8:	4420      	add	r0, r4
                                         vm->vstig.data[i].robot,
                                         vm->vstig.data[i].key,
                                         vm->vstig.data[i].value,
                                         vm->vstig.data[i].timestamp);
   d5caa:	f8b0 357d 	ldrh.w	r3, [r0, #1405]	; 0x57d
   d5cae:	f8b0 257b 	ldrh.w	r2, [r0, #1403]	; 0x57b
   d5cb2:	f8b0 1580 	ldrh.w	r1, [r0, #1408]	; 0x580
   d5cb6:	f890 057f 	ldrb.w	r0, [r0, #1407]	; 0x57f
   d5cba:	9000      	str	r0, [sp, #0]
   d5cbc:	2002      	movs	r0, #2
   d5cbe:	f000 f953 	bl	d5f68 <bbzoutmsg_queue_append_vstig>
            bbzvm_push(vm->vstig.data[i].value);
   d5cc2:	6833      	ldr	r3, [r6, #0]
   d5cc4:	441c      	add	r4, r3
   d5cc6:	f8b4 057d 	ldrh.w	r0, [r4, #1405]	; 0x57d
   d5cca:	f7fe fc8b 	bl	d45e4 <bbzvm_push>
   d5cce:	e012      	b.n	d5cf6 <bbzvstig_get+0xc6>
            return;
        }
    }

    // Entry not found. Push nil instead.
    bbzvm_pushnil();
   d5cd0:	f7fe fcfc 	bl	d46cc <bbzvm_pushnil>
    bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_QUERY,
   d5cd4:	6833      	ldr	r3, [r6, #0]
                                 vm->robot,
                                 bbzheap_obj_at(key)->s.value,
   d5cd6:	4638      	mov	r0, r7
        }
    }

    // Entry not found. Push nil instead.
    bbzvm_pushnil();
    bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_QUERY,
   d5cd8:	f8b3 4596 	ldrh.w	r4, [r3, #1430]	; 0x596
                                 vm->robot,
                                 bbzheap_obj_at(key)->s.value,
   d5cdc:	f000 fa00 	bl	d60e0 <bbzheap_obj_at>
        }
    }

    // Entry not found. Push nil instead.
    bbzvm_pushnil();
    bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_QUERY,
   d5ce0:	6833      	ldr	r3, [r6, #0]
                                 vm->robot,
                                 bbzheap_obj_at(key)->s.value,
                                 vm->nil,
                                 0);
   d5ce2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
   d5ce6:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
   d5cea:	2100      	movs	r1, #0
   d5cec:	9100      	str	r1, [sp, #0]
   d5cee:	2002      	movs	r0, #2
   d5cf0:	4621      	mov	r1, r4
   d5cf2:	f000 f939 	bl	d5f68 <bbzoutmsg_queue_append_vstig>

    bbzvm_ret1();
   d5cf6:	f7ff f999 	bl	d502c <bbzvm_ret1>
    bbzvm_gc();
   d5cfa:	f7fe fb2b 	bl	d4354 <bbzvm_gc>
}
   d5cfe:	b004      	add	sp, #16
   d5d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d04:	2003e3f4 	.word	0x2003e3f4

000d5d08 <bbzvstig_create>:
}

/****************************************/
/****************************************/

void bbzvstig_create() {
   d5d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbzvm_assert_lnum(1);
   d5d0a:	4c1c      	ldr	r4, [pc, #112]	; (d5d7c <bbzvstig_create+0x74>)
   d5d0c:	6823      	ldr	r3, [r4, #0]
   d5d0e:	8998      	ldrh	r0, [r3, #12]
   d5d10:	f001 fa8e 	bl	d7230 <bbzdarray_size>
   d5d14:	2802      	cmp	r0, #2
   d5d16:	d003      	beq.n	d5d20 <bbzvstig_create+0x18>
   d5d18:	2003      	movs	r0, #3
   d5d1a:	f7fe faed 	bl	d42f8 <bbzvm_seterror>
   d5d1e:	e02b      	b.n	d5d78 <bbzvstig_create+0x70>

    // Empty the vstig.
    vm->vstig.size = 0;
   d5d20:	6823      	ldr	r3, [r4, #0]
   d5d22:	2500      	movs	r5, #0
   d5d24:	f883 5590 	strb.w	r5, [r3, #1424]	; 0x590

    // Create a table, and register some fields in it.
    bbzvm_pusht();
   d5d28:	f7fe fc70 	bl	d460c <bbzvm_pusht>
    bbztable_add_data(__BBZSTRID_id, bbzvm_locals_at(1));
   d5d2c:	6823      	ldr	r3, [r4, #0]
   d5d2e:	f10d 0206 	add.w	r2, sp, #6
   d5d32:	8998      	ldrh	r0, [r3, #12]
   d5d34:	2101      	movs	r1, #1
   d5d36:	f001 f94b 	bl	d6fd0 <bbzdarray_get>
   d5d3a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5d3e:	4628      	mov	r0, r5
   d5d40:	f000 fcdf 	bl	d6702 <_Z17bbztable_add_datatt>
    bbztable_add_function(__BBZSTRID_put,  bbzvstig_put);
   d5d44:	490e      	ldr	r1, [pc, #56]	; (d5d80 <bbzvstig_create+0x78>)
   d5d46:	2021      	movs	r0, #33	; 0x21
   d5d48:	f000 fcc6 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_get,  bbzvstig_get);
   d5d4c:	490d      	ldr	r1, [pc, #52]	; (d5d84 <bbzvstig_create+0x7c>)
   d5d4e:	2022      	movs	r0, #34	; 0x22
   d5d50:	f000 fcc2 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbzvm_gc();
   d5d54:	f7fe fafe 	bl	d4354 <bbzvm_gc>
    bbztable_add_function(__BBZSTRID_size, bbzvstig_size);
   d5d58:	490b      	ldr	r1, [pc, #44]	; (d5d88 <bbzvstig_create+0x80>)
   d5d5a:	2023      	movs	r0, #35	; 0x23
   d5d5c:	f000 fcbc 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbztable_add_function(__BBZSTRID_onconflict, bbzvstig_onconflict);
   d5d60:	490a      	ldr	r1, [pc, #40]	; (d5d8c <bbzvstig_create+0x84>)
   d5d62:	2024      	movs	r0, #36	; 0x24
   d5d64:	f000 fcb8 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>
    bbzvm_gc();
   d5d68:	f7fe faf4 	bl	d4354 <bbzvm_gc>
    bbztable_add_function(__BBZSTRID_onconflictlost, bbzvstig_onconflictlost);
   d5d6c:	4908      	ldr	r1, [pc, #32]	; (d5d90 <bbzvstig_create+0x88>)
   d5d6e:	2025      	movs	r0, #37	; 0x25
   d5d70:	f000 fcb2 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>

    // Table is now stack top. Return it.
    bbzvm_ret1();
   d5d74:	f7ff f95a 	bl	d502c <bbzvm_ret1>

//    bbzvm_gc();
}
   d5d78:	b003      	add	sp, #12
   d5d7a:	bd30      	pop	{r4, r5, pc}
   d5d7c:	2003e3f4 	.word	0x2003e3f4
   d5d80:	000d5a9d 	.word	0x000d5a9d
   d5d84:	000d5c31 	.word	0x000d5c31
   d5d88:	000d5e3d 	.word	0x000d5e3d
   d5d8c:	000d5d95 	.word	0x000d5d95
   d5d90:	000d5de9 	.word	0x000d5de9

000d5d94 <bbzvstig_onconflict>:

/****************************************/
/****************************************/

void bbzvstig_onconflict() {
   d5d94:	b513      	push	{r0, r1, r4, lr}
    bbzvm_assert_lnum(1);
   d5d96:	4c13      	ldr	r4, [pc, #76]	; (d5de4 <bbzvstig_onconflict+0x50>)
   d5d98:	6823      	ldr	r3, [r4, #0]
   d5d9a:	8998      	ldrh	r0, [r3, #12]
   d5d9c:	f001 fa48 	bl	d7230 <bbzdarray_size>
   d5da0:	2802      	cmp	r0, #2
   d5da2:	d003      	beq.n	d5dac <bbzvstig_onconflict+0x18>
   d5da4:	2003      	movs	r0, #3
   d5da6:	f7fe faa7 	bl	d42f8 <bbzvm_seterror>
   d5daa:	e018      	b.n	d5dde <bbzvstig_onconflict+0x4a>

    bbzvm_push(vm->vstig.hpos);
   d5dac:	6823      	ldr	r3, [r4, #0]
   d5dae:	f8b3 0591 	ldrh.w	r0, [r3, #1425]	; 0x591
   d5db2:	f7fe fc17 	bl	d45e4 <bbzvm_push>
    bbzvm_gc();
   d5db6:	f7fe facd 	bl	d4354 <bbzvm_gc>
    bbztable_add_data(BBZVSTIG_ONCONFLICT_FIELD, bbzvm_locals_at(1));
   d5dba:	6823      	ldr	r3, [r4, #0]
   d5dbc:	f10d 0206 	add.w	r2, sp, #6
   d5dc0:	8998      	ldrh	r0, [r3, #12]
   d5dc2:	2101      	movs	r1, #1
   d5dc4:	f001 f904 	bl	d6fd0 <bbzdarray_get>
   d5dc8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5dcc:	2028      	movs	r0, #40	; 0x28
   d5dce:	f000 fc98 	bl	d6702 <_Z17bbztable_add_datatt>
    bbzvm_gc();
   d5dd2:	f7fe fabf 	bl	d4354 <bbzvm_gc>

    bbzvm_ret0();
   d5dd6:	f7ff f8d5 	bl	d4f84 <bbzvm_ret0>
    bbzvm_gc();
   d5dda:	f7fe fabb 	bl	d4354 <bbzvm_gc>
}
   d5dde:	b002      	add	sp, #8
   d5de0:	bd10      	pop	{r4, pc}
   d5de2:	bf00      	nop
   d5de4:	2003e3f4 	.word	0x2003e3f4

000d5de8 <bbzvstig_onconflictlost>:

/****************************************/
/****************************************/

void bbzvstig_onconflictlost() {
   d5de8:	b513      	push	{r0, r1, r4, lr}
    bbzvm_assert_lnum(1);
   d5dea:	4c13      	ldr	r4, [pc, #76]	; (d5e38 <bbzvstig_onconflictlost+0x50>)
   d5dec:	6823      	ldr	r3, [r4, #0]
   d5dee:	8998      	ldrh	r0, [r3, #12]
   d5df0:	f001 fa1e 	bl	d7230 <bbzdarray_size>
   d5df4:	2802      	cmp	r0, #2
   d5df6:	d003      	beq.n	d5e00 <bbzvstig_onconflictlost+0x18>
   d5df8:	2003      	movs	r0, #3
   d5dfa:	f7fe fa7d 	bl	d42f8 <bbzvm_seterror>
   d5dfe:	e018      	b.n	d5e32 <bbzvstig_onconflictlost+0x4a>

    bbzvm_push(vm->vstig.hpos);
   d5e00:	6823      	ldr	r3, [r4, #0]
   d5e02:	f8b3 0591 	ldrh.w	r0, [r3, #1425]	; 0x591
   d5e06:	f7fe fbed 	bl	d45e4 <bbzvm_push>
    bbzvm_gc();
   d5e0a:	f7fe faa3 	bl	d4354 <bbzvm_gc>
    bbztable_add_data(BBZVSTIG_ONCONFLICTLOST_FIELD, bbzvm_locals_at(1));
   d5e0e:	6823      	ldr	r3, [r4, #0]
   d5e10:	f10d 0206 	add.w	r2, sp, #6
   d5e14:	8998      	ldrh	r0, [r3, #12]
   d5e16:	2101      	movs	r1, #1
   d5e18:	f001 f8da 	bl	d6fd0 <bbzdarray_get>
   d5e1c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5e20:	2029      	movs	r0, #41	; 0x29
   d5e22:	f000 fc6e 	bl	d6702 <_Z17bbztable_add_datatt>
    bbzvm_gc();
   d5e26:	f7fe fa95 	bl	d4354 <bbzvm_gc>

    bbzvm_ret0();
   d5e2a:	f7ff f8ab 	bl	d4f84 <bbzvm_ret0>
    bbzvm_gc();
   d5e2e:	f7fe fa91 	bl	d4354 <bbzvm_gc>
}
   d5e32:	b002      	add	sp, #8
   d5e34:	bd10      	pop	{r4, pc}
   d5e36:	bf00      	nop
   d5e38:	2003e3f4 	.word	0x2003e3f4

000d5e3c <bbzvstig_size>:
}

/****************************************/
/****************************************/

void bbzvstig_size() {
   d5e3c:	b510      	push	{r4, lr}
    bbzvm_assert_lnum(0);
   d5e3e:	4c0a      	ldr	r4, [pc, #40]	; (d5e68 <bbzvstig_size+0x2c>)
   d5e40:	6823      	ldr	r3, [r4, #0]
   d5e42:	8998      	ldrh	r0, [r3, #12]
   d5e44:	f001 f9f4 	bl	d7230 <bbzdarray_size>
   d5e48:	2801      	cmp	r0, #1
   d5e4a:	d004      	beq.n	d5e56 <bbzvstig_size+0x1a>
   d5e4c:	2003      	movs	r0, #3
    bbzvm_pushi(vm->vstig.size);
    bbzvm_ret1();
}
   d5e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/****************************************/
/****************************************/

void bbzvstig_size() {
    bbzvm_assert_lnum(0);
   d5e52:	f7fe ba51 	b.w	d42f8 <bbzvm_seterror>
    bbzvm_pushi(vm->vstig.size);
   d5e56:	6823      	ldr	r3, [r4, #0]
   d5e58:	f893 0590 	ldrb.w	r0, [r3, #1424]	; 0x590
   d5e5c:	f7fe fc4f 	bl	d46fe <bbzvm_pushi>
    bbzvm_ret1();
}
   d5e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/****************************************/

void bbzvstig_size() {
    bbzvm_assert_lnum(0);
    bbzvm_pushi(vm->vstig.size);
    bbzvm_ret1();
   d5e64:	f7ff b8e2 	b.w	d502c <bbzvm_ret1>
   d5e68:	2003e3f4 	.word	0x2003e3f4

000d5e6c <bbzvstig_register>:
#ifndef BBZ_DISABLE_VSTIGS

#define BBZVSTIG_ONCONFLICT_FIELD __BBZSTRID___INTERNAL_1_DO_NOT_USE__
#define BBZVSTIG_ONCONFLICTLOST_FIELD __BBZSTRID___INTERNAL_2_DO_NOT_USE__

void bbzvstig_register() {
   d5e6c:	b570      	push	{r4, r5, r6, lr}
    bbzvm_pushs(__BBZSTRID_stigmergy);

    bbzvstig_construct();
   d5e6e:	4c11      	ldr	r4, [pc, #68]	; (d5eb4 <bbzvstig_register+0x48>)

#define BBZVSTIG_ONCONFLICT_FIELD __BBZSTRID___INTERNAL_1_DO_NOT_USE__
#define BBZVSTIG_ONCONFLICTLOST_FIELD __BBZSTRID___INTERNAL_2_DO_NOT_USE__

void bbzvstig_register() {
    bbzvm_pushs(__BBZSTRID_stigmergy);
   d5e70:	2020      	movs	r0, #32
   d5e72:	f7fe fe84 	bl	d4b7e <bbzvm_pushs>

    bbzvstig_construct();
   d5e76:	6823      	ldr	r3, [r4, #0]
   d5e78:	2500      	movs	r5, #0
   d5e7a:	f883 5590 	strb.w	r5, [r3, #1424]	; 0x590
    // Create the 'stigmergy' table and set its 'create' field.
    bbzvm_pusht();
   d5e7e:	f7fe fbc5 	bl	d460c <bbzvm_pusht>
    bbztable_add_function(__BBZSTRID_create, bbzvstig_create);
   d5e82:	490d      	ldr	r1, [pc, #52]	; (d5eb8 <bbzvstig_register+0x4c>)
   d5e84:	2002      	movs	r0, #2
   d5e86:	f000 fc27 	bl	d66d8 <_Z21bbztable_add_functiontPFvvE>

    // Construct the 'stigmergy' structure.
    vm->vstig.hpos = bbzvm_stack_at(0);
   d5e8a:	4628      	mov	r0, r5
   d5e8c:	6826      	ldr	r6, [r4, #0]
   d5e8e:	f7fe fb0b 	bl	d44a8 <bbzvm_stack_at>
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->vstig.hpos));
   d5e92:	6823      	ldr	r3, [r4, #0]
    // Create the 'stigmergy' table and set its 'create' field.
    bbzvm_pusht();
    bbztable_add_function(__BBZSTRID_create, bbzvstig_create);

    // Construct the 'stigmergy' structure.
    vm->vstig.hpos = bbzvm_stack_at(0);
   d5e94:	f8a6 0591 	strh.w	r0, [r6, #1425]	; 0x591
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->vstig.hpos));
   d5e98:	f8b3 0591 	ldrh.w	r0, [r3, #1425]	; 0x591
   d5e9c:	f000 f920 	bl	d60e0 <bbzheap_obj_at>
   d5ea0:	7803      	ldrb	r3, [r0, #0]
   d5ea2:	f043 0310 	orr.w	r3, r3, #16
   d5ea6:	7003      	strb	r3, [r0, #0]

    // String 'stigmergy' is stack-top, and table is now stack #1. Register it.
    bbzvm_gstore();
   d5ea8:	f7ff f838 	bl	d4f1c <bbzvm_gstore>
    bbzvm_gc();
}
   d5eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    vm->vstig.hpos = bbzvm_stack_at(0);
    bbzheap_obj_make_permanent(*bbzheap_obj_at(vm->vstig.hpos));

    // String 'stigmergy' is stack-top, and table is now stack #1. Register it.
    bbzvm_gstore();
    bbzvm_gc();
   d5eb0:	f7fe ba50 	b.w	d4354 <bbzvm_gc>
   d5eb4:	2003e3f4 	.word	0x2003e3f4
   d5eb8:	000d5d09 	.word	0x000d5d09

000d5ebc <bbztype_cmp>:

/****************************************/
/****************************************/

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
   d5ebc:	7802      	ldrb	r2, [r0, #0]
   d5ebe:	780b      	ldrb	r3, [r1, #0]
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
   d5ec0:	f012 0207 	ands.w	r2, r2, #7
   d5ec4:	d105      	bne.n	d5ed2 <bbztype_cmp+0x16>
        if(bbztype_isnil(*b)) return 0;
   d5ec6:	f013 0307 	ands.w	r3, r3, #7
   d5eca:	bf18      	it	ne
   d5ecc:	2301      	movne	r3, #1
   d5ece:	4258      	negs	r0, r3
   d5ed0:	4770      	bx	lr
        else return -1;
    }
    if(bbztype_isnil(*b)) return 1;
   d5ed2:	f013 0307 	ands.w	r3, r3, #7
   d5ed6:	d033      	beq.n	d5f40 <bbztype_cmp+0x84>
    /* If both operands are integer, perform integer comparison */
    if(bbztype_isint(*a) && bbztype_isint(*b)) {
   d5ed8:	2a01      	cmp	r2, #1
   d5eda:	d10b      	bne.n	d5ef4 <bbztype_cmp+0x38>
   d5edc:	2b01      	cmp	r3, #1
   d5ede:	d131      	bne.n	d5f44 <bbztype_cmp+0x88>
        if(a->i.value < b->i.value) return -1;
   d5ee0:	f9b0 2001 	ldrsh.w	r2, [r0, #1]
   d5ee4:	f9b1 3001 	ldrsh.w	r3, [r1, #1]
   d5ee8:	429a      	cmp	r2, r3
   d5eea:	db2d      	blt.n	d5f48 <bbztype_cmp+0x8c>

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
        if(bbztype_isnil(*b)) return 0;
   d5eec:	bfcc      	ite	gt
   d5eee:	2001      	movgt	r0, #1
   d5ef0:	2000      	movle	r0, #0
   d5ef2:	e010      	b.n	d5f16 <bbztype_cmp+0x5a>
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
#else
    if(bbztype_isfloat(*a) || bbztype_isfloat(*b)) {
   d5ef4:	2a02      	cmp	r2, #2
   d5ef6:	d005      	beq.n	d5f04 <bbztype_cmp+0x48>
   d5ef8:	2b02      	cmp	r3, #2
   d5efa:	d003      	beq.n	d5f04 <bbztype_cmp+0x48>
        if(a->f.value > b->f.value) return  1;
        return 0;
    }
#endif
    /* If operands are strings, perform equality comparison */
    if(bbztype_isstring(*a) && bbztype_isstring(*b)) {
   d5efc:	2a03      	cmp	r2, #3
   d5efe:	d10c      	bne.n	d5f1a <bbztype_cmp+0x5e>
   d5f00:	2b03      	cmp	r3, #3
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
#else
    if(bbztype_isfloat(*a) || bbztype_isfloat(*b)) {
   d5f02:	d121      	bne.n	d5f48 <bbztype_cmp+0x8c>
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    if (bbztype_istable(*a) && bbztype_istable(*b)) {
        uint16_t x = a->t.value;
   d5f04:	f8b0 2001 	ldrh.w	r2, [r0, #1]
        uint16_t y = b->t.value;
   d5f08:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        if(x < y) return -1;
   d5f0c:	429a      	cmp	r2, r3
   d5f0e:	d31b      	bcc.n	d5f48 <bbztype_cmp+0x8c>

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
        if(bbztype_isnil(*b)) return 0;
   d5f10:	bf8c      	ite	hi
   d5f12:	2001      	movhi	r0, #1
   d5f14:	2000      	movls	r0, #0
   d5f16:	b240      	sxtb	r0, r0
   d5f18:	4770      	bx	lr
        uint16_t y = b->s.value;
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    if (bbztype_istable(*a) && bbztype_istable(*b)) {
   d5f1a:	2a04      	cmp	r2, #4
   d5f1c:	d101      	bne.n	d5f22 <bbztype_cmp+0x66>
   d5f1e:	2b04      	cmp	r3, #4
   d5f20:	e7ef      	b.n	d5f02 <bbztype_cmp+0x46>
        uint16_t y = b->t.value;
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    if(bbztype_isuserdata(*a) && bbztype_isuserdata(*b)) {
   d5f22:	2a06      	cmp	r2, #6
   d5f24:	d110      	bne.n	d5f48 <bbztype_cmp+0x8c>
   d5f26:	2b06      	cmp	r3, #6
   d5f28:	d10e      	bne.n	d5f48 <bbztype_cmp+0x8c>
        uintptr_t x = a->u.value;
   d5f2a:	f8d0 3001 	ldr.w	r3, [r0, #1]
        uintptr_t y = b->u.value;
   d5f2e:	f8d1 0001 	ldr.w	r0, [r1, #1]
        if(x < y) return -1;
   d5f32:	4283      	cmp	r3, r0
   d5f34:	d308      	bcc.n	d5f48 <bbztype_cmp+0x8c>

int8_t bbztype_cmp(const bbzobj_t* a,
                   const bbzobj_t* b) {
    /* nil is smaller than anything, and equal to itself */
    if(bbztype_isnil(*a)) {
        if(bbztype_isnil(*b)) return 0;
   d5f36:	4283      	cmp	r3, r0
   d5f38:	bf94      	ite	ls
   d5f3a:	2000      	movls	r0, #0
   d5f3c:	2001      	movhi	r0, #1
   d5f3e:	4770      	bx	lr
        else return -1;
    }
    if(bbztype_isnil(*b)) return 1;
   d5f40:	2001      	movs	r0, #1
   d5f42:	4770      	bx	lr
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
#else
    if(bbztype_isfloat(*a) || bbztype_isfloat(*b)) {
   d5f44:	2b02      	cmp	r3, #2
   d5f46:	e7dc      	b.n	d5f02 <bbztype_cmp+0x46>
        else return -1;
    }
    if(bbztype_isnil(*b)) return 1;
    /* If both operands are integer, perform integer comparison */
    if(bbztype_isint(*a) && bbztype_isint(*b)) {
        if(a->i.value < b->i.value) return -1;
   d5f48:	f04f 30ff 	mov.w	r0, #4294967295
        if(x < y) return -1;
        if(x > y) return  1;
        return 0;
    }
    return -1;
}
   d5f4c:	4770      	bx	lr
	...

000d5f50 <bbzoutmsg_queue_construct>:
#ifndef BBZ_DISABLE_MESSAGES
/****************************************/
/****************************************/

void bbzoutmsg_queue_construct() {
    bbzringbuf_construct(&vm->outmsgs.queue, (uint8_t*)vm->outmsgs.buf, sizeof(bbzmsg_t), BBZOUTMSG_QUEUE_CAP+1);
   d5f50:	4b04      	ldr	r3, [pc, #16]	; (d5f64 <bbzoutmsg_queue_construct+0x14>)
   d5f52:	6818      	ldr	r0, [r3, #0]
   d5f54:	230b      	movs	r3, #11
   d5f56:	f200 41f7 	addw	r1, r0, #1271	; 0x4f7
   d5f5a:	461a      	mov	r2, r3
   d5f5c:	f200 40ef 	addw	r0, r0, #1263	; 0x4ef
   d5f60:	f000 bd60 	b.w	d6a24 <bbzringbuf_construct>
   d5f64:	2003e3f4 	.word	0x2003e3f4

000d5f68 <bbzoutmsg_queue_append_vstig>:
#ifndef BBZ_DISABLE_VSTIGS
void bbzoutmsg_queue_append_vstig(bbzmsg_payload_type_t type,
                                  bbzrobot_id_t rid,
                                  uint16_t key,
                                  bbzheap_idx_t value,
                                  uint8_t lamport) {
   d5f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

/****************************************/
/****************************************/

static bbzmsg_t* outmsg_queue_append_template() {
    bbzmsg_t* m = ((bbzmsg_t*)bbzringbuf_at(&vm->outmsgs.queue, vm->outmsgs.queue.dataend + vm->outmsgs.queue.capacity));
   d5f6c:	4d24      	ldr	r5, [pc, #144]	; (d6000 <bbzoutmsg_queue_append_vstig+0x98>)
#ifndef BBZ_DISABLE_VSTIGS
void bbzoutmsg_queue_append_vstig(bbzmsg_payload_type_t type,
                                  bbzrobot_id_t rid,
                                  uint16_t key,
                                  bbzheap_idx_t value,
                                  uint8_t lamport) {
   d5f6e:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d5f72:	4682      	mov	sl, r0

/****************************************/
/****************************************/

static bbzmsg_t* outmsg_queue_append_template() {
    bbzmsg_t* m = ((bbzmsg_t*)bbzringbuf_at(&vm->outmsgs.queue, vm->outmsgs.queue.dataend + vm->outmsgs.queue.capacity));
   d5f74:	6828      	ldr	r0, [r5, #0]
#ifndef BBZ_DISABLE_VSTIGS
void bbzoutmsg_queue_append_vstig(bbzmsg_payload_type_t type,
                                  bbzrobot_id_t rid,
                                  uint16_t key,
                                  bbzheap_idx_t value,
                                  uint8_t lamport) {
   d5f76:	4689      	mov	r9, r1
   d5f78:	461e      	mov	r6, r3

/****************************************/
/****************************************/

static bbzmsg_t* outmsg_queue_append_template() {
    bbzmsg_t* m = ((bbzmsg_t*)bbzringbuf_at(&vm->outmsgs.queue, vm->outmsgs.queue.dataend + vm->outmsgs.queue.capacity));
   d5f7a:	f890 14f6 	ldrb.w	r1, [r0, #1270]	; 0x4f6
   d5f7e:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
   d5f82:	4419      	add	r1, r3
   d5f84:	b2c9      	uxtb	r1, r1
   d5f86:	f200 40ef 	addw	r0, r0, #1263	; 0x4ef
#ifndef BBZ_DISABLE_VSTIGS
void bbzoutmsg_queue_append_vstig(bbzmsg_payload_type_t type,
                                  bbzrobot_id_t rid,
                                  uint16_t key,
                                  bbzheap_idx_t value,
                                  uint8_t lamport) {
   d5f8a:	4617      	mov	r7, r2

/****************************************/
/****************************************/

static bbzmsg_t* outmsg_queue_append_template() {
    bbzmsg_t* m = ((bbzmsg_t*)bbzringbuf_at(&vm->outmsgs.queue, vm->outmsgs.queue.dataend + vm->outmsgs.queue.capacity));
   d5f8c:	f000 fd6f 	bl	d6a6e <bbzringbuf_at>
   d5f90:	4604      	mov	r4, r0
    if (bbzringbuf_full(&vm->outmsgs.queue)) {
   d5f92:	6828      	ldr	r0, [r5, #0]
   d5f94:	f200 40ef 	addw	r0, r0, #1263	; 0x4ef
   d5f98:	f000 fd54 	bl	d6a44 <bbzringbuf_full>
   d5f9c:	b1a0      	cbz	r0, d5fc8 <bbzoutmsg_queue_append_vstig+0x60>
        // If full, replace the message with the lowest priority (the last of the queue) with the new one.
        *((bbzmsg_t*)bbzringbuf_rawat(&vm->outmsgs.queue, vm->outmsgs.queue.dataend - (uint8_t)1 + vm->outmsgs.queue.capacity)) = *m;
   d5f9e:	6828      	ldr	r0, [r5, #0]
   d5fa0:	f890 34f4 	ldrb.w	r3, [r0, #1268]	; 0x4f4
   d5fa4:	f890 14f6 	ldrb.w	r1, [r0, #1270]	; 0x4f6
   d5fa8:	4419      	add	r1, r3
   d5faa:	3901      	subs	r1, #1
   d5fac:	b2c9      	uxtb	r1, r1
   d5fae:	f200 40ef 	addw	r0, r0, #1263	; 0x4ef
   d5fb2:	f000 fd51 	bl	d6a58 <bbzringbuf_rawat>
   d5fb6:	6823      	ldr	r3, [r4, #0]
   d5fb8:	6003      	str	r3, [r0, #0]
   d5fba:	6863      	ldr	r3, [r4, #4]
   d5fbc:	6043      	str	r3, [r0, #4]
   d5fbe:	8923      	ldrh	r3, [r4, #8]
   d5fc0:	8103      	strh	r3, [r0, #8]
   d5fc2:	7aa3      	ldrb	r3, [r4, #10]
   d5fc4:	7283      	strb	r3, [r0, #10]
   d5fc6:	e004      	b.n	d5fd2 <bbzoutmsg_queue_append_vstig+0x6a>
    }
    else {
        // If not full, push the message at the end of the queue.
        bbzringbuf_makeslot(&vm->outmsgs.queue);
   d5fc8:	6828      	ldr	r0, [r5, #0]
   d5fca:	f200 40ef 	addw	r0, r0, #1263	; 0x4ef
   d5fce:	f000 fd6a 	bl	d6aa6 <bbzringbuf_makeslot>
                                  uint16_t key,
                                  bbzheap_idx_t value,
                                  uint8_t lamport) {
    /* Make a new VSTIG_PUT/VSTIG_QUERY message */
    bbzmsg_t* m = outmsg_queue_append_template();
    m->vs.type = type;
   d5fd2:	f884 a000 	strb.w	sl, [r4]
    m->vs.rid = rid;
   d5fd6:	f8a4 9001 	strh.w	r9, [r4, #1]
    m->vs.lamport = lamport;
   d5fda:	f884 8003 	strb.w	r8, [r4, #3]
    m->vs.key = key;
   d5fde:	80a7      	strh	r7, [r4, #4]
    m->vs.data = *bbzheap_obj_at(value);
   d5fe0:	4630      	mov	r0, r6
   d5fe2:	f000 f87d 	bl	d60e0 <bbzheap_obj_at>
   d5fe6:	6803      	ldr	r3, [r0, #0]
   d5fe8:	f8c4 3006 	str.w	r3, [r4, #6]
   d5fec:	7903      	ldrb	r3, [r0, #4]
    bbzmsg_sort_priority(&vm->outmsgs.queue);
   d5fee:	6828      	ldr	r0, [r5, #0]
    bbzmsg_t* m = outmsg_queue_append_template();
    m->vs.type = type;
    m->vs.rid = rid;
    m->vs.lamport = lamport;
    m->vs.key = key;
    m->vs.data = *bbzheap_obj_at(value);
   d5ff0:	72a3      	strb	r3, [r4, #10]
    bbzmsg_sort_priority(&vm->outmsgs.queue);
   d5ff2:	f200 40ef 	addw	r0, r0, #1263	; 0x4ef
}
   d5ff6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m->vs.type = type;
    m->vs.rid = rid;
    m->vs.lamport = lamport;
    m->vs.key = key;
    m->vs.data = *bbzheap_obj_at(value);
    bbzmsg_sort_priority(&vm->outmsgs.queue);
   d5ffa:	f000 bd8f 	b.w	d6b1c <bbzmsg_sort_priority>
   d5ffe:	bf00      	nop
   d6000:	2003e3f4 	.word	0x2003e3f4

000d6004 <_ZL15bbzheap_gc_markt>:
    return bbzheap_tseg_alloc_prepare_seg((bbzheap_tseg_t*)vm->heap.ltseg);
}

/****************************************/
/****************************************/
static void bbzheap_gc_mark(bbzheap_idx_t obj) {
   d6004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static uint8_t callstack = 1; // The value of 1 is necessary
    if (++callstack <= BBZHEAP_GCMARK_DEPTH && !gc_hasmark(*bbzheap_obj_at(obj))) {
   d6008:	4d29      	ldr	r5, [pc, #164]	; (d60b0 <_ZL15bbzheap_gc_markt+0xac>)
   d600a:	782b      	ldrb	r3, [r5, #0]
   d600c:	3301      	adds	r3, #1
   d600e:	b2db      	uxtb	r3, r3
   d6010:	2b08      	cmp	r3, #8
   d6012:	702b      	strb	r3, [r5, #0]
   d6014:	d80c      	bhi.n	d6030 <_ZL15bbzheap_gc_markt+0x2c>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d6016:	4927      	ldr	r1, [pc, #156]	; (d60b4 <_ZL15bbzheap_gc_markt+0xb0>)
   d6018:	680b      	ldr	r3, [r1, #0]
   d601a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d601e:	3318      	adds	r3, #24
   d6020:	460e      	mov	r6, r1

/****************************************/
/****************************************/
static void bbzheap_gc_mark(bbzheap_idx_t obj) {
    static uint8_t callstack = 1; // The value of 1 is necessary
    if (++callstack <= BBZHEAP_GCMARK_DEPTH && !gc_hasmark(*bbzheap_obj_at(obj))) {
   d6022:	5c1a      	ldrb	r2, [r3, r0]
   d6024:	f012 0f20 	tst.w	r2, #32
   d6028:	d007      	beq.n	d603a <_ZL15bbzheap_gc_markt+0x36>
   d602a:	e001      	b.n	d6030 <_ZL15bbzheap_gc_markt+0x2c>
                if (!bbzheap_aseg_hasnext(sd)) break;
                si = bbzheap_aseg_next_get(sd);
                sd = bbzheap_aseg_at(si);
            }
        }
        else if (bbztype_isclosurelambda(*bbzheap_obj_at(obj)) &&
   d602c:	0612      	lsls	r2, r2, #24
   d602e:	d438      	bmi.n	d60a2 <_ZL15bbzheap_gc_markt+0x9e>
                 bbzheap_obj_at(obj)->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC) {
            bbzheap_gc_mark(bbzheap_obj_at(obj)->l.value.actrec);
        }
    }
    --callstack;
   d6030:	782b      	ldrb	r3, [r5, #0]
   d6032:	3b01      	subs	r3, #1
   d6034:	702b      	strb	r3, [r5, #0]
}
   d6036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/****************************************/
static void bbzheap_gc_mark(bbzheap_idx_t obj) {
    static uint8_t callstack = 1; // The value of 1 is necessary
    if (++callstack <= BBZHEAP_GCMARK_DEPTH && !gc_hasmark(*bbzheap_obj_at(obj))) {
        /* Mark gc bit */
        gc_mark(*bbzheap_obj_at(obj));
   d603a:	f042 0220 	orr.w	r2, r2, #32
   d603e:	541a      	strb	r2, [r3, r0]

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d6040:	680c      	ldr	r4, [r1, #0]
   d6042:	3418      	adds	r4, #24
   d6044:	1823      	adds	r3, r4, r0
    static uint8_t callstack = 1; // The value of 1 is necessary
    if (++callstack <= BBZHEAP_GCMARK_DEPTH && !gc_hasmark(*bbzheap_obj_at(obj))) {
        /* Mark gc bit */
        gc_mark(*bbzheap_obj_at(obj));
        /* If it's a table, go through it and mark all associated objects */
        if (bbztype_istable(*bbzheap_obj_at(obj))) {
   d6046:	5c22      	ldrb	r2, [r4, r0]
   d6048:	f002 0107 	and.w	r1, r2, #7
   d604c:	2904      	cmp	r1, #4
   d604e:	d1ed      	bne.n	d602c <_ZL15bbzheap_gc_markt+0x28>
            /* Segment index in heap */
            bbzheap_idx_t si = bbzheap_obj_at(obj)->t.value;
            /* Actual segment data in heap */
            bbzheap_aseg_t *sd = bbzheap_aseg_at(si);
   d6050:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   d6054:	2716      	movs	r7, #22
   d6056:	437b      	muls	r3, r7
   d6058:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d605c:	3302      	adds	r3, #2
   d605e:	441c      	add	r4, r3
                for (uint8_t j = 0; j < BBZHEAP_ELEMS_PER_ASEG; ++j) {
                    if (bbzheap_aseg_elem_isvalid(sd->values[j])) {
                        bbzheap_gc_mark(bbzheap_aseg_elem_get(sd->values[j]));
                    }
                }
                if (!bbzheap_aseg_hasnext(sd)) break;
   d6060:	f643 79ff 	movw	r9, #16383	; 0x3fff
            bbzheap_idx_t si = bbzheap_obj_at(obj)->t.value;
            /* Actual segment data in heap */
            bbzheap_aseg_t *sd = bbzheap_aseg_at(si);
            /* Go through the segments */
            while (1) {
                bbzheap_gc_tseg_mark(*sd);
   d6064:	8aa3      	ldrh	r3, [r4, #20]
   d6066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   d606a:	82a3      	strh	r3, [r4, #20]
   d606c:	f04f 0800 	mov.w	r8, #0
                for (uint8_t j = 0; j < BBZHEAP_ELEMS_PER_ASEG; ++j) {
                    if (bbzheap_aseg_elem_isvalid(sd->values[j])) {
   d6070:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
   d6074:	0419      	lsls	r1, r3, #16
   d6076:	b298      	uxth	r0, r3
   d6078:	d503      	bpl.n	d6082 <_ZL15bbzheap_gc_markt+0x7e>
                        bbzheap_gc_mark(bbzheap_aseg_elem_get(sd->values[j]));
   d607a:	f3c0 000e 	ubfx	r0, r0, #0, #15
   d607e:	f7ff ffc1 	bl	d6004 <_ZL15bbzheap_gc_markt>
   d6082:	f108 0801 	add.w	r8, r8, #1
            /* Actual segment data in heap */
            bbzheap_aseg_t *sd = bbzheap_aseg_at(si);
            /* Go through the segments */
            while (1) {
                bbzheap_gc_tseg_mark(*sd);
                for (uint8_t j = 0; j < BBZHEAP_ELEMS_PER_ASEG; ++j) {
   d6086:	f1b8 0f0a 	cmp.w	r8, #10
   d608a:	d1f1      	bne.n	d6070 <_ZL15bbzheap_gc_markt+0x6c>
                    if (bbzheap_aseg_elem_isvalid(sd->values[j])) {
                        bbzheap_gc_mark(bbzheap_aseg_elem_get(sd->values[j]));
                    }
                }
                if (!bbzheap_aseg_hasnext(sd)) break;
   d608c:	8aa3      	ldrh	r3, [r4, #20]
   d608e:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d6092:	454b      	cmp	r3, r9
   d6094:	d0cc      	beq.n	d6030 <_ZL15bbzheap_gc_markt+0x2c>
                si = bbzheap_aseg_next_get(sd);
                sd = bbzheap_aseg_at(si);
   d6096:	6834      	ldr	r4, [r6, #0]
   d6098:	fb07 4413 	mls	r4, r7, r3, r4
   d609c:	f204 4442 	addw	r4, r4, #1090	; 0x442
            /* Segment index in heap */
            bbzheap_idx_t si = bbzheap_obj_at(obj)->t.value;
            /* Actual segment data in heap */
            bbzheap_aseg_t *sd = bbzheap_aseg_at(si);
            /* Go through the segments */
            while (1) {
   d60a0:	e7e0      	b.n	d6064 <_ZL15bbzheap_gc_markt+0x60>
                si = bbzheap_aseg_next_get(sd);
                sd = bbzheap_aseg_at(si);
            }
        }
        else if (bbztype_isclosurelambda(*bbzheap_obj_at(obj)) &&
                 bbzheap_obj_at(obj)->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC) {
   d60a2:	7898      	ldrb	r0, [r3, #2]
                if (!bbzheap_aseg_hasnext(sd)) break;
                si = bbzheap_aseg_next_get(sd);
                sd = bbzheap_aseg_at(si);
            }
        }
        else if (bbztype_isclosurelambda(*bbzheap_obj_at(obj)) &&
   d60a4:	28ff      	cmp	r0, #255	; 0xff
   d60a6:	d0c3      	beq.n	d6030 <_ZL15bbzheap_gc_markt+0x2c>
                 bbzheap_obj_at(obj)->l.value.actrec != BBZHEAP_CLOSURE_DFLT_ACTREC) {
            bbzheap_gc_mark(bbzheap_obj_at(obj)->l.value.actrec);
   d60a8:	f7ff ffac 	bl	d6004 <_ZL15bbzheap_gc_markt>
   d60ac:	e7c0      	b.n	d6030 <_ZL15bbzheap_gc_markt+0x2c>
   d60ae:	bf00      	nop
   d60b0:	2003dd0c 	.word	0x2003dd0c
   d60b4:	2003e3f4 	.word	0x2003e3f4

000d60b8 <bbzheap_clear>:

/****************************************/
/****************************************/

void bbzheap_clear() {
    vm->heap.rtobj = vm->heap.data + BBZHEAP_RSV_ACTREC_MAX * sizeof(bbzobj_t);
   d60b8:	4b08      	ldr	r3, [pc, #32]	; (d60dc <bbzheap_clear+0x24>)
   d60ba:	681b      	ldr	r3, [r3, #0]
   d60bc:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
   d60c0:	611a      	str	r2, [r3, #16]
    vm->heap.ltseg = vm->heap.data + BBZHEAP_SIZE;
   d60c2:	f503 628b 	add.w	r2, r3, #1112	; 0x458
   d60c6:	615a      	str	r2, [r3, #20]
    for(int16_t i = (BBZHEAP_RSV_ACTREC_MAX-1)* sizeof(bbzobj_t); i >= 0; --i) {
        vm->heap.data[i] = 0;
   d60c8:	2100      	movs	r1, #0
   d60ca:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
   d60ce:	3318      	adds	r3, #24
   d60d0:	f802 1d01 	strb.w	r1, [r2, #-1]!
/****************************************/

void bbzheap_clear() {
    vm->heap.rtobj = vm->heap.data + BBZHEAP_RSV_ACTREC_MAX * sizeof(bbzobj_t);
    vm->heap.ltseg = vm->heap.data + BBZHEAP_SIZE;
    for(int16_t i = (BBZHEAP_RSV_ACTREC_MAX-1)* sizeof(bbzobj_t); i >= 0; --i) {
   d60d4:	429a      	cmp	r2, r3
   d60d6:	d1fb      	bne.n	d60d0 <bbzheap_clear+0x18>
        vm->heap.data[i] = 0;
    }
}
   d60d8:	4770      	bx	lr
   d60da:	bf00      	nop
   d60dc:	2003e3f4 	.word	0x2003e3f4

000d60e0 <bbzheap_obj_at>:

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d60e0:	4b03      	ldr	r3, [pc, #12]	; (d60f0 <bbzheap_obj_at+0x10>)
   d60e2:	681b      	ldr	r3, [r3, #0]
   d60e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d60e8:	3318      	adds	r3, #24
}
   d60ea:	4418      	add	r0, r3
   d60ec:	4770      	bx	lr
   d60ee:	bf00      	nop
   d60f0:	2003e3f4 	.word	0x2003e3f4

000d60f4 <bbzheap_tseg_alloc>:
    }
    /* Success */
    return 1;
}

uint8_t bbzheap_tseg_alloc(bbzheap_idx_t* s) {
   d60f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Look for empty slot */
    int16_t qot = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d60f8:	492e      	ldr	r1, [pc, #184]	; (d61b4 <bbzheap_tseg_alloc+0xc0>)
   d60fa:	680f      	ldr	r7, [r1, #0]
   d60fc:	697e      	ldr	r6, [r7, #20]
   d60fe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
   d6102:	1b9b      	subs	r3, r3, r6
   d6104:	b21b      	sxth	r3, r3
   d6106:	2216      	movs	r2, #22
   d6108:	f207 4542 	addw	r5, r7, #1090	; 0x442
   d610c:	fbb3 f3f2 	udiv	r3, r3, r2
   d6110:	2400      	movs	r4, #0
   d6112:	fa0f f983 	sxth.w	r9, r3
   d6116:	f06f 0815 	mvn.w	r8, #21
    for(int16_t i = 0;
        i < qot;
   d611a:	b222      	sxth	r2, r4
   d611c:	4591      	cmp	r9, r2
   d611e:	dd25      	ble.n	d616c <bbzheap_tseg_alloc+0x78>
        ++i) {
        if(!bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) {
   d6120:	f9b5 e014 	ldrsh.w	lr, [r5, #20]
   d6124:	fb08 f204 	mul.w	r2, r8, r4
   d6128:	f1be 0f00 	cmp.w	lr, #0
   d612c:	f202 422a 	addw	r2, r2, #1066	; 0x42a
   d6130:	f104 0c01 	add.w	ip, r4, #1
   d6134:	f1a5 0516 	sub.w	r5, r5, #22
   d6138:	da01      	bge.n	d613e <bbzheap_tseg_alloc+0x4a>
   d613a:	4664      	mov	r4, ip
   d613c:	e7ed      	b.n	d611a <bbzheap_tseg_alloc+0x26>
            /* Empty slot found */
            /* Set result */
            *s = (uint16_t)i;
   d613e:	8004      	strh	r4, [r0, #0]
            return bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_at(i));
   d6140:	680b      	ldr	r3, [r1, #0]
   d6142:	3318      	adds	r3, #24
   d6144:	4413      	add	r3, r2
/****************************************/
/****************************************/

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
   d6146:	f04f 32ff 	mov.w	r2, #4294967295
   d614a:	751a      	strb	r2, [r3, #20]
   d614c:	755a      	strb	r2, [r3, #21]
   d614e:	2200      	movs	r2, #0
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
        x->keys[j] = 0;
   d6150:	4611      	mov	r1, r2
   d6152:	eb03 0042 	add.w	r0, r3, r2, lsl #1
   d6156:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
   d615a:	3201      	adds	r2, #1

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d615c:	2a05      	cmp	r2, #5
        x->keys[j] = 0;
   d615e:	7041      	strb	r1, [r0, #1]
        x->values[j] = 0;
   d6160:	7281      	strb	r1, [r0, #10]
   d6162:	72c1      	strb	r1, [r0, #11]

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d6164:	d1f5      	bne.n	d6152 <bbzheap_tseg_alloc+0x5e>
        ++i) {
        if(!bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) {
            /* Empty slot found */
            /* Set result */
            *s = (uint16_t)i;
            return bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_at(i));
   d6166:	2001      	movs	r0, #1
   d6168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        }
    }
    /* Make sure there is room */
    if(vm->heap.ltseg - sizeof(bbzheap_tseg_t) < vm->heap.rtobj) return 0;
   d616c:	693c      	ldr	r4, [r7, #16]
   d616e:	f1a6 0216 	sub.w	r2, r6, #22
   d6172:	42a2      	cmp	r2, r4
   d6174:	d31b      	bcc.n	d61ae <bbzheap_tseg_alloc+0xba>
    /* Set result */
    *s = (uint16_t)qot;
   d6176:	8003      	strh	r3, [r0, #0]
    /* Update pointer to leftmost valid segment */
    vm->heap.ltseg -= sizeof(bbzheap_tseg_t);
   d6178:	680b      	ldr	r3, [r1, #0]
   d617a:	6958      	ldr	r0, [r3, #20]
   d617c:	f1a0 0216 	sub.w	r2, r0, #22
   d6180:	615a      	str	r2, [r3, #20]
/****************************************/
/****************************************/

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
   d6182:	f04f 33ff 	mov.w	r3, #4294967295
   d6186:	f800 3c02 	strb.w	r3, [r0, #-2]
   d618a:	f800 3c01 	strb.w	r3, [r0, #-1]
   d618e:	2300      	movs	r3, #0
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
        x->keys[j] = 0;
   d6190:	4619      	mov	r1, r3
   d6192:	eb00 0243 	add.w	r2, r0, r3, lsl #1
   d6196:	3301      	adds	r3, #1

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d6198:	2b05      	cmp	r3, #5
        x->keys[j] = 0;
   d619a:	f802 1c16 	strb.w	r1, [r2, #-22]
   d619e:	f802 1c15 	strb.w	r1, [r2, #-21]
        x->values[j] = 0;
   d61a2:	f802 1c0c 	strb.w	r1, [r2, #-12]
   d61a6:	f802 1c0b 	strb.w	r1, [r2, #-11]

static uint8_t bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_t* x) {
    /* Set valid bit of segment and -1 index for next */
    bbzheap_tseg_makevalid(*x);
    /* Invalidate keys and values */
    for(uint8_t j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j) {
   d61aa:	d1f2      	bne.n	d6192 <bbzheap_tseg_alloc+0x9e>
   d61ac:	e7db      	b.n	d6166 <bbzheap_tseg_alloc+0x72>
            *s = (uint16_t)i;
            return bbzheap_tseg_alloc_prepare_seg(bbzheap_tseg_at(i));
        }
    }
    /* Make sure there is room */
    if(vm->heap.ltseg - sizeof(bbzheap_tseg_t) < vm->heap.rtobj) return 0;
   d61ae:	2000      	movs	r0, #0
    /* Set result */
    *s = (uint16_t)qot;
    /* Update pointer to leftmost valid segment */
    vm->heap.ltseg -= sizeof(bbzheap_tseg_t);
    return bbzheap_tseg_alloc_prepare_seg((bbzheap_tseg_t*)vm->heap.ltseg);
}
   d61b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d61b4:	2003e3f4 	.word	0x2003e3f4

000d61b8 <_ZL29bbzheap_obj_alloc_prepare_objhP8bbzobj_t>:
}

/****************************************/
/****************************************/

static uint8_t bbzheap_obj_alloc_prepare_obj(uint8_t t, bbzobj_t* x) {
   d61b8:	b508      	push	{r3, lr}
    /* Set valid bit and type */
    x->mdata = ((t << BBZTYPE_TYPEIDX) & BBZTYPE_MASK) | BBZHEAP_OBJ_MASK_VALID;
   d61ba:	f000 0307 	and.w	r3, r0, #7
   d61be:	f043 0308 	orr.w	r3, r3, #8
    /* Take care of special initialisations */
    if (t == BBZTYPE_TABLE) {
   d61c2:	2804      	cmp	r0, #4
/****************************************/
/****************************************/

static uint8_t bbzheap_obj_alloc_prepare_obj(uint8_t t, bbzobj_t* x) {
    /* Set valid bit and type */
    x->mdata = ((t << BBZTYPE_TYPEIDX) & BBZTYPE_MASK) | BBZHEAP_OBJ_MASK_VALID;
   d61c4:	700b      	strb	r3, [r1, #0]
    /* Take care of special initialisations */
    if (t == BBZTYPE_TABLE) {
   d61c6:	d106      	bne.n	d61d6 <_ZL29bbzheap_obj_alloc_prepare_objhP8bbzobj_t+0x1e>
        if (!bbzheap_tseg_alloc(&x->t.value)) return 0;
   d61c8:	1c48      	adds	r0, r1, #1
   d61ca:	f7ff ff93 	bl	d60f4 <bbzheap_tseg_alloc>
    else if (t == BBZTYPE_CLOSURE) {
        bbzclosure_unmake_lambda(*x);
        (x)->l.value.actrec = BBZHEAP_CLOSURE_DFLT_ACTREC; // Default activation record
    }
    /* Success */
    return 1;
   d61ce:	3000      	adds	r0, #0
   d61d0:	bf18      	it	ne
   d61d2:	2001      	movne	r0, #1
   d61d4:	bd08      	pop	{r3, pc}
    x->mdata = ((t << BBZTYPE_TYPEIDX) & BBZTYPE_MASK) | BBZHEAP_OBJ_MASK_VALID;
    /* Take care of special initialisations */
    if (t == BBZTYPE_TABLE) {
        if (!bbzheap_tseg_alloc(&x->t.value)) return 0;
    }
    else if (t == BBZTYPE_CLOSURE) {
   d61d6:	2805      	cmp	r0, #5
        bbzclosure_unmake_lambda(*x);
        (x)->l.value.actrec = BBZHEAP_CLOSURE_DFLT_ACTREC; // Default activation record
   d61d8:	bf04      	itt	eq
   d61da:	23ff      	moveq	r3, #255	; 0xff
   d61dc:	708b      	strbeq	r3, [r1, #2]
    }
    /* Success */
    return 1;
   d61de:	2001      	movs	r0, #1
}
   d61e0:	bd08      	pop	{r3, pc}
	...

000d61e4 <bbzheap_obj_alloc>:

uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
   d61e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d61e8:	4a20      	ldr	r2, [pc, #128]	; (d626c <bbzheap_obj_alloc+0x88>)
   d61ea:	6817      	ldr	r7, [r2, #0]
   d61ec:	693e      	ldr	r6, [r7, #16]
   d61ee:	f107 0e18 	add.w	lr, r7, #24
   d61f2:	ebce 0306 	rsb	r3, lr, r6
   d61f6:	b29b      	uxth	r3, r3
   d61f8:	2505      	movs	r5, #5
   d61fa:	4694      	mov	ip, r2
   d61fc:	fbb3 f5f5 	udiv	r5, r3, r5
}

uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
   d6200:	231c      	movs	r3, #28
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d6202:	42ab      	cmp	r3, r5
   d6204:	d21d      	bcs.n	d6242 <bbzheap_obj_alloc+0x5e>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d6206:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   d620a:	eb0e 0804 	add.w	r8, lr, r4
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
        i < (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
        ++i) {
        if(!bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d620e:	f81e 2004 	ldrb.w	r2, [lr, r4]
   d6212:	f012 0f08 	tst.w	r2, #8
   d6216:	d105      	bne.n	d6224 <bbzheap_obj_alloc+0x40>
            /* Empty slot found */
            /* Set result */
            *o = i;
   d6218:	800b      	strh	r3, [r1, #0]

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d621a:	f8dc 1000 	ldr.w	r1, [ip]
   d621e:	3118      	adds	r1, #24
        ++i) {
        if(!bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
            /* Empty slot found */
            /* Set result */
            *o = i;
            return bbzheap_obj_alloc_prepare_obj(t, bbzheap_obj_at(i));
   d6220:	4421      	add	r1, r4
   d6222:	e018      	b.n	d6256 <bbzheap_obj_alloc+0x72>
        }
        else {
            if (t == BBZTYPE_STRING &&
                bbztype_isstring(*bbzheap_obj_at(i)) &&
   d6224:	2803      	cmp	r0, #3
   d6226:	d11d      	bne.n	d6264 <bbzheap_obj_alloc+0x80>
            /* Set result */
            *o = i;
            return bbzheap_obj_alloc_prepare_obj(t, bbzheap_obj_at(i));
        }
        else {
            if (t == BBZTYPE_STRING &&
   d6228:	f002 0207 	and.w	r2, r2, #7
   d622c:	2a03      	cmp	r2, #3
   d622e:	d119      	bne.n	d6264 <bbzheap_obj_alloc+0x80>
                bbztype_isstring(*bbzheap_obj_at(i)) &&
   d6230:	880c      	ldrh	r4, [r1, #0]
   d6232:	f8b8 2001 	ldrh.w	r2, [r8, #1]
   d6236:	4294      	cmp	r4, r2
   d6238:	d114      	bne.n	d6264 <bbzheap_obj_alloc+0x80>
                *o == bbzheap_obj_at(i)->s.value) {
                *o = i;
   d623a:	800b      	strh	r3, [r1, #0]
                return 1;
   d623c:	2001      	movs	r0, #1
   d623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
    }
    /* No empty slot found, must create a new one */
    /* ...but first, make sure there is room */
    if(vm->heap.rtobj + sizeof(bbzobj_t) > vm->heap.ltseg) { return 0; }
   d6242:	697b      	ldr	r3, [r7, #20]
   d6244:	3605      	adds	r6, #5
   d6246:	429e      	cmp	r6, r3
   d6248:	d809      	bhi.n	d625e <bbzheap_obj_alloc+0x7a>
    /* Set result */
    *o = (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d624a:	800d      	strh	r5, [r1, #0]
    vm->heap.rtobj += sizeof(bbzobj_t);
   d624c:	f8dc 3000 	ldr.w	r3, [ip]
   d6250:	6919      	ldr	r1, [r3, #16]
   d6252:	1d4a      	adds	r2, r1, #5
   d6254:	611a      	str	r2, [r3, #16]
    return bbzheap_obj_alloc_prepare_obj(t, (bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t)));
}
   d6256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    /* ...but first, make sure there is room */
    if(vm->heap.rtobj + sizeof(bbzobj_t) > vm->heap.ltseg) { return 0; }
    /* Set result */
    *o = (uint16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
    vm->heap.rtobj += sizeof(bbzobj_t);
    return bbzheap_obj_alloc_prepare_obj(t, (bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t)));
   d625a:	f7ff bfad 	b.w	d61b8 <_ZL29bbzheap_obj_alloc_prepare_objhP8bbzobj_t>
            }
        }
    }
    /* No empty slot found, must create a new one */
    /* ...but first, make sure there is room */
    if(vm->heap.rtobj + sizeof(bbzobj_t) > vm->heap.ltseg) { return 0; }
   d625e:	2000      	movs	r0, #0
   d6260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

uint8_t bbzheap_obj_alloc(uint8_t t,
                          bbzheap_idx_t* o) {
    /* Look for empty slot */
    for(uint16_t i = BBZHEAP_RSV_ACTREC_MAX;
   d6264:	3301      	adds	r3, #1
   d6266:	b29b      	uxth	r3, r3
   d6268:	e7cb      	b.n	d6202 <bbzheap_obj_alloc+0x1e>
   d626a:	bf00      	nop
   d626c:	2003e3f4 	.word	0x2003e3f4

000d6270 <bbzheap_gc>:
    }
    --callstack;
}

void bbzheap_gc(bbzheap_idx_t* st,
                uint16_t sz) {
   d6270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
   d6274:	4e5e      	ldr	r6, [pc, #376]	; (d63f0 <bbzheap_gc+0x180>)
   d6276:	6832      	ldr	r2, [r6, #0]
   d6278:	6914      	ldr	r4, [r2, #16]
    }
    --callstack;
}

void bbzheap_gc(bbzheap_idx_t* st,
                uint16_t sz) {
   d627a:	460d      	mov	r5, r1
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
   d627c:	f102 0118 	add.w	r1, r2, #24
   d6280:	1a64      	subs	r4, r4, r1
   d6282:	2305      	movs	r3, #5
   d6284:	b224      	sxth	r4, r4
   d6286:	fbb4 f4f3 	udiv	r4, r4, r3
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d628a:	f502 638b 	add.w	r3, r2, #1112	; 0x458
   d628e:	6952      	ldr	r2, [r2, #20]
   d6290:	1a9b      	subs	r3, r3, r2
   d6292:	2216      	movs	r2, #22
    }
    --callstack;
}

void bbzheap_gc(bbzheap_idx_t* st,
                uint16_t sz) {
   d6294:	4607      	mov	r7, r0
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d6296:	b21b      	sxth	r3, r3
}

void bbzheap_gc(bbzheap_idx_t* st,
                uint16_t sz) {
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
   d6298:	b2a4      	uxth	r4, r4
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d629a:	fbb3 f3f2 	udiv	r3, r3, r2
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
   d629e:	f64f 7cff 	movw	ip, #65535	; 0xffff

void bbzheap_gc(bbzheap_idx_t* st,
                uint16_t sz) {
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d62a2:	b29b      	uxth	r3, r3
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
        bbzheap_gc_tseg_unmark(*bbzheap_tseg_at(i));
   d62a4:	4610      	mov	r0, r2
                uint16_t sz) {
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
   d62a6:	3b01      	subs	r3, #1
   d62a8:	b29b      	uxth	r3, r3
   d62aa:	4563      	cmp	r3, ip
   d62ac:	d103      	bne.n	d62b6 <bbzheap_gc+0x46>
   d62ae:	4623      	mov	r3, r4
        bbzheap_gc_tseg_unmark(*bbzheap_tseg_at(i));
    /* Set all gc bits to zero */
    for(i = qot; i-- != 0;) {
   d62b0:	f64f 7eff 	movw	lr, #65535	; 0xffff
   d62b4:	e014      	b.n	d62e0 <bbzheap_gc+0x70>
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
        bbzheap_gc_tseg_unmark(*bbzheap_tseg_at(i));
   d62b6:	fb00 f203 	mul.w	r2, r0, r3
   d62ba:	f5c2 6285 	rsb	r2, r2, #1064	; 0x428
   d62be:	3202      	adds	r2, #2
   d62c0:	440a      	add	r2, r1
   d62c2:	f8b2 e014 	ldrh.w	lr, [r2, #20]
   d62c6:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
   d62ca:	f8a2 e014 	strh.w	lr, [r2, #20]
                uint16_t sz) {
    uint16_t i;
    const uint16_t qot = (int16_t)(vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t),
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
   d62ce:	e7ea      	b.n	d62a6 <bbzheap_gc+0x36>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d62d0:	6832      	ldr	r2, [r6, #0]
   d62d2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   d62d6:	3218      	adds	r2, #24
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
        bbzheap_gc_tseg_unmark(*bbzheap_tseg_at(i));
    /* Set all gc bits to zero */
    for(i = qot; i-- != 0;) {
        gc_unmark(*bbzheap_obj_at(i));
   d62d8:	5c11      	ldrb	r1, [r2, r0]
   d62da:	f021 0120 	bic.w	r1, r1, #32
   d62de:	5411      	strb	r1, [r2, r0]
                   qot2 = (int16_t)(vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
    /* Set all segment's gc bits to zero */
    for(i = qot2; i-- != 0;)
        bbzheap_gc_tseg_unmark(*bbzheap_tseg_at(i));
    /* Set all gc bits to zero */
    for(i = qot; i-- != 0;) {
   d62e0:	3b01      	subs	r3, #1
   d62e2:	b29b      	uxth	r3, r3
   d62e4:	4573      	cmp	r3, lr
   d62e6:	d1f3      	bne.n	d62d0 <bbzheap_gc+0x60>
   d62e8:	f104 38ff 	add.w	r8, r4, #4294967295
   d62ec:	fa1f f888 	uxth.w	r8, r8
        gc_unmark(*bbzheap_obj_at(i));
    }
    for(i = qot; i-- != 0;) {
   d62f0:	f64f 79ff 	movw	r9, #65535	; 0xffff
   d62f4:	e00a      	b.n	d630c <bbzheap_gc+0x9c>
        if (bbzheap_obj_ispermanent(*bbzheap_obj_at(i))) {
   d62f6:	6832      	ldr	r2, [r6, #0]
   d62f8:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   d62fc:	4413      	add	r3, r2
   d62fe:	7e1b      	ldrb	r3, [r3, #24]
   d6300:	06db      	lsls	r3, r3, #27
   d6302:	d406      	bmi.n	d6312 <bbzheap_gc+0xa2>
   d6304:	f108 38ff 	add.w	r8, r8, #4294967295
   d6308:	fa1f f888 	uxth.w	r8, r8
        bbzheap_gc_tseg_unmark(*bbzheap_tseg_at(i));
    /* Set all gc bits to zero */
    for(i = qot; i-- != 0;) {
        gc_unmark(*bbzheap_obj_at(i));
    }
    for(i = qot; i-- != 0;) {
   d630c:	45c8      	cmp	r8, r9
   d630e:	d1f2      	bne.n	d62f6 <bbzheap_gc+0x86>
   d6310:	e003      	b.n	d631a <bbzheap_gc+0xaa>
        if (bbzheap_obj_ispermanent(*bbzheap_obj_at(i))) {
            bbzheap_gc_mark((bbzheap_idx_t)(i));
   d6312:	4640      	mov	r0, r8
   d6314:	f7ff fe76 	bl	d6004 <_ZL15bbzheap_gc_markt>
   d6318:	e7f4      	b.n	d6304 <bbzheap_gc+0x94>
   d631a:	3d01      	subs	r5, #1
   d631c:	b2ad      	uxth	r5, r5
        }
    }
    /* Go through the stack and set the gc bit of valid variables */
    for(i = sz; i-- != 0;) {
   d631e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   d6322:	4545      	cmp	r5, r8
   d6324:	d106      	bne.n	d6334 <bbzheap_gc+0xc4>
        /* Mark gc bit */
        bbzheap_gc_mark(st[i]);
    }
    /* Go through the objects; invalidate those with 0 gc bit */
    for(i = qot; i-- != 0;) {
   d6326:	f64f 70ff 	movw	r0, #65535	; 0xffff

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d632a:	4d31      	ldr	r5, [pc, #196]	; (d63f0 <bbzheap_gc+0x180>)
                bbzheap_idx_t si = bbzheap_obj_at(i)->t.value;
                // FIXED We should add a tseg GC mark. In the case we
                // where have two 'equal' tables, but one has a mark
                // and one does not, we do not want to invalidate the
                // table segments.
                if(bbzheap_gc_tseg_hasmark(*bbzheap_tseg_at(bbzheap_obj_at(i)->t.value))) {
   d632c:	2116      	movs	r1, #22
                /* Actual segment data in heap */
                bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
                /* Go through the segments and invalidate them all */
                while(1) {
                    bbzheap_tseg_makeinvalid(*sd);
                    if(!bbzheap_tseg_hasnext(sd)) break;
   d632e:	f643 77ff 	movw	r7, #16383	; 0x3fff
   d6332:	e00f      	b.n	d6354 <bbzheap_gc+0xe4>
        }
    }
    /* Go through the stack and set the gc bit of valid variables */
    for(i = sz; i-- != 0;) {
        /* Mark gc bit */
        bbzheap_gc_mark(st[i]);
   d6334:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
   d6338:	3d01      	subs	r5, #1
   d633a:	f7ff fe63 	bl	d6004 <_ZL15bbzheap_gc_markt>
   d633e:	b2ad      	uxth	r5, r5
        if (bbzheap_obj_ispermanent(*bbzheap_obj_at(i))) {
            bbzheap_gc_mark((bbzheap_idx_t)(i));
        }
    }
    /* Go through the stack and set the gc bit of valid variables */
    for(i = sz; i-- != 0;) {
   d6340:	e7ef      	b.n	d6322 <bbzheap_gc+0xb2>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d6342:	6832      	ldr	r2, [r6, #0]
   d6344:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
   d6348:	3218      	adds	r2, #24
        /* Mark gc bit */
        bbzheap_gc_mark(st[i]);
    }
    /* Go through the objects; invalidate those with 0 gc bit */
    for(i = qot; i-- != 0;) {
        if(!gc_hasmark(*bbzheap_obj_at(i)) && bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d634a:	f812 300e 	ldrb.w	r3, [r2, lr]
   d634e:	f013 0f20 	tst.w	r3, #32
   d6352:	d004      	beq.n	d635e <bbzheap_gc+0xee>
    for(i = sz; i-- != 0;) {
        /* Mark gc bit */
        bbzheap_gc_mark(st[i]);
    }
    /* Go through the objects; invalidate those with 0 gc bit */
    for(i = qot; i-- != 0;) {
   d6354:	3c01      	subs	r4, #1
   d6356:	b2a4      	uxth	r4, r4
   d6358:	4284      	cmp	r4, r0
   d635a:	d1f2      	bne.n	d6342 <bbzheap_gc+0xd2>
   d635c:	e003      	b.n	d6366 <bbzheap_gc+0xf6>
        if(!gc_hasmark(*bbzheap_obj_at(i)) && bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d635e:	f013 0f08 	tst.w	r3, #8
   d6362:	d119      	bne.n	d6398 <bbzheap_gc+0x128>
   d6364:	e7f6      	b.n	d6354 <bbzheap_gc+0xe4>
            }
        }
    }
    /* Move rightmost object pointer as far left as possible */
    for(;
        vm->heap.rtobj > vm->heap.data + BBZHEAP_RSV_ACTREC_MAX*sizeof(bbzobj_t);
   d6366:	6833      	ldr	r3, [r6, #0]
   d6368:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
   d636c:	691a      	ldr	r2, [r3, #16]
   d636e:	428a      	cmp	r2, r1
   d6370:	d906      	bls.n	d6380 <bbzheap_gc+0x110>
        vm->heap.rtobj -= sizeof(bbzobj_t))
        if(bbzheap_obj_isvalid(*(bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t))))
   d6372:	f812 0c05 	ldrb.w	r0, [r2, #-5]
   d6376:	0700      	lsls	r0, r0, #28
   d6378:	d402      	bmi.n	d6380 <bbzheap_gc+0x110>
                }
            }
        }
    }
    /* Move rightmost object pointer as far left as possible */
    for(;
   d637a:	3a05      	subs	r2, #5
   d637c:	611a      	str	r2, [r3, #16]
   d637e:	e7f5      	b.n	d636c <bbzheap_gc+0xfc>
        vm->heap.rtobj -= sizeof(bbzobj_t))
        if(bbzheap_obj_isvalid(*(bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t))))
            break;
    /* Move leftmost table segment pointer as far right as possible */
    for(;
        vm->heap.ltseg < vm->heap.data + BBZHEAP_SIZE;
   d6380:	f503 618b 	add.w	r1, r3, #1112	; 0x458
   d6384:	695a      	ldr	r2, [r3, #20]
   d6386:	428a      	cmp	r2, r1
   d6388:	d230      	bcs.n	d63ec <bbzheap_gc+0x17c>
        vm->heap.ltseg += sizeof(bbzheap_tseg_t)) {
        if(bbzheap_tseg_isvalid(*(bbzheap_tseg_t*)vm->heap.ltseg))
   d638a:	f9b2 0014 	ldrsh.w	r0, [r2, #20]
   d638e:	2800      	cmp	r0, #0
   d6390:	db2c      	blt.n	d63ec <bbzheap_gc+0x17c>
        vm->heap.rtobj > vm->heap.data + BBZHEAP_RSV_ACTREC_MAX*sizeof(bbzobj_t);
        vm->heap.rtobj -= sizeof(bbzobj_t))
        if(bbzheap_obj_isvalid(*(bbzobj_t*)(vm->heap.rtobj - sizeof(bbzobj_t))))
            break;
    /* Move leftmost table segment pointer as far right as possible */
    for(;
   d6392:	3216      	adds	r2, #22
   d6394:	615a      	str	r2, [r3, #20]
   d6396:	e7f5      	b.n	d6384 <bbzheap_gc+0x114>
    }
    /* Go through the objects; invalidate those with 0 gc bit */
    for(i = qot; i-- != 0;) {
        if(!gc_hasmark(*bbzheap_obj_at(i)) && bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
            /* Invalidate object */
            bbzheap_obj_makeinvalid(*bbzheap_obj_at(i));
   d6398:	f023 0308 	bic.w	r3, r3, #8
   d639c:	f802 300e 	strb.w	r3, [r2, lr]

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d63a0:	682a      	ldr	r2, [r5, #0]
   d63a2:	3218      	adds	r2, #24
   d63a4:	eb02 0c0e 	add.w	ip, r2, lr
    for(i = qot; i-- != 0;) {
        if(!gc_hasmark(*bbzheap_obj_at(i)) && bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
            /* Invalidate object */
            bbzheap_obj_makeinvalid(*bbzheap_obj_at(i));
            /* If it's a table, invalidate its segments too */
            if(bbztype_istable(*bbzheap_obj_at(i))) {
   d63a8:	f812 300e 	ldrb.w	r3, [r2, lr]
   d63ac:	f003 0307 	and.w	r3, r3, #7
   d63b0:	2b04      	cmp	r3, #4
   d63b2:	d1cf      	bne.n	d6354 <bbzheap_gc+0xe4>
                bbzheap_idx_t si = bbzheap_obj_at(i)->t.value;
                // FIXED We should add a tseg GC mark. In the case we
                // where have two 'equal' tables, but one has a mark
                // and one does not, we do not want to invalidate the
                // table segments.
                if(bbzheap_gc_tseg_hasmark(*bbzheap_tseg_at(bbzheap_obj_at(i)->t.value))) {
   d63b4:	f8bc 3001 	ldrh.w	r3, [ip, #1]
   d63b8:	434b      	muls	r3, r1
   d63ba:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d63be:	3302      	adds	r3, #2
   d63c0:	4413      	add	r3, r2
   d63c2:	f8b3 e014 	ldrh.w	lr, [r3, #20]
   d63c6:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
   d63ca:	d1c3      	bne.n	d6354 <bbzheap_gc+0xe4>
                }
                /* Actual segment data in heap */
                bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
                /* Go through the segments and invalidate them all */
                while(1) {
                    bbzheap_tseg_makeinvalid(*sd);
   d63cc:	f8b3 e014 	ldrh.w	lr, [r3, #20]
   d63d0:	f3ce 0c0e 	ubfx	ip, lr, #0, #15
   d63d4:	f8a3 c014 	strh.w	ip, [r3, #20]
   d63d8:	f3ce 030d 	ubfx	r3, lr, #0, #14
                    if(!bbzheap_tseg_hasnext(sd)) break;
   d63dc:	42bb      	cmp	r3, r7
   d63de:	d0b9      	beq.n	d6354 <bbzheap_gc+0xe4>
                    si = bbzheap_tseg_next_get(sd);
                    sd = bbzheap_tseg_at(si);
   d63e0:	434b      	muls	r3, r1
   d63e2:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d63e6:	3302      	adds	r3, #2
   d63e8:	4413      	add	r3, r2
                    continue;
                }
                /* Actual segment data in heap */
                bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
                /* Go through the segments and invalidate them all */
                while(1) {
   d63ea:	e7ef      	b.n	d63cc <bbzheap_gc+0x15c>
   d63ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d63f0:	2003e3f4 	.word	0x2003e3f4

000d63f4 <bbzheap_print>:

#ifndef BBZCROSSCOMPILING

static const char* bbzvm_types_desc[] = { "nil", "integer", "float", "string", "table", "closure", "userdata" };

void bbzheap_print() {
   d63f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    Log_Write(LOG_LEVEL_INFO, "---------------\n");
   d63f8:	499a      	ldr	r1, [pc, #616]	; (d6664 <bbzheap_print+0x270>)
    Log_Write(LOG_LEVEL_INFO, "- HEAP STATUS -\n");
    Log_Write(LOG_LEVEL_INFO, "---------------\n\n");
    /* Object-related stuff */
    uint16_t objimax = (vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d63fa:	4c9b      	ldr	r4, [pc, #620]	; (d6668 <bbzheap_print+0x274>)
#ifndef BBZCROSSCOMPILING

static const char* bbzvm_types_desc[] = { "nil", "integer", "float", "string", "table", "closure", "userdata" };

void bbzheap_print() {
    Log_Write(LOG_LEVEL_INFO, "---------------\n");
   d63fc:	2002      	movs	r0, #2
   d63fe:	f7fd feff 	bl	d4200 <_Z9Log_WriteiPKcz>
    Log_Write(LOG_LEVEL_INFO, "- HEAP STATUS -\n");
   d6402:	499a      	ldr	r1, [pc, #616]	; (d666c <bbzheap_print+0x278>)
   d6404:	2002      	movs	r0, #2
   d6406:	f7fd fefb 	bl	d4200 <_Z9Log_WriteiPKcz>
    Log_Write(LOG_LEVEL_INFO, "---------------\n\n");
   d640a:	4999      	ldr	r1, [pc, #612]	; (d6670 <bbzheap_print+0x27c>)
   d640c:	2002      	movs	r0, #2
   d640e:	f7fd fef7 	bl	d4200 <_Z9Log_WriteiPKcz>
    /* Object-related stuff */
    uint16_t objimax = (vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d6412:	6826      	ldr	r6, [r4, #0]
    Log_Write(LOG_LEVEL_INFO, "Max object index: %d\n", objimax - 1);
   d6414:	4997      	ldr	r1, [pc, #604]	; (d6674 <bbzheap_print+0x280>)
void bbzheap_print() {
    Log_Write(LOG_LEVEL_INFO, "---------------\n");
    Log_Write(LOG_LEVEL_INFO, "- HEAP STATUS -\n");
    Log_Write(LOG_LEVEL_INFO, "---------------\n\n");
    /* Object-related stuff */
    uint16_t objimax = (vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
   d6416:	6933      	ldr	r3, [r6, #16]
   d6418:	3618      	adds	r6, #24
   d641a:	1b9e      	subs	r6, r3, r6
   d641c:	2305      	movs	r3, #5
   d641e:	fbb6 f6f3 	udiv	r6, r6, r3
   d6422:	b2b6      	uxth	r6, r6
    Log_Write(LOG_LEVEL_INFO, "Max object index: %d\n", objimax - 1);
   d6424:	1e72      	subs	r2, r6, #1
   d6426:	2002      	movs	r0, #2
   d6428:	f7fd feea 	bl	d4200 <_Z9Log_WriteiPKcz>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d642c:	6823      	ldr	r3, [r4, #0]
   d642e:	f103 0118 	add.w	r1, r3, #24
   d6432:	2300      	movs	r3, #0
    Log_Write(LOG_LEVEL_INFO, "- HEAP STATUS -\n");
    Log_Write(LOG_LEVEL_INFO, "---------------\n\n");
    /* Object-related stuff */
    uint16_t objimax = (vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
    Log_Write(LOG_LEVEL_INFO, "Max object index: %d\n", objimax - 1);
    uint16_t objnum = 0;
   d6434:	461d      	mov	r5, r3
    for(uint16_t i = 0; i < objimax; ++i)
   d6436:	b29a      	uxth	r2, r3
   d6438:	4296      	cmp	r6, r2
   d643a:	d908      	bls.n	d644e <bbzheap_print+0x5a>
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) ++objnum;
   d643c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d6440:	3301      	adds	r3, #1
   d6442:	5c8a      	ldrb	r2, [r1, r2]
   d6444:	0710      	lsls	r0, r2, #28
   d6446:	bf44      	itt	mi
   d6448:	3501      	addmi	r5, #1
   d644a:	b2ad      	uxthmi	r5, r5
    Log_Write(LOG_LEVEL_INFO, "---------------\n\n");
    /* Object-related stuff */
    uint16_t objimax = (vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
    Log_Write(LOG_LEVEL_INFO, "Max object index: %d\n", objimax - 1);
    uint16_t objnum = 0;
    for(uint16_t i = 0; i < objimax; ++i)
   d644c:	e7f3      	b.n	d6436 <bbzheap_print+0x42>
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) ++objnum;
    Log_Write(LOG_LEVEL_INFO, "Valid objects: %d\n", objnum);
   d644e:	462a      	mov	r2, r5
   d6450:	4989      	ldr	r1, [pc, #548]	; (d6678 <bbzheap_print+0x284>)
    Log_Write(LOG_LEVEL_INFO, "Size per object: %zu\n", sizeof(bbzobj_t));
    for(uint16_t i = 0; i < objimax; ++i)
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d6452:	f8df 9214 	ldr.w	r9, [pc, #532]	; d6668 <bbzheap_print+0x274>
            Log_Write(LOG_LEVEL_INFO, "\t#%d: [%s]", i, bbzvm_types_desc[bbztype(*bbzheap_obj_at(i))]);
   d6456:	f8df a278 	ldr.w	sl, [pc, #632]	; d66d0 <bbzheap_print+0x2dc>
    uint16_t objimax = (vm->heap.rtobj - vm->heap.data) / sizeof(bbzobj_t);
    Log_Write(LOG_LEVEL_INFO, "Max object index: %d\n", objimax - 1);
    uint16_t objnum = 0;
    for(uint16_t i = 0; i < objimax; ++i)
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) ++objnum;
    Log_Write(LOG_LEVEL_INFO, "Valid objects: %d\n", objnum);
   d645a:	2002      	movs	r0, #2
   d645c:	f7fd fed0 	bl	d4200 <_Z9Log_WriteiPKcz>
    Log_Write(LOG_LEVEL_INFO, "Size per object: %zu\n", sizeof(bbzobj_t));
   d6460:	2205      	movs	r2, #5
   d6462:	4986      	ldr	r1, [pc, #536]	; (d667c <bbzheap_print+0x288>)
   d6464:	2002      	movs	r0, #2
   d6466:	f7fd fecb 	bl	d4200 <_Z9Log_WriteiPKcz>
   d646a:	2700      	movs	r7, #0
    for(uint16_t i = 0; i < objimax; ++i)
   d646c:	b2bb      	uxth	r3, r7
   d646e:	429e      	cmp	r6, r3
   d6470:	d964      	bls.n	d653c <bbzheap_print+0x148>
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d6472:	6823      	ldr	r3, [r4, #0]
   d6474:	eb07 0887 	add.w	r8, r7, r7, lsl #2
   d6478:	4443      	add	r3, r8
   d647a:	7e1b      	ldrb	r3, [r3, #24]
   d647c:	071a      	lsls	r2, r3, #28
   d647e:	d55b      	bpl.n	d6538 <bbzheap_print+0x144>
            Log_Write(LOG_LEVEL_INFO, "\t#%d: [%s]", i, bbzvm_types_desc[bbztype(*bbzheap_obj_at(i))]);
   d6480:	f003 0307 	and.w	r3, r3, #7
   d6484:	463a      	mov	r2, r7
   d6486:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
   d648a:	497d      	ldr	r1, [pc, #500]	; (d6680 <bbzheap_print+0x28c>)
   d648c:	2002      	movs	r0, #2
   d648e:	f7fd feb7 	bl	d4200 <_Z9Log_WriteiPKcz>
            if (bbzheap_obj_ispermanent(*bbzheap_obj_at(i))) Log_Write(LOG_LEVEL_INFO, "*");
   d6492:	f8d9 3000 	ldr.w	r3, [r9]
   d6496:	4443      	add	r3, r8
   d6498:	7e1b      	ldrb	r3, [r3, #24]
   d649a:	06db      	lsls	r3, r3, #27
   d649c:	d503      	bpl.n	d64a6 <bbzheap_print+0xb2>
   d649e:	4979      	ldr	r1, [pc, #484]	; (d6684 <bbzheap_print+0x290>)
   d64a0:	2002      	movs	r0, #2
   d64a2:	f7fd fead 	bl	d4200 <_Z9Log_WriteiPKcz>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d64a6:	6822      	ldr	r2, [r4, #0]
   d64a8:	3218      	adds	r2, #24
   d64aa:	eb02 0308 	add.w	r3, r2, r8
    Log_Write(LOG_LEVEL_INFO, "Size per object: %zu\n", sizeof(bbzobj_t));
    for(uint16_t i = 0; i < objimax; ++i)
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
            Log_Write(LOG_LEVEL_INFO, "\t#%d: [%s]", i, bbzvm_types_desc[bbztype(*bbzheap_obj_at(i))]);
            if (bbzheap_obj_ispermanent(*bbzheap_obj_at(i))) Log_Write(LOG_LEVEL_INFO, "*");
            switch(bbztype(*bbzheap_obj_at(i))) {
   d64ae:	f812 1008 	ldrb.w	r1, [r2, r8]
   d64b2:	f001 0207 	and.w	r2, r1, #7
   d64b6:	3a01      	subs	r2, #1
   d64b8:	2a05      	cmp	r2, #5
   d64ba:	d839      	bhi.n	d6530 <bbzheap_print+0x13c>
   d64bc:	e8df f002 	tbb	[pc, r2]
   d64c0:	15030603 	.word	0x15030603
   d64c4:	191d      	.short	0x191d
                case BBZTYPE_NIL:
                    break;
                case BBZTYPE_STRING: // fallthrough
                case BBZTYPE_INT:
                    Log_Write(LOG_LEVEL_INFO, " %d", bbzheap_obj_at(i)->i.value);
   d64c6:	f9b3 2001 	ldrsh.w	r2, [r3, #1]
   d64ca:	e02d      	b.n	d6528 <bbzheap_print+0x134>
                    break;
                case BBZTYPE_FLOAT:
                    Log_Write(LOG_LEVEL_INFO, " %f", bbzfloat_tofloat(bbzheap_obj_at(i)->f.value));
   d64cc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   d64d0:	f000 fb04 	bl	d6adc <bbzfloat_tofloat>
   d64d4:	ee10 0a10 	vmov	r0, s0
   d64d8:	f002 f8b2 	bl	d8640 <__aeabi_f2d>
   d64dc:	4602      	mov	r2, r0
   d64de:	460b      	mov	r3, r1
   d64e0:	2002      	movs	r0, #2
   d64e2:	4969      	ldr	r1, [pc, #420]	; (d6688 <bbzheap_print+0x294>)
   d64e4:	f7fd fe8c 	bl	d4200 <_Z9Log_WriteiPKcz>
                    break;
   d64e8:	e022      	b.n	d6530 <bbzheap_print+0x13c>
                case BBZTYPE_TABLE:
                    Log_Write(LOG_LEVEL_INFO, " %" PRIu16, bbzheap_obj_at(i)->t.value);
   d64ea:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   d64ee:	4967      	ldr	r1, [pc, #412]	; (d668c <bbzheap_print+0x298>)
   d64f0:	e01b      	b.n	d652a <bbzheap_print+0x136>
                    break;
                case BBZTYPE_USERDATA:
                    Log_Write(LOG_LEVEL_INFO, " %" PRIXPTR, bbzheap_obj_at(i)->u.value);
   d64f2:	f8d3 2001 	ldr.w	r2, [r3, #1]
   d64f6:	4966      	ldr	r1, [pc, #408]	; (d6690 <bbzheap_print+0x29c>)
   d64f8:	e017      	b.n	d652a <bbzheap_print+0x136>
                    break;
                case BBZTYPE_CLOSURE:
                    if (bbztype_isclosurenative(*bbzheap_obj_at(i))) Log_Write(LOG_LEVEL_INFO, "[n]");
   d64fa:	0648      	lsls	r0, r1, #25
   d64fc:	d503      	bpl.n	d6506 <bbzheap_print+0x112>
   d64fe:	4965      	ldr	r1, [pc, #404]	; (d6694 <bbzheap_print+0x2a0>)
   d6500:	2002      	movs	r0, #2
   d6502:	f7fd fe7d 	bl	d4200 <_Z9Log_WriteiPKcz>

/****************************************/
/****************************************/

bbzobj_t* bbzheap_obj_at(bbzheap_idx_t i) {
    return (bbzobj_t*)vm->heap.data + i;
   d6506:	6823      	ldr	r3, [r4, #0]
   d6508:	3318      	adds	r3, #24
   d650a:	eb03 0208 	add.w	r2, r3, r8
                case BBZTYPE_USERDATA:
                    Log_Write(LOG_LEVEL_INFO, " %" PRIXPTR, bbzheap_obj_at(i)->u.value);
                    break;
                case BBZTYPE_CLOSURE:
                    if (bbztype_isclosurenative(*bbzheap_obj_at(i))) Log_Write(LOG_LEVEL_INFO, "[n]");
                    if (bbztype_isclosurelambda(*bbzheap_obj_at(i))) Log_Write(LOG_LEVEL_INFO, "[l] {%d;%d}", (int)(intptr_t)bbzheap_obj_at(i)->l.value.actrec, (int)(intptr_t)bbzheap_obj_at(i)->l.value.ref);
   d650e:	f913 3008 	ldrsb.w	r3, [r3, r8]
   d6512:	2b00      	cmp	r3, #0
   d6514:	da06      	bge.n	d6524 <bbzheap_print+0x130>
   d6516:	7853      	ldrb	r3, [r2, #1]
   d6518:	495f      	ldr	r1, [pc, #380]	; (d6698 <bbzheap_print+0x2a4>)
   d651a:	7892      	ldrb	r2, [r2, #2]
   d651c:	2002      	movs	r0, #2
   d651e:	f7fd fe6f 	bl	d4200 <_Z9Log_WriteiPKcz>
   d6522:	e005      	b.n	d6530 <bbzheap_print+0x13c>
                    else
                        Log_Write(LOG_LEVEL_INFO, " %d", (int)(intptr_t)bbzheap_obj_at(i)->c.value);
   d6524:	f8d2 2001 	ldr.w	r2, [r2, #1]
   d6528:	495c      	ldr	r1, [pc, #368]	; (d669c <bbzheap_print+0x2a8>)
   d652a:	2002      	movs	r0, #2
   d652c:	f7fd fe68 	bl	d4200 <_Z9Log_WriteiPKcz>
                    break;
                default:
                    break;
            }
            Log_Write(LOG_LEVEL_INFO, "\n");
   d6530:	495b      	ldr	r1, [pc, #364]	; (d66a0 <bbzheap_print+0x2ac>)
   d6532:	2002      	movs	r0, #2
   d6534:	f7fd fe64 	bl	d4200 <_Z9Log_WriteiPKcz>
   d6538:	3701      	adds	r7, #1
    uint16_t objnum = 0;
    for(uint16_t i = 0; i < objimax; ++i)
        if(bbzheap_obj_isvalid(*bbzheap_obj_at(i))) ++objnum;
    Log_Write(LOG_LEVEL_INFO, "Valid objects: %d\n", objnum);
    Log_Write(LOG_LEVEL_INFO, "Size per object: %zu\n", sizeof(bbzobj_t));
    for(uint16_t i = 0; i < objimax; ++i)
   d653a:	e797      	b.n	d646c <bbzheap_print+0x78>
                    break;
            }
            Log_Write(LOG_LEVEL_INFO, "\n");
        }
    /* Segment-related stuff */
    int tsegimax = (vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d653c:	6822      	ldr	r2, [r4, #0]
    Log_Write(LOG_LEVEL_INFO, "Max table segment index: %d\n", tsegimax);
   d653e:	4959      	ldr	r1, [pc, #356]	; (d66a4 <bbzheap_print+0x2b0>)
                    break;
            }
            Log_Write(LOG_LEVEL_INFO, "\n");
        }
    /* Segment-related stuff */
    int tsegimax = (vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d6540:	f8d2 9014 	ldr.w	r9, [r2, #20]
   d6544:	f502 638b 	add.w	r3, r2, #1112	; 0x458
   d6548:	ebc9 0303 	rsb	r3, r9, r3
    Log_Write(LOG_LEVEL_INFO, "Max table segment index: %d\n", tsegimax);
   d654c:	2002      	movs	r0, #2
                    break;
            }
            Log_Write(LOG_LEVEL_INFO, "\n");
        }
    /* Segment-related stuff */
    int tsegimax = (vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
   d654e:	f04f 0916 	mov.w	r9, #22
   d6552:	fbb3 f9f9 	udiv	r9, r3, r9
    Log_Write(LOG_LEVEL_INFO, "Max table segment index: %d\n", tsegimax);
   d6556:	464a      	mov	r2, r9
   d6558:	f7fd fe52 	bl	d4200 <_Z9Log_WriteiPKcz>
   d655c:	6823      	ldr	r3, [r4, #0]
    int tsegnum = 0;
    for(int i = 0; i < tsegimax; ++i)
   d655e:	2200      	movs	r2, #0
   d6560:	f203 4342 	addw	r3, r3, #1090	; 0x442
            Log_Write(LOG_LEVEL_INFO, "\n");
        }
    /* Segment-related stuff */
    int tsegimax = (vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
    Log_Write(LOG_LEVEL_INFO, "Max table segment index: %d\n", tsegimax);
    int tsegnum = 0;
   d6564:	4616      	mov	r6, r2
    for(int i = 0; i < tsegimax; ++i)
   d6566:	4591      	cmp	r9, r2
   d6568:	dd07      	ble.n	d657a <bbzheap_print+0x186>
        if(bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) ++tsegnum;
   d656a:	f9b3 1014 	ldrsh.w	r1, [r3, #20]
   d656e:	2900      	cmp	r1, #0
   d6570:	bfb8      	it	lt
   d6572:	3601      	addlt	r6, #1
        }
    /* Segment-related stuff */
    int tsegimax = (vm->heap.data + BBZHEAP_SIZE - vm->heap.ltseg) / sizeof(bbzheap_tseg_t);
    Log_Write(LOG_LEVEL_INFO, "Max table segment index: %d\n", tsegimax);
    int tsegnum = 0;
    for(int i = 0; i < tsegimax; ++i)
   d6574:	3201      	adds	r2, #1
   d6576:	3b16      	subs	r3, #22
   d6578:	e7f5      	b.n	d6566 <bbzheap_print+0x172>
        if(bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) ++tsegnum;
    Log_Write(LOG_LEVEL_INFO, "Valid table segments: %d\n", tsegnum);
   d657a:	4632      	mov	r2, r6
   d657c:	494a      	ldr	r1, [pc, #296]	; (d66a8 <bbzheap_print+0x2b4>)
   d657e:	2002      	movs	r0, #2
   d6580:	f7fd fe3e 	bl	d4200 <_Z9Log_WriteiPKcz>
    Log_Write(LOG_LEVEL_INFO, "Size per table segment: %zu\n", sizeof(bbzheap_tseg_t));
   d6584:	2216      	movs	r2, #22
   d6586:	4949      	ldr	r1, [pc, #292]	; (d66ac <bbzheap_print+0x2b8>)
   d6588:	2002      	movs	r0, #2
   d658a:	f7fd fe39 	bl	d4200 <_Z9Log_WriteiPKcz>
    bbzheap_tseg_t* seg;
    for(int i = 0; i < tsegimax; ++i) {
   d658e:	f04f 0800 	mov.w	r8, #0
   d6592:	45c1      	cmp	r9, r8
   d6594:	dd30      	ble.n	d65f8 <bbzheap_print+0x204>
        seg = bbzheap_tseg_at(i);
   d6596:	6827      	ldr	r7, [r4, #0]
   d6598:	f06f 0315 	mvn.w	r3, #21
   d659c:	fb03 7708 	mla	r7, r3, r8, r7
   d65a0:	f207 4742 	addw	r7, r7, #1090	; 0x442
        if(bbzheap_tseg_isvalid(*seg)) {
   d65a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   d65a8:	2b00      	cmp	r3, #0
   d65aa:	da22      	bge.n	d65f2 <bbzheap_print+0x1fe>
            Log_Write(LOG_LEVEL_INFO, "\t#%d: {", i);
   d65ac:	4642      	mov	r2, r8
   d65ae:	4940      	ldr	r1, [pc, #256]	; (d66b0 <bbzheap_print+0x2bc>)
   d65b0:	2002      	movs	r0, #2
   d65b2:	f7fd fe25 	bl	d4200 <_Z9Log_WriteiPKcz>
            for(int j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j)
   d65b6:	f04f 0a00 	mov.w	sl, #0
   d65ba:	eb07 034a 	add.w	r3, r7, sl, lsl #1
                if(bbzheap_tseg_elem_isvalid(seg->keys[j]))
   d65be:	8819      	ldrh	r1, [r3, #0]
   d65c0:	b28a      	uxth	r2, r1
   d65c2:	0409      	lsls	r1, r1, #16
   d65c4:	d508      	bpl.n	d65d8 <bbzheap_print+0x1e4>
                    Log_Write(LOG_LEVEL_INFO, " (%d,%d)",
                           bbzheap_tseg_elem_get(seg->keys[j]),
                           bbzheap_tseg_elem_get(seg->values[j]));
   d65c6:	895b      	ldrh	r3, [r3, #10]
   d65c8:	493a      	ldr	r1, [pc, #232]	; (d66b4 <bbzheap_print+0x2c0>)
   d65ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
   d65ce:	f3c2 020e 	ubfx	r2, r2, #0, #15
   d65d2:	2002      	movs	r0, #2
   d65d4:	f7fd fe14 	bl	d4200 <_Z9Log_WriteiPKcz>
    bbzheap_tseg_t* seg;
    for(int i = 0; i < tsegimax; ++i) {
        seg = bbzheap_tseg_at(i);
        if(bbzheap_tseg_isvalid(*seg)) {
            Log_Write(LOG_LEVEL_INFO, "\t#%d: {", i);
            for(int j = 0; j < BBZHEAP_ELEMS_PER_TSEG; ++j)
   d65d8:	f10a 0a01 	add.w	sl, sl, #1
   d65dc:	f1ba 0f05 	cmp.w	sl, #5
   d65e0:	d1eb      	bne.n	d65ba <bbzheap_print+0x1c6>
                if(bbzheap_tseg_elem_isvalid(seg->keys[j]))
                    Log_Write(LOG_LEVEL_INFO, " (%d,%d)",
                           bbzheap_tseg_elem_get(seg->keys[j]),
                           bbzheap_tseg_elem_get(seg->values[j]));
            Log_Write(LOG_LEVEL_INFO, " /next=(%x|%d) }\n", bbzheap_tseg_next_get(seg), bbzheap_tseg_next_get(seg));
   d65e2:	8abb      	ldrh	r3, [r7, #20]
   d65e4:	4934      	ldr	r1, [pc, #208]	; (d66b8 <bbzheap_print+0x2c4>)
   d65e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d65ea:	461a      	mov	r2, r3
   d65ec:	2002      	movs	r0, #2
   d65ee:	f7fd fe07 	bl	d4200 <_Z9Log_WriteiPKcz>
    for(int i = 0; i < tsegimax; ++i)
        if(bbzheap_tseg_isvalid(*bbzheap_tseg_at(i))) ++tsegnum;
    Log_Write(LOG_LEVEL_INFO, "Valid table segments: %d\n", tsegnum);
    Log_Write(LOG_LEVEL_INFO, "Size per table segment: %zu\n", sizeof(bbzheap_tseg_t));
    bbzheap_tseg_t* seg;
    for(int i = 0; i < tsegimax; ++i) {
   d65f2:	f108 0801 	add.w	r8, r8, #1
   d65f6:	e7cc      	b.n	d6592 <bbzheap_print+0x19e>
                           bbzheap_tseg_elem_get(seg->keys[j]),
                           bbzheap_tseg_elem_get(seg->values[j]));
            Log_Write(LOG_LEVEL_INFO, " /next=(%x|%d) }\n", bbzheap_tseg_next_get(seg), bbzheap_tseg_next_get(seg));
        }
    }
    int usage = (objnum * sizeof(bbzobj_t)) + (tsegnum * sizeof(bbzheap_tseg_t));
   d65f8:	2716      	movs	r7, #22
   d65fa:	437e      	muls	r6, r7
   d65fc:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   d6600:	44b0      	add	r8, r6
    Log_Write(LOG_LEVEL_INFO, "Heap usage (B): %04d/%04d (%.1f%%)\n", usage, BBZHEAP_SIZE, ((double)usage/BBZHEAP_SIZE)*100.0);
   d6602:	4640      	mov	r0, r8
   d6604:	f002 f80a 	bl	d861c <__aeabi_i2d>
   d6608:	2200      	movs	r2, #0
   d660a:	4b2c      	ldr	r3, [pc, #176]	; (d66bc <bbzheap_print+0x2c8>)
   d660c:	f002 f996 	bl	d893c <__aeabi_ddiv>
   d6610:	2200      	movs	r2, #0
   d6612:	4b2b      	ldr	r3, [pc, #172]	; (d66c0 <bbzheap_print+0x2cc>)
   d6614:	f002 f868 	bl	d86e8 <__aeabi_dmul>
   d6618:	f44f 6388 	mov.w	r3, #1088	; 0x440
   d661c:	e9cd 0100 	strd	r0, r1, [sp]
   d6620:	4642      	mov	r2, r8
   d6622:	4928      	ldr	r1, [pc, #160]	; (d66c4 <bbzheap_print+0x2d0>)
   d6624:	2002      	movs	r0, #2
   d6626:	f7fd fdeb 	bl	d4200 <_Z9Log_WriteiPKcz>
    Log_Write(LOG_LEVEL_INFO, "Heap usage (B) for 16-bit pointers: %04d\n", (int)(objnum * 3 + (tsegnum * sizeof(bbzheap_tseg_t))));
   d662a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   d662e:	4432      	add	r2, r6
   d6630:	4925      	ldr	r1, [pc, #148]	; (d66c8 <bbzheap_print+0x2d4>)
   d6632:	2002      	movs	r0, #2
   d6634:	f7fd fde4 	bl	d4200 <_Z9Log_WriteiPKcz>
    int uspace = ((vm->heap.ltseg)-(vm->heap.rtobj));
   d6638:	6822      	ldr	r2, [r4, #0]
    Log_Write(LOG_LEVEL_INFO, "Unclaimed space (B): %d (=%d object(s) or %d segment(s))\n",
           uspace,
           (int)(uspace/sizeof(bbzobj_t)),
           (int)(uspace/sizeof(bbzheap_tseg_t)));
   d663a:	4924      	ldr	r1, [pc, #144]	; (d66cc <bbzheap_print+0x2d8>)
        }
    }
    int usage = (objnum * sizeof(bbzobj_t)) + (tsegnum * sizeof(bbzheap_tseg_t));
    Log_Write(LOG_LEVEL_INFO, "Heap usage (B): %04d/%04d (%.1f%%)\n", usage, BBZHEAP_SIZE, ((double)usage/BBZHEAP_SIZE)*100.0);
    Log_Write(LOG_LEVEL_INFO, "Heap usage (B) for 16-bit pointers: %04d\n", (int)(objnum * 3 + (tsegnum * sizeof(bbzheap_tseg_t))));
    int uspace = ((vm->heap.ltseg)-(vm->heap.rtobj));
   d663c:	6953      	ldr	r3, [r2, #20]
   d663e:	6912      	ldr	r2, [r2, #16]
    Log_Write(LOG_LEVEL_INFO, "Unclaimed space (B): %d (=%d object(s) or %d segment(s))\n",
           uspace,
           (int)(uspace/sizeof(bbzobj_t)),
           (int)(uspace/sizeof(bbzheap_tseg_t)));
   d6640:	2002      	movs	r0, #2
        }
    }
    int usage = (objnum * sizeof(bbzobj_t)) + (tsegnum * sizeof(bbzheap_tseg_t));
    Log_Write(LOG_LEVEL_INFO, "Heap usage (B): %04d/%04d (%.1f%%)\n", usage, BBZHEAP_SIZE, ((double)usage/BBZHEAP_SIZE)*100.0);
    Log_Write(LOG_LEVEL_INFO, "Heap usage (B) for 16-bit pointers: %04d\n", (int)(objnum * 3 + (tsegnum * sizeof(bbzheap_tseg_t))));
    int uspace = ((vm->heap.ltseg)-(vm->heap.rtobj));
   d6642:	1a9a      	subs	r2, r3, r2
    Log_Write(LOG_LEVEL_INFO, "Unclaimed space (B): %d (=%d object(s) or %d segment(s))\n",
           uspace,
           (int)(uspace/sizeof(bbzobj_t)),
           (int)(uspace/sizeof(bbzheap_tseg_t)));
   d6644:	2305      	movs	r3, #5
   d6646:	fbb2 f7f7 	udiv	r7, r2, r7
   d664a:	fbb2 f3f3 	udiv	r3, r2, r3
   d664e:	9700      	str	r7, [sp, #0]
   d6650:	f7fd fdd6 	bl	d4200 <_Z9Log_WriteiPKcz>
    Log_Write(LOG_LEVEL_INFO, "\n");
   d6654:	4912      	ldr	r1, [pc, #72]	; (d66a0 <bbzheap_print+0x2ac>)
   d6656:	2002      	movs	r0, #2
}
   d6658:	b002      	add	sp, #8
   d665a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int uspace = ((vm->heap.ltseg)-(vm->heap.rtobj));
    Log_Write(LOG_LEVEL_INFO, "Unclaimed space (B): %d (=%d object(s) or %d segment(s))\n",
           uspace,
           (int)(uspace/sizeof(bbzobj_t)),
           (int)(uspace/sizeof(bbzheap_tseg_t)));
    Log_Write(LOG_LEVEL_INFO, "\n");
   d665e:	f7fd bdcf 	b.w	d4200 <_Z9Log_WriteiPKcz>
   d6662:	bf00      	nop
   d6664:	000d8f3c 	.word	0x000d8f3c
   d6668:	2003e3f4 	.word	0x2003e3f4
   d666c:	000d8f4d 	.word	0x000d8f4d
   d6670:	000d8f5e 	.word	0x000d8f5e
   d6674:	000d8f70 	.word	0x000d8f70
   d6678:	000d8f86 	.word	0x000d8f86
   d667c:	000d8f99 	.word	0x000d8f99
   d6680:	000d8faf 	.word	0x000d8faf
   d6684:	000d8fba 	.word	0x000d8fba
   d6688:	000d8fbc 	.word	0x000d8fbc
   d668c:	000d8fc0 	.word	0x000d8fc0
   d6690:	000d8fc5 	.word	0x000d8fc5
   d6694:	000d8fc9 	.word	0x000d8fc9
   d6698:	000d8fcd 	.word	0x000d8fcd
   d669c:	000d8bce 	.word	0x000d8bce
   d66a0:	000d8f6e 	.word	0x000d8f6e
   d66a4:	000d8fd9 	.word	0x000d8fd9
   d66a8:	000d8ff6 	.word	0x000d8ff6
   d66ac:	000d9010 	.word	0x000d9010
   d66b0:	000d902d 	.word	0x000d902d
   d66b4:	000d9035 	.word	0x000d9035
   d66b8:	000d903e 	.word	0x000d903e
   d66bc:	40910000 	.word	0x40910000
   d66c0:	40590000 	.word	0x40590000
   d66c4:	000d9050 	.word	0x000d9050
   d66c8:	000d9074 	.word	0x000d9074
   d66cc:	000d909e 	.word	0x000d909e
   d66d0:	000d8f20 	.word	0x000d8f20

000d66d4 <_GLOBAL__sub_I_bbzheap_clear>:
   d66d4:	f000 bf78 	b.w	d75c8 <HAL_Pin_Map>

000d66d8 <_Z21bbztable_add_functiontPFvvE>:
#include "bbzutil.h"

void bbztable_add_function(uint16_t strid, bbzvm_funp fun) {
   d66d8:	b570      	push	{r4, r5, r6, lr}
   d66da:	4606      	mov	r6, r0
    bbzheap_idx_t t = bbzvm_stack_at(0); // Keep track of the table
   d66dc:	2000      	movs	r0, #0
#include "bbzutil.h"

void bbztable_add_function(uint16_t strid, bbzvm_funp fun) {
   d66de:	460d      	mov	r5, r1
    bbzheap_idx_t t = bbzvm_stack_at(0); // Keep track of the table
   d66e0:	f7fd fee2 	bl	d44a8 <bbzvm_stack_at>
   d66e4:	4604      	mov	r4, r0
    bbzvm_pushs(strid); // Push string key
   d66e6:	4630      	mov	r0, r6
   d66e8:	f7fe fa49 	bl	d4b7e <bbzvm_pushs>
   d66ec:	4628      	mov	r0, r5
   d66ee:	2100      	movs	r1, #0
   d66f0:	f7fd fff4 	bl	d46dc <bbzvm_pushc>
    bbzvm_pushcc(fun);  // Push C closure
    bbzvm_tput();       // Store in table, popping table, key and data
   d66f4:	f7fe fab0 	bl	d4c58 <bbzvm_tput>
    bbzvm_push(t);      // Restore the table on the stack
   d66f8:	4620      	mov	r0, r4
}
   d66fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void bbztable_add_function(uint16_t strid, bbzvm_funp fun) {
    bbzheap_idx_t t = bbzvm_stack_at(0); // Keep track of the table
    bbzvm_pushs(strid); // Push string key
    bbzvm_pushcc(fun);  // Push C closure
    bbzvm_tput();       // Store in table, popping table, key and data
    bbzvm_push(t);      // Restore the table on the stack
   d66fe:	f7fd bf71 	b.w	d45e4 <bbzvm_push>

000d6702 <_Z17bbztable_add_datatt>:
}

/****************************************/
/****************************************/

void bbztable_add_data(uint16_t strid, bbzheap_idx_t data) {
   d6702:	b570      	push	{r4, r5, r6, lr}
   d6704:	4606      	mov	r6, r0
    bbzheap_idx_t t = bbzvm_stack_at(0); // Keep track of the table
   d6706:	2000      	movs	r0, #0
}

/****************************************/
/****************************************/

void bbztable_add_data(uint16_t strid, bbzheap_idx_t data) {
   d6708:	460d      	mov	r5, r1
    bbzheap_idx_t t = bbzvm_stack_at(0); // Keep track of the table
   d670a:	f7fd fecd 	bl	d44a8 <bbzvm_stack_at>
   d670e:	4604      	mov	r4, r0
    bbzvm_pushs(strid); // Push string key
   d6710:	4630      	mov	r0, r6
   d6712:	f7fe fa34 	bl	d4b7e <bbzvm_pushs>
    bbzvm_push(data);   // Push data
   d6716:	4628      	mov	r0, r5
   d6718:	f7fd ff64 	bl	d45e4 <bbzvm_push>
    bbzvm_tput();       // Store in table, popping table, key and data
   d671c:	f7fe fa9c 	bl	d4c58 <bbzvm_tput>
    bbzvm_push(t);      // Restore the table on the stack
   d6720:	4620      	mov	r0, r4
}
   d6722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void bbztable_add_data(uint16_t strid, bbzheap_idx_t data) {
    bbzheap_idx_t t = bbzvm_stack_at(0); // Keep track of the table
    bbzvm_pushs(strid); // Push string key
    bbzvm_push(data);   // Push data
    bbzvm_tput();       // Store in table, popping table, key and data
    bbzvm_push(t);      // Restore the table on the stack
   d6726:	f7fd bf5d 	b.w	d45e4 <bbzvm_push>

000d672a <_Z18bbzutil_swapArraysPhS_h>:
}

/****************************************/
/****************************************/

void bbzutil_swapArrays(uint8_t *arr1, uint8_t *arr2, uint8_t size) {
   d672a:	b530      	push	{r4, r5, lr}
   d672c:	2500      	movs	r5, #0
    for (uint8_t i=0;i<size;++i) {
   d672e:	b2eb      	uxtb	r3, r5
   d6730:	429a      	cmp	r2, r3
   d6732:	d90d      	bls.n	d6750 <_Z18bbzutil_swapArraysPhS_h+0x26>
        arr1[i] ^= arr2[i];
   d6734:	780b      	ldrb	r3, [r1, #0]
   d6736:	7804      	ldrb	r4, [r0, #0]
   d6738:	405c      	eors	r4, r3
   d673a:	7004      	strb	r4, [r0, #0]
        arr2[i] ^= arr1[i];
   d673c:	780b      	ldrb	r3, [r1, #0]
   d673e:	4063      	eors	r3, r4
   d6740:	f801 3b01 	strb.w	r3, [r1], #1
        arr1[i] ^= arr2[i];
   d6744:	7804      	ldrb	r4, [r0, #0]
   d6746:	4063      	eors	r3, r4
   d6748:	f800 3b01 	strb.w	r3, [r0], #1
   d674c:	3501      	adds	r5, #1

/****************************************/
/****************************************/

void bbzutil_swapArrays(uint8_t *arr1, uint8_t *arr2, uint8_t size) {
    for (uint8_t i=0;i<size;++i) {
   d674e:	e7ee      	b.n	d672e <_Z18bbzutil_swapArraysPhS_h+0x4>
   d6750:	bd30      	pop	{r4, r5, pc}
	...

000d6754 <bbztable_get>:
/****************************************/
/****************************************/

uint8_t bbztable_get(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t* v) {
   d6754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6758:	4604      	mov	r4, r0
   d675a:	460f      	mov	r7, r1
   d675c:	4616      	mov	r6, r2
    if (!bbztype_istable(*bbzheap_obj_at(t))) return 0;
   d675e:	f7ff fcbf 	bl	d60e0 <bbzheap_obj_at>
   d6762:	7803      	ldrb	r3, [r0, #0]
   d6764:	f003 0307 	and.w	r3, r3, #7
   d6768:	2b04      	cmp	r3, #4
   d676a:	d12c      	bne.n	d67c6 <bbztable_get+0x72>
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d676c:	4620      	mov	r0, r4
   d676e:	f7ff fcb7 	bl	d60e0 <bbzheap_obj_at>
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d6772:	4a1e      	ldr	r2, [pc, #120]	; (d67ec <bbztable_get+0x98>)
   d6774:	f9b0 3001 	ldrsh.w	r3, [r0, #1]
   d6778:	6814      	ldr	r4, [r2, #0]
   d677a:	f04f 0916 	mov.w	r9, #22
   d677e:	fb03 4419 	mls	r4, r3, r9, r4
   d6782:	f204 4442 	addw	r4, r4, #1090	; 0x442
   d6786:	4690      	mov	r8, r2
                *v = bbzheap_tseg_elem_get(sd->values[i]);
                return 1;
            }
        }
        /* Are we done? */
        if (!bbzheap_tseg_hasnext(sd)) return 0;
   d6788:	f643 7aff 	movw	sl, #16383	; 0x3fff
/****************************************/
/****************************************/

uint8_t bbztable_get(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t* v) {
   d678c:	2500      	movs	r5, #0
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
            if (bbzheap_tseg_elem_isvalid(sd->keys[i]) &&
   d678e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
   d6792:	b298      	uxth	r0, r3
   d6794:	041b      	lsls	r3, r3, #16
   d6796:	d519      	bpl.n	d67cc <bbztable_get+0x78>
                bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
   d6798:	f3c0 000e 	ubfx	r0, r0, #0, #15
   d679c:	f7ff fca0 	bl	d60e0 <bbzheap_obj_at>
   d67a0:	4683      	mov	fp, r0
                            bbzheap_obj_at(k)) == 0) {
   d67a2:	4638      	mov	r0, r7
   d67a4:	f7ff fc9c 	bl	d60e0 <bbzheap_obj_at>
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
            if (bbzheap_tseg_elem_isvalid(sd->keys[i]) &&
                bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
   d67a8:	4601      	mov	r1, r0
   d67aa:	4658      	mov	r0, fp
   d67ac:	f7ff fb86 	bl	d5ebc <bbztype_cmp>
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
            if (bbzheap_tseg_elem_isvalid(sd->keys[i]) &&
   d67b0:	b960      	cbnz	r0, d67cc <bbztable_get+0x78>
                bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
                            bbzheap_obj_at(k)) == 0) {
                /* Key found */
                *v = bbzheap_tseg_elem_get(sd->values[i]);
   d67b2:	3504      	adds	r5, #4
   d67b4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
                return 1;
   d67b8:	2001      	movs	r0, #1
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
            if (bbzheap_tseg_elem_isvalid(sd->keys[i]) &&
                bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
                            bbzheap_obj_at(k)) == 0) {
                /* Key found */
                *v = bbzheap_tseg_elem_get(sd->values[i]);
   d67ba:	8863      	ldrh	r3, [r4, #2]
   d67bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
   d67c0:	8033      	strh	r3, [r6, #0]
                return 1;
   d67c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
/****************************************/

uint8_t bbztable_get(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t* v) {
    if (!bbztype_istable(*bbzheap_obj_at(t))) return 0;
   d67c6:	2000      	movs	r0, #0
   d67c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67cc:	3501      	adds	r5, #1
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
   d67ce:	2d05      	cmp	r5, #5
   d67d0:	d1dd      	bne.n	d678e <bbztable_get+0x3a>
                *v = bbzheap_tseg_elem_get(sd->values[i]);
                return 1;
            }
        }
        /* Are we done? */
        if (!bbzheap_tseg_hasnext(sd)) return 0;
   d67d2:	8aa4      	ldrh	r4, [r4, #20]
   d67d4:	f3c4 030d 	ubfx	r3, r4, #0, #14
   d67d8:	4553      	cmp	r3, sl
   d67da:	d0f4      	beq.n	d67c6 <bbztable_get+0x72>
        /* Get next segment */
        si = bbzheap_tseg_next_get(sd);
   d67dc:	461c      	mov	r4, r3
        sd = bbzheap_tseg_at(si);
   d67de:	f8d8 3000 	ldr.w	r3, [r8]
   d67e2:	fb04 3419 	mls	r4, r4, r9, r3
   d67e6:	f204 4442 	addw	r4, r4, #1090	; 0x442
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Go through segments */
    while (1) {
   d67ea:	e7cf      	b.n	d678c <bbztable_get+0x38>
   d67ec:	2003e3f4 	.word	0x2003e3f4

000d67f0 <bbztable_set>:

/****************************************/
/****************************************/
uint8_t bbztable_set(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t v) {
   d67f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67f4:	b089      	sub	sp, #36	; 0x24
   d67f6:	4615      	mov	r5, r2
   d67f8:	4683      	mov	fp, r0
   d67fa:	460f      	mov	r7, r1
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d67fc:	f7ff fc70 	bl	d60e0 <bbzheap_obj_at>
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d6800:	4e87      	ldr	r6, [pc, #540]	; (d6a20 <bbztable_set+0x230>)
uint8_t bbztable_set(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t v) {
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d6802:	f8b0 3001 	ldrh.w	r3, [r0, #1]
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d6806:	6834      	ldr	r4, [r6, #0]
   d6808:	2216      	movs	r2, #22
uint8_t bbztable_set(bbzheap_idx_t t,
                     bbzheap_idx_t k,
                     bbzheap_idx_t v) {
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
   d680a:	fa0f f883 	sxth.w	r8, r3
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d680e:	fb13 f302 	smulbb	r3, r3, r2
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
   d6812:	f04f 39ff 	mov.w	r9, #4294967295
                     bbzheap_idx_t v) {
    /* Search for the given key, keeping track of first free slot */
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
   d6816:	1ae3      	subs	r3, r4, r3
   d6818:	f203 4442 	addw	r4, r3, #1090	; 0x442
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
   d681c:	f8cd 9008 	str.w	r9, [sp, #8]
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
   d6820:	464b      	mov	r3, r9
   d6822:	f8cd 9004 	str.w	r9, [sp, #4]
        if (seg >= 0) break;
        /* Are we done? */
        if (!bbzheap_tseg_hasnext(sd)) break;
        /* Get next segment */
        si = bbzheap_tseg_next_get(sd);
        sd = bbzheap_tseg_at(si);
   d6826:	9203      	str	r2, [sp, #12]
    /* Get segment index */
    int16_t si = bbzheap_obj_at(t)->t.value;
    /* Get segment data */
    bbzheap_tseg_t* sd = bbzheap_tseg_at(si);
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
   d6828:	f04f 0a00 	mov.w	sl, #0
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
            //Serial.printlnf("test 4.4.8.0.1: %d, %d, %d", BBZHEAP_ELEMS_PER_TSEG, sd->mdata, bbzheap_tseg_elem_isvalid(sd->keys[i]));
            if (!bbzheap_tseg_elem_isvalid(sd->keys[i])) {
   d682c:	f834 201a 	ldrh.w	r2, [r4, sl, lsl #1]
   d6830:	b290      	uxth	r0, r2
   d6832:	0412      	lsls	r2, r2, #16
   d6834:	d406      	bmi.n	d6844 <bbztable_set+0x54>
                //Serial.printlnf("test 4.4.8.0.1.1 WTF %d ,%d", fseg, si);
                if (fseg < 0) {
   d6836:	2b00      	cmp	r3, #0
   d6838:	da18      	bge.n	d686c <bbztable_set+0x7c>
                    /* First free slot found */
                    fseg = si;
                    fslot = i;
   d683a:	fa0f f38a 	sxth.w	r3, sl
   d683e:	9301      	str	r3, [sp, #4]
   d6840:	4643      	mov	r3, r8
   d6842:	e013      	b.n	d686c <bbztable_set+0x7c>
                }
            }
            else if (bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
   d6844:	f3c0 000e 	ubfx	r0, r0, #0, #15
   d6848:	9305      	str	r3, [sp, #20]
   d684a:	f7ff fc49 	bl	d60e0 <bbzheap_obj_at>
   d684e:	9004      	str	r0, [sp, #16]
                                bbzheap_obj_at(k)) == 0) {
   d6850:	4638      	mov	r0, r7
   d6852:	f7ff fc45 	bl	d60e0 <bbzheap_obj_at>
                    /* First free slot found */
                    fseg = si;
                    fslot = i;
                }
            }
            else if (bbztype_cmp(bbzheap_obj_at(bbzheap_tseg_elem_get(sd->keys[i])),
   d6856:	9a04      	ldr	r2, [sp, #16]
   d6858:	4601      	mov	r1, r0
   d685a:	4610      	mov	r0, r2
   d685c:	f7ff fb2e 	bl	d5ebc <bbztype_cmp>
   d6860:	9b05      	ldr	r3, [sp, #20]
   d6862:	b918      	cbnz	r0, d686c <bbztable_set+0x7c>
                                bbzheap_obj_at(k)) == 0) {
                /* Key found */
                seg = si;
                slot = i;
   d6864:	fa0f f28a 	sxth.w	r2, sl
   d6868:	9202      	str	r2, [sp, #8]
   d686a:	46c1      	mov	r9, r8
   d686c:	f10a 0a01 	add.w	sl, sl, #1
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
    /* Go through segments */
    while (1) {
        /* Go through valid keys in the segment */
        for (uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
   d6870:	f1ba 0f05 	cmp.w	sl, #5
   d6874:	d1da      	bne.n	d682c <bbztable_set+0x3c>
                seg = si;
                slot = i;
            }
        }
        /* Did we find the key? */
        if (seg >= 0) break;
   d6876:	f1b9 0f00 	cmp.w	r9, #0
   d687a:	da5c      	bge.n	d6936 <bbztable_set+0x146>
        /* Are we done? */
        if (!bbzheap_tseg_hasnext(sd)) break;
   d687c:	f8b4 8014 	ldrh.w	r8, [r4, #20]
   d6880:	f643 71ff 	movw	r1, #16383	; 0x3fff
   d6884:	f3c8 020d 	ubfx	r2, r8, #0, #14
   d6888:	428a      	cmp	r2, r1
   d688a:	d007      	beq.n	d689c <bbztable_set+0xac>
        /* Get next segment */
        si = bbzheap_tseg_next_get(sd);
   d688c:	4690      	mov	r8, r2
        sd = bbzheap_tseg_at(si);
   d688e:	6834      	ldr	r4, [r6, #0]
   d6890:	9a03      	ldr	r2, [sp, #12]
   d6892:	fb08 4412 	mls	r4, r8, r2, r4
   d6896:	f204 4442 	addw	r4, r4, #1090	; 0x442
    /* Free segment and slot */
    int16_t fseg = -1, fslot = -1;
    /* Target segment and slot */
    int16_t seg = -1, slot = -1;
    /* Go through segments */
    while (1) {
   d689a:	e7c5      	b.n	d6828 <bbztable_set+0x38>
                sd->mdata = 0;
            }
        }
    }
    /* Ignore setting nil on new elements */
    else if(!bbztype_isnil(*bbzheap_obj_at(v))) {
   d689c:	4628      	mov	r0, r5
   d689e:	9302      	str	r3, [sp, #8]
   d68a0:	f7ff fc1e 	bl	d60e0 <bbzheap_obj_at>
   d68a4:	7802      	ldrb	r2, [r0, #0]
   d68a6:	9b02      	ldr	r3, [sp, #8]
   d68a8:	f012 0f07 	tst.w	r2, #7
   d68ac:	d041      	beq.n	d6932 <bbztable_set+0x142>
        if(fseg >= 0) {
   d68ae:	2b00      	cmp	r3, #0
   d68b0:	db1a      	blt.n	d68e8 <bbztable_set+0xf8>

            /* 2. We did not find the key, and found an empty slot */
            bbzheap_tseg_elem_set(bbzheap_tseg_at(fseg)->keys[fslot], k);
   d68b2:	2216      	movs	r2, #22
   d68b4:	fb13 f302 	smulbb	r3, r3, r2
   d68b8:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d68bc:	6832      	ldr	r2, [r6, #0]
   d68be:	9901      	ldr	r1, [sp, #4]
   d68c0:	3302      	adds	r3, #2
   d68c2:	441a      	add	r2, r3
   d68c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   d68c8:	ea6f 4747 	mvn.w	r7, r7, lsl #17
   d68cc:	ea6f 4757 	mvn.w	r7, r7, lsr #17
   d68d0:	8317      	strh	r7, [r2, #24]
            bbzheap_tseg_elem_set(bbzheap_tseg_at(fseg)->values[fslot], v);
   d68d2:	6832      	ldr	r2, [r6, #0]
   d68d4:	4413      	add	r3, r2
   d68d6:	9a01      	ldr	r2, [sp, #4]
   d68d8:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d68dc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d68e0:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d68e4:	845d      	strh	r5, [r3, #34]	; 0x22
   d68e6:	e024      	b.n	d6932 <bbztable_set+0x142>
        }
        else {
            /* 3. We did not find the key, nor an empty slot */
            /* Create a new segment */
            uint16_t s;
            if(!bbzheap_tseg_alloc(&s)) return 0;
   d68e8:	f10d 001e 	add.w	r0, sp, #30
   d68ec:	f7ff fc02 	bl	d60f4 <bbzheap_tseg_alloc>
   d68f0:	2800      	cmp	r0, #0
   d68f2:	f000 8092 	beq.w	d6a1a <bbztable_set+0x22a>
            bbzheap_tseg_next_set(sd, s);
   d68f6:	8aa2      	ldrh	r2, [r4, #20]
   d68f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d68fc:	f402 4140 	and.w	r1, r2, #49152	; 0xc000
   d6900:	f3c3 020d 	ubfx	r2, r3, #0, #14
   d6904:	430a      	orrs	r2, r1
   d6906:	82a2      	strh	r2, [r4, #20]
            /* Set key and value */
            bbzheap_tseg_elem_set(bbzheap_tseg_at(s)->keys[0], k);
   d6908:	6832      	ldr	r2, [r6, #0]
   d690a:	2116      	movs	r1, #22
   d690c:	fb01 2313 	mls	r3, r1, r3, r2
   d6910:	ea6f 4747 	mvn.w	r7, r7, lsl #17
   d6914:	ea6f 4757 	mvn.w	r7, r7, lsr #17
   d6918:	f8a3 7442 	strh.w	r7, [r3, #1090]	; 0x442
            bbzheap_tseg_elem_set(bbzheap_tseg_at(s)->values[0], v);
   d691c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6920:	6833      	ldr	r3, [r6, #0]
   d6922:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d6926:	fb01 3312 	mls	r3, r1, r2, r3
   d692a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d692e:	f8a3 544c 	strh.w	r5, [r3, #1100]	; 0x44c
        }
    }
    /* Success */
    return 1;
   d6932:	2001      	movs	r0, #1
   d6934:	e071      	b.n	d6a1a <bbztable_set+0x22a>
        * Also, sd points to the last segment visited, and si is its index.
        */
    if(seg >= 0) {
        /* 1. We found the key, change associated value */
        /* NOTE: Setting a value to nil is equivalent to erasing the element from the table */
        if(!bbztype_isnil(*bbzheap_obj_at(v)))
   d6936:	4628      	mov	r0, r5
   d6938:	f7ff fbd2 	bl	d60e0 <bbzheap_obj_at>
   d693c:	7802      	ldrb	r2, [r0, #0]
   d693e:	9902      	ldr	r1, [sp, #8]
   d6940:	f002 0207 	and.w	r2, r2, #7
   d6944:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   d6948:	2316      	movs	r3, #22
   d694a:	3104      	adds	r1, #4
   d694c:	b17a      	cbz	r2, d696e <bbztable_set+0x17e>
            bbzheap_tseg_elem_set(bbzheap_tseg_at(seg)->values[slot], v);
   d694e:	fb19 f903 	smulbb	r9, r9, r3
   d6952:	f5c9 6985 	rsb	r9, r9, #1064	; 0x428
   d6956:	6833      	ldr	r3, [r6, #0]
   d6958:	f109 0902 	add.w	r9, r9, #2
   d695c:	4499      	add	r9, r3
   d695e:	eb09 0141 	add.w	r1, r9, r1, lsl #1
   d6962:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d6966:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d696a:	834d      	strh	r5, [r1, #26]
   d696c:	e7e1      	b.n	d6932 <bbztable_set+0x142>
        else {
            /* Setting nil, erase element */
            bbzheap_tseg_at(seg)->keys[slot] = 0;
   d696e:	fb19 f903 	smulbb	r9, r9, r3
   d6972:	f5c9 6985 	rsb	r9, r9, #1064	; 0x428
   d6976:	6833      	ldr	r3, [r6, #0]
   d6978:	9d02      	ldr	r5, [sp, #8]
   d697a:	f109 0902 	add.w	r9, r9, #2
   d697e:	444b      	add	r3, r9
   d6980:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   d6984:	761a      	strb	r2, [r3, #24]
   d6986:	765a      	strb	r2, [r3, #25]
            bbzheap_tseg_at(seg)->values[slot] = 0;
   d6988:	6833      	ldr	r3, [r6, #0]
   d698a:	4499      	add	r9, r3
   d698c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
   d6990:	768a      	strb	r2, [r1, #26]
   d6992:	76ca      	strb	r2, [r1, #27]
            /* Is segment empty? */
            for(uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
                if(bbzheap_tseg_elem_isvalid(sd->keys[i])) return 1;
   d6994:	f934 3010 	ldrsh.w	r3, [r4, r0, lsl #1]
   d6998:	2b00      	cmp	r3, #0
   d699a:	dbca      	blt.n	d6932 <bbztable_set+0x142>
   d699c:	3001      	adds	r0, #1
        else {
            /* Setting nil, erase element */
            bbzheap_tseg_at(seg)->keys[slot] = 0;
            bbzheap_tseg_at(seg)->values[slot] = 0;
            /* Is segment empty? */
            for(uint8_t i = 0; i < BBZHEAP_ELEMS_PER_TSEG; ++i) {
   d699e:	2805      	cmp	r0, #5
   d69a0:	d1f8      	bne.n	d6994 <bbztable_set+0x1a4>
                if(bbzheap_tseg_elem_isvalid(sd->keys[i])) return 1;
            }
            /* If we get here, it's because the segment is empty */
            /* Is it the first segment? */
            if(si == bbzheap_obj_at(t)->t.value) {
   d69a2:	4658      	mov	r0, fp
   d69a4:	f7ff fb9c 	bl	d60e0 <bbzheap_obj_at>
   d69a8:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d69ac:	4598      	cmp	r8, r3
   d69ae:	d10f      	bne.n	d69d0 <bbztable_set+0x1e0>
                /* Yes; is it the only segment for this table? */
                if(bbzheap_tseg_hasnext(sd)) {
   d69b0:	8aa3      	ldrh	r3, [r4, #20]
   d69b2:	f643 72ff 	movw	r2, #16383	; 0x3fff
   d69b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d69ba:	4293      	cmp	r3, r2
   d69bc:	d0b9      	beq.n	d6932 <bbztable_set+0x142>
                    /* No, there's more segments */
                    /* Update the table segment index */
                    bbzheap_obj_at(t)->t.value = bbzheap_tseg_next_get(sd);
   d69be:	4658      	mov	r0, fp
   d69c0:	f7ff fb8e 	bl	d60e0 <bbzheap_obj_at>
   d69c4:	8aa3      	ldrh	r3, [r4, #20]
   d69c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d69ca:	f8a0 3001 	strh.w	r3, [r0, #1]
   d69ce:	e020      	b.n	d6a12 <bbztable_set+0x222>
                }
            }
            else {
                /* No, the segment is not the first */
                /* Find the preceding segment */
                uint16_t pi = bbzheap_obj_at(t)->t.value;
   d69d0:	4658      	mov	r0, fp
   d69d2:	f7ff fb85 	bl	d60e0 <bbzheap_obj_at>
                bbzheap_tseg_t* pd = bbzheap_tseg_at(pi);
   d69d6:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d69da:	6835      	ldr	r5, [r6, #0]
   d69dc:	2216      	movs	r2, #22
   d69de:	4353      	muls	r3, r2
   d69e0:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d69e4:	3518      	adds	r5, #24
   d69e6:	3302      	adds	r3, #2
   d69e8:	442b      	add	r3, r5
                while(bbzheap_tseg_next_get(pd) != si) {
                    pi = bbzheap_tseg_next_get(pd);
                    pd = bbzheap_tseg_at(pi);
   d69ea:	4610      	mov	r0, r2
            else {
                /* No, the segment is not the first */
                /* Find the preceding segment */
                uint16_t pi = bbzheap_obj_at(t)->t.value;
                bbzheap_tseg_t* pd = bbzheap_tseg_at(pi);
                while(bbzheap_tseg_next_get(pd) != si) {
   d69ec:	8a99      	ldrh	r1, [r3, #20]
   d69ee:	f3c1 020d 	ubfx	r2, r1, #0, #14
   d69f2:	4590      	cmp	r8, r2
   d69f4:	d006      	beq.n	d6a04 <bbztable_set+0x214>
                    pi = bbzheap_tseg_next_get(pd);
                    pd = bbzheap_tseg_at(pi);
   d69f6:	fb00 f302 	mul.w	r3, r0, r2
   d69fa:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d69fe:	3302      	adds	r3, #2
   d6a00:	442b      	add	r3, r5
            else {
                /* No, the segment is not the first */
                /* Find the preceding segment */
                uint16_t pi = bbzheap_obj_at(t)->t.value;
                bbzheap_tseg_t* pd = bbzheap_tseg_at(pi);
                while(bbzheap_tseg_next_get(pd) != si) {
   d6a02:	e7f3      	b.n	d69ec <bbztable_set+0x1fc>
                    pi = bbzheap_tseg_next_get(pd);
                    pd = bbzheap_tseg_at(pi);
                }
                /* Set the next of the preceding to the next of current */
                bbzheap_tseg_next_set(pd, bbzheap_tseg_next_get(sd));
   d6a04:	8aa2      	ldrh	r2, [r4, #20]
   d6a06:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
   d6a0a:	f3c2 020d 	ubfx	r2, r2, #0, #14
   d6a0e:	4311      	orrs	r1, r2
   d6a10:	8299      	strh	r1, [r3, #20]
                /* Invalidate the current segment */
                sd->mdata = 0;
   d6a12:	2300      	movs	r3, #0
   d6a14:	7523      	strb	r3, [r4, #20]
   d6a16:	7563      	strb	r3, [r4, #21]
   d6a18:	e78b      	b.n	d6932 <bbztable_set+0x142>
            bbzheap_tseg_elem_set(bbzheap_tseg_at(s)->values[0], v);
        }
    }
    /* Success */
    return 1;
}
   d6a1a:	b009      	add	sp, #36	; 0x24
   d6a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a20:	2003e3f4 	.word	0x2003e3f4

000d6a24 <bbzringbuf_construct>:
#include "bbzringbuf.h"

/****************************************/
/****************************************/

void bbzringbuf_construct(bbzringbuf_t *rb, uint8_t *buf, uint8_t elsz, uint8_t cap) { rb->buffer = buf; rb->elsize = elsz; rb->capacity = cap; bbzringbuf_clear(rb); }
   d6a24:	7143      	strb	r3, [r0, #5]
/**
 * @brief Erases all the elements in the ring buffer.
 * @param[in,out] rb The ring buffer.
 */
ALWAYS_INLINE
void bbzringbuf_clear(bbzringbuf_t* rb) { rb->datastart = 0; rb->dataend = 0; }
   d6a26:	2300      	movs	r3, #0
   d6a28:	6001      	str	r1, [r0, #0]
   d6a2a:	7102      	strb	r2, [r0, #4]
   d6a2c:	7183      	strb	r3, [r0, #6]
   d6a2e:	71c3      	strb	r3, [r0, #7]
   d6a30:	4770      	bx	lr

000d6a32 <bbzringbuf_size>:

/****************************************/
/****************************************/

uint8_t bbzringbuf_size(const bbzringbuf_t* rb) {
    return ((rb->dataend >=  rb->datastart) ?
   d6a32:	79c3      	ldrb	r3, [r0, #7]
   d6a34:	7981      	ldrb	r1, [r0, #6]
            (rb->dataend  -  rb->datastart) :
            (rb->capacity - (rb->datastart - rb->dataend/* - (uint8_t)1*/)));
   d6a36:	428b      	cmp	r3, r1
   d6a38:	bf3c      	itt	cc
   d6a3a:	7942      	ldrbcc	r2, [r0, #5]
   d6a3c:	189b      	addcc	r3, r3, r2
   d6a3e:	1a58      	subs	r0, r3, r1
   d6a40:	b2c0      	uxtb	r0, r0
}
   d6a42:	4770      	bx	lr

000d6a44 <bbzringbuf_full>:

/****************************************/
/****************************************/

uint8_t bbzringbuf_full(const bbzringbuf_t* rb) { return (uint8_t) (bbzringbuf_size(rb) + 1 == rb->capacity); }
   d6a44:	b510      	push	{r4, lr}
   d6a46:	4604      	mov	r4, r0
   d6a48:	f7ff fff3 	bl	d6a32 <bbzringbuf_size>
   d6a4c:	7963      	ldrb	r3, [r4, #5]
   d6a4e:	3001      	adds	r0, #1
   d6a50:	1ac3      	subs	r3, r0, r3
   d6a52:	4258      	negs	r0, r3
   d6a54:	4158      	adcs	r0, r3
   d6a56:	bd10      	pop	{r4, pc}

000d6a58 <bbzringbuf_rawat>:

/****************************************/
/****************************************/

uint8_t* bbzringbuf_rawat(const bbzringbuf_t* rb, uint8_t idx) {
    while (idx >= rb->capacity) idx -= rb->capacity;
   d6a58:	7943      	ldrb	r3, [r0, #5]
   d6a5a:	428b      	cmp	r3, r1
   d6a5c:	d802      	bhi.n	d6a64 <bbzringbuf_rawat+0xc>
   d6a5e:	1ac9      	subs	r1, r1, r3
   d6a60:	b2c9      	uxtb	r1, r1
   d6a62:	e7fa      	b.n	d6a5a <bbzringbuf_rawat+0x2>
    return (rb->buffer + (idx) * rb->elsize);
   d6a64:	7902      	ldrb	r2, [r0, #4]
   d6a66:	6800      	ldr	r0, [r0, #0]
}
   d6a68:	fb01 0002 	mla	r0, r1, r2, r0
   d6a6c:	4770      	bx	lr

000d6a6e <bbzringbuf_at>:
/****************************************/
/****************************************/

uint8_t* bbzringbuf_at(const bbzringbuf_t* rb, uint8_t idx) {
    idx += rb->datastart;
    return bbzringbuf_rawat(rb, idx);
   d6a6e:	7983      	ldrb	r3, [r0, #6]
   d6a70:	4419      	add	r1, r3
   d6a72:	b2c9      	uxtb	r1, r1
   d6a74:	f7ff bff0 	b.w	d6a58 <bbzringbuf_rawat>

000d6a78 <bbzringbuf_empty>:
}

/****************************************/
/****************************************/

uint8_t bbzringbuf_empty(bbzringbuf_t *rb) { return (uint8_t)(rb->datastart == rb->dataend); }
   d6a78:	7982      	ldrb	r2, [r0, #6]
   d6a7a:	79c0      	ldrb	r0, [r0, #7]
   d6a7c:	1a13      	subs	r3, r2, r0
   d6a7e:	4258      	negs	r0, r3
   d6a80:	4158      	adcs	r0, r3
   d6a82:	4770      	bx	lr

000d6a84 <bbzringbuf_pop>:
   d6a84:	7983      	ldrb	r3, [r0, #6]

/****************************************/
/****************************************/

uint8_t bbzringbuf_pop(bbzringbuf_t* rb) {
    if (bbzringbuf_empty(rb)) return 0;
   d6a86:	79c2      	ldrb	r2, [r0, #7]
   d6a88:	429a      	cmp	r2, r3
   d6a8a:	d008      	beq.n	d6a9e <bbzringbuf_pop+0x1a>
    ++rb->datastart;
   d6a8c:	3301      	adds	r3, #1
    while (rb->datastart >= rb->capacity) {
   d6a8e:	7942      	ldrb	r2, [r0, #5]
/****************************************/
/****************************************/

uint8_t bbzringbuf_pop(bbzringbuf_t* rb) {
    if (bbzringbuf_empty(rb)) return 0;
    ++rb->datastart;
   d6a90:	7183      	strb	r3, [r0, #6]
    while (rb->datastart >= rb->capacity) {
   d6a92:	7983      	ldrb	r3, [r0, #6]
   d6a94:	4293      	cmp	r3, r2
   d6a96:	d304      	bcc.n	d6aa2 <bbzringbuf_pop+0x1e>
        rb->datastart -= rb->capacity;
   d6a98:	1a9b      	subs	r3, r3, r2
   d6a9a:	7183      	strb	r3, [r0, #6]
/****************************************/

uint8_t bbzringbuf_pop(bbzringbuf_t* rb) {
    if (bbzringbuf_empty(rb)) return 0;
    ++rb->datastart;
    while (rb->datastart >= rb->capacity) {
   d6a9c:	e7f9      	b.n	d6a92 <bbzringbuf_pop+0xe>

/****************************************/
/****************************************/

uint8_t bbzringbuf_pop(bbzringbuf_t* rb) {
    if (bbzringbuf_empty(rb)) return 0;
   d6a9e:	2000      	movs	r0, #0
   d6aa0:	4770      	bx	lr
    ++rb->datastart;
    while (rb->datastart >= rb->capacity) {
        rb->datastart -= rb->capacity;
    }
    return 1;
   d6aa2:	2001      	movs	r0, #1
}
   d6aa4:	4770      	bx	lr

000d6aa6 <bbzringbuf_makeslot>:

/****************************************/
/****************************************/

uint8_t bbzringbuf_makeslot(bbzringbuf_t* rb) {
   d6aa6:	b538      	push	{r3, r4, r5, lr}
   d6aa8:	4604      	mov	r4, r0
    uint8_t slot = rb->dataend;
   d6aaa:	79c5      	ldrb	r5, [r0, #7]
    if(!bbzringbuf_full(rb)) {
   d6aac:	f7ff ffca 	bl	d6a44 <bbzringbuf_full>
   d6ab0:	7962      	ldrb	r2, [r4, #5]
   d6ab2:	b930      	cbnz	r0, d6ac2 <bbzringbuf_makeslot+0x1c>
        ++rb->dataend;
   d6ab4:	1c6b      	adds	r3, r5, #1
   d6ab6:	71e3      	strb	r3, [r4, #7]
        while (rb->dataend >= rb->capacity) {
   d6ab8:	79e3      	ldrb	r3, [r4, #7]
   d6aba:	4293      	cmp	r3, r2
   d6abc:	d30b      	bcc.n	d6ad6 <bbzringbuf_makeslot+0x30>
            rb->dataend -= rb->capacity;
   d6abe:	1a9b      	subs	r3, r3, r2
   d6ac0:	e7f9      	b.n	d6ab6 <bbzringbuf_makeslot+0x10>
        }
    }
    else {
        rb->dataend = rb->datastart++;
   d6ac2:	79a3      	ldrb	r3, [r4, #6]
   d6ac4:	71e3      	strb	r3, [r4, #7]
   d6ac6:	1c59      	adds	r1, r3, #1
   d6ac8:	71a1      	strb	r1, [r4, #6]
        while (rb->datastart >= rb->capacity) {
   d6aca:	79a3      	ldrb	r3, [r4, #6]
   d6acc:	4293      	cmp	r3, r2
   d6ace:	d302      	bcc.n	d6ad6 <bbzringbuf_makeslot+0x30>
            rb->datastart -= rb->capacity;
   d6ad0:	1a9b      	subs	r3, r3, r2
   d6ad2:	71a3      	strb	r3, [r4, #6]
            rb->dataend -= rb->capacity;
        }
    }
    else {
        rb->dataend = rb->datastart++;
        while (rb->datastart >= rb->capacity) {
   d6ad4:	e7f9      	b.n	d6aca <bbzringbuf_makeslot+0x24>
            rb->datastart -= rb->capacity;
        }
    }
    return slot;
}
   d6ad6:	4628      	mov	r0, r5
   d6ad8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6adc <bbzfloat_tofloat>:
    /* We assume float respect the IEEE754 format */
    /* 32bit buffer for the float */
    uint32_t f;
    /* Copy the sign */
    f = bbzfloat_sign(x);
    f <<= 31;
   d6adc:	0bc3      	lsrs	r3, r0, #15
    /* Check the exponent */
    int16_t e = bbzfloat_exp(x);
   d6ade:	f3c0 2245 	ubfx	r2, r0, #9, #6
    /* We assume float respect the IEEE754 format */
    /* 32bit buffer for the float */
    uint32_t f;
    /* Copy the sign */
    f = bbzfloat_sign(x);
    f <<= 31;
   d6ae2:	07db      	lsls	r3, r3, #31
    /* Check the exponent */
    int16_t e = bbzfloat_exp(x);
    if(e == 0) {
   d6ae4:	b94a      	cbnz	r2, d6afa <bbzfloat_tofloat+0x1e>
        if(bbzfloat_frac(x) > 0) {
   d6ae6:	f3c0 0208 	ubfx	r2, r0, #0, #9
   d6aea:	b192      	cbz	r2, d6b12 <bbzfloat_tofloat+0x36>
            /* Denormalized values, set exponent to 96 */
            f |= 0x30000000;
            /* Copy fraction */
            f |= bbzfloat_frac(x) << 14;
   d6aec:	4a0a      	ldr	r2, [pc, #40]	; (d6b18 <bbzfloat_tofloat+0x3c>)
   d6aee:	0380      	lsls	r0, r0, #14
    /* Check the exponent */
    int16_t e = bbzfloat_exp(x);
    if(e == 0) {
        if(bbzfloat_frac(x) > 0) {
            /* Denormalized values, set exponent to 96 */
            f |= 0x30000000;
   d6af0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
            /* Copy fraction */
            f |= bbzfloat_frac(x) << 14;
   d6af4:	4002      	ands	r2, r0
   d6af6:	4313      	orrs	r3, r2
   d6af8:	e00b      	b.n	d6b12 <bbzfloat_tofloat+0x36>
        }
        /* The case bbzfloat_frac(x) == 0 is already taken care of by
        * setting the sign of f above */
    }
    else if(e < 62) {
   d6afa:	2a3d      	cmp	r2, #61	; 0x3d
   d6afc:	bfdf      	itttt	le
   d6afe:	4906      	ldrle	r1, [pc, #24]	; (d6b18 <bbzfloat_tofloat+0x3c>)
   d6b00:	0380      	lslle	r0, r0, #14
   d6b02:	4001      	andle	r1, r0
   d6b04:	430b      	orrle	r3, r1
        /* Normalized values */
        /* Copy exponent */
        f |= ((uint32_t)(e + 96) << 23);
        /* Copy fraction */
        f |= bbzfloat_frac(x) << 14;
   d6b06:	bfda      	itte	le
   d6b08:	3260      	addle	r2, #96	; 0x60
   d6b0a:	ea43 53c2 	orrle.w	r3, r3, r2, lsl #23
    }
    else
        /* Inf and NaN */
        f |= 0x7F800000;
   d6b0e:	f043 43ff 	orrgt.w	r3, r3, #2139095040	; 0x7f800000
    return *(float*)(&f);
   d6b12:	ee00 3a10 	vmov	s0, r3
}
   d6b16:	4770      	bx	lr
   d6b18:	007fc000 	.word	0x007fc000

000d6b1c <bbzmsg_sort_priority>:
}

/****************************************/
/****************************************/

void bbzmsg_sort_priority(bbzringbuf_t* rb) {
   d6b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6b20:	4606      	mov	r6, r0
    // +=-=-=-= QuickSort =-=-=-=+
    for(uint16_t i = 1; i < bbzringbuf_size(rb); ++i) {
   d6b22:	2401      	movs	r4, #1
   d6b24:	4630      	mov	r0, r6
   d6b26:	f7ff ff84 	bl	d6a32 <bbzringbuf_size>
   d6b2a:	b280      	uxth	r0, r0
   d6b2c:	4284      	cmp	r4, r0
   d6b2e:	d228      	bcs.n	d6b82 <bbzmsg_sort_priority+0x66>
   d6b30:	4625      	mov	r5, r4
        uint16_t j = i;
        while(j > 0 && ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j)))->type < ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j-1)))->type) {
   d6b32:	fa5f f885 	uxtb.w	r8, r5
   d6b36:	4641      	mov	r1, r8
   d6b38:	4630      	mov	r0, r6
   d6b3a:	f7ff ff98 	bl	d6a6e <bbzringbuf_at>
   d6b3e:	f108 37ff 	add.w	r7, r8, #4294967295
   d6b42:	b2ff      	uxtb	r7, r7
   d6b44:	f890 9000 	ldrb.w	r9, [r0]
   d6b48:	4639      	mov	r1, r7
   d6b4a:	4630      	mov	r0, r6
   d6b4c:	f7ff ff8f 	bl	d6a6e <bbzringbuf_at>
   d6b50:	7803      	ldrb	r3, [r0, #0]
   d6b52:	454b      	cmp	r3, r9
   d6b54:	d802      	bhi.n	d6b5c <bbzmsg_sort_priority+0x40>
/****************************************/
/****************************************/

void bbzmsg_sort_priority(bbzringbuf_t* rb) {
    // +=-=-=-= QuickSort =-=-=-=+
    for(uint16_t i = 1; i < bbzringbuf_size(rb); ++i) {
   d6b56:	3401      	adds	r4, #1
   d6b58:	b2a4      	uxth	r4, r4
   d6b5a:	e7e3      	b.n	d6b24 <bbzmsg_sort_priority+0x8>
        uint16_t j = i;
        while(j > 0 && ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j)))->type < ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j-1)))->type) {
            bbzutil_swapArrays(bbzringbuf_at(rb, (uint8_t) (j)), bbzringbuf_at(rb, (uint8_t) (j - 1)), sizeof(bbzmsg_t));
   d6b5c:	4641      	mov	r1, r8
   d6b5e:	4630      	mov	r0, r6
   d6b60:	f7ff ff85 	bl	d6a6e <bbzringbuf_at>
   d6b64:	4639      	mov	r1, r7
   d6b66:	4680      	mov	r8, r0
   d6b68:	4630      	mov	r0, r6
   d6b6a:	f7ff ff80 	bl	d6a6e <bbzringbuf_at>
            --j;
   d6b6e:	3d01      	subs	r5, #1
void bbzmsg_sort_priority(bbzringbuf_t* rb) {
    // +=-=-=-= QuickSort =-=-=-=+
    for(uint16_t i = 1; i < bbzringbuf_size(rb); ++i) {
        uint16_t j = i;
        while(j > 0 && ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j)))->type < ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j-1)))->type) {
            bbzutil_swapArrays(bbzringbuf_at(rb, (uint8_t) (j)), bbzringbuf_at(rb, (uint8_t) (j - 1)), sizeof(bbzmsg_t));
   d6b70:	4601      	mov	r1, r0
   d6b72:	220b      	movs	r2, #11
   d6b74:	4640      	mov	r0, r8
            --j;
   d6b76:	b2ad      	uxth	r5, r5
void bbzmsg_sort_priority(bbzringbuf_t* rb) {
    // +=-=-=-= QuickSort =-=-=-=+
    for(uint16_t i = 1; i < bbzringbuf_size(rb); ++i) {
        uint16_t j = i;
        while(j > 0 && ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j)))->type < ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j-1)))->type) {
            bbzutil_swapArrays(bbzringbuf_at(rb, (uint8_t) (j)), bbzringbuf_at(rb, (uint8_t) (j - 1)), sizeof(bbzmsg_t));
   d6b78:	f7ff fdd7 	bl	d672a <_Z18bbzutil_swapArraysPhS_h>

void bbzmsg_sort_priority(bbzringbuf_t* rb) {
    // +=-=-=-= QuickSort =-=-=-=+
    for(uint16_t i = 1; i < bbzringbuf_size(rb); ++i) {
        uint16_t j = i;
        while(j > 0 && ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j)))->type < ((bbzmsg_t*)bbzringbuf_at(rb,(uint8_t)(j-1)))->type) {
   d6b7c:	2d00      	cmp	r5, #0
   d6b7e:	d0ea      	beq.n	d6b56 <bbzmsg_sort_priority+0x3a>
   d6b80:	e7d7      	b.n	d6b32 <bbzmsg_sort_priority+0x16>
   d6b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d6b88 <bbzmsg_process_vstig>:
    // This function uses a circular Lamport model (0 == 255 + 1).
    // A Lamport clock is 'newer' than an old Lamport clock if its value
    // is less than 'LAMPORT_THRESHOLD' ticks ahead of the old clock.
    return (uint8_t)(((lamport - old_lamport) & 0xFF) < BBZLAMPORT_THRESHOLD);/**/
}
void bbzmsg_process_vstig(bbzmsg_t* msg) {
   d6b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    // Search the key in the vstig
    uint8_t inLocalVStig = 0;
    bbzvstig_elem_t* data;
    bbzheap_idx_t o;
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
   d6b8c:	4fd2      	ldr	r7, [pc, #840]	; (d6ed8 <bbzmsg_process_vstig+0x350>)
   d6b8e:	6839      	ldr	r1, [r7, #0]
   d6b90:	f891 6590 	ldrb.w	r6, [r1, #1424]	; 0x590
        data = (vm->vstig.data + i);
   d6b94:	f201 537b 	addw	r3, r1, #1403	; 0x57b
   d6b98:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    // This function uses a circular Lamport model (0 == 255 + 1).
    // A Lamport clock is 'newer' than an old Lamport clock if its value
    // is less than 'LAMPORT_THRESHOLD' ticks ahead of the old clock.
    return (uint8_t)(((lamport - old_lamport) & 0xFF) < BBZLAMPORT_THRESHOLD);/**/
}
void bbzmsg_process_vstig(bbzmsg_t* msg) {
   d6b9c:	4605      	mov	r5, r0
   d6b9e:	441e      	add	r6, r3
    // Search the key in the vstig
    uint8_t inLocalVStig = 0;
    bbzvstig_elem_t* data;
    bbzheap_idx_t o;
    for (uint16_t i = 0; i < vm->vstig.size; ++i) {
   d6ba0:	429e      	cmp	r6, r3
   d6ba2:	f000 819b 	beq.w	d6edc <bbzmsg_process_vstig+0x354>
        data = (vm->vstig.data + i);
   d6ba6:	461c      	mov	r4, r3
        if (msg->vs.key == data->key) {
   d6ba8:	88aa      	ldrh	r2, [r5, #4]
   d6baa:	f833 0b07 	ldrh.w	r0, [r3], #7
   d6bae:	4282      	cmp	r2, r0
   d6bb0:	d1f6      	bne.n	d6ba0 <bbzmsg_process_vstig+0x18>
            inLocalVStig = 1;
            if (bbzlamport_isnewer(msg->vs.lamport, data->timestamp)) {
   d6bb2:	78eb      	ldrb	r3, [r5, #3]
   d6bb4:	7920      	ldrb	r0, [r4, #4]
   d6bb6:	1a1e      	subs	r6, r3, r0
   d6bb8:	b2f6      	uxtb	r6, r6
   d6bba:	2e31      	cmp	r6, #49	; 0x31
   d6bbc:	dc3c      	bgt.n	d6c38 <bbzmsg_process_vstig+0xb0>
                // Update the value
                data->robot = msg->vs.rid;
   d6bbe:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   d6bc2:	f8a4 3005 	strh.w	r3, [r4, #5]
                data->key = msg->vs.key;
   d6bc6:	88ab      	ldrh	r3, [r5, #4]
   d6bc8:	8023      	strh	r3, [r4, #0]
                bbzheap_obj_makeinvalid(*bbzheap_obj_at(data->value));
   d6bca:	8860      	ldrh	r0, [r4, #2]
   d6bcc:	f7ff fa88 	bl	d60e0 <bbzheap_obj_at>
   d6bd0:	7803      	ldrb	r3, [r0, #0]
   d6bd2:	f023 0308 	bic.w	r3, r3, #8
   d6bd6:	7003      	strb	r3, [r0, #0]
                bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o);
   d6bd8:	a903      	add	r1, sp, #12
   d6bda:	2006      	movs	r0, #6
   d6bdc:	f7ff fb02 	bl	d61e4 <bbzheap_obj_alloc>
   d6be0:	2800      	cmp	r0, #0
   d6be2:	f000 8082 	beq.w	d6cea <bbzmsg_process_vstig+0x162>
                *bbzheap_obj_at(o) = msg->vs.data;
   d6be6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6bea:	f7ff fa79 	bl	d60e0 <bbzheap_obj_at>
   d6bee:	462b      	mov	r3, r5
   d6bf0:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d6bf4:	6002      	str	r2, [r0, #0]
   d6bf6:	791b      	ldrb	r3, [r3, #4]
   d6bf8:	7103      	strb	r3, [r0, #4]
                bbzheap_obj_makevalid(*bbzheap_obj_at(o));
   d6bfa:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6bfe:	f7ff fa6f 	bl	d60e0 <bbzheap_obj_at>
   d6c02:	7803      	ldrb	r3, [r0, #0]
   d6c04:	f043 0308 	orr.w	r3, r3, #8
   d6c08:	7003      	strb	r3, [r0, #0]
                bbzheap_obj_unmake_permanent(*bbzheap_obj_at(data->value));
   d6c0a:	8860      	ldrh	r0, [r4, #2]
   d6c0c:	f7ff fa68 	bl	d60e0 <bbzheap_obj_at>
   d6c10:	7803      	ldrb	r3, [r0, #0]
   d6c12:	f023 0310 	bic.w	r3, r3, #16
   d6c16:	7003      	strb	r3, [r0, #0]
                data->value = o;
   d6c18:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6c1c:	8060      	strh	r0, [r4, #2]
                bbzheap_obj_make_permanent(*bbzheap_obj_at(o));
   d6c1e:	f7ff fa5f 	bl	d60e0 <bbzheap_obj_at>
   d6c22:	7803      	ldrb	r3, [r0, #0]
   d6c24:	f043 0310 	orr.w	r3, r3, #16
   d6c28:	7003      	strb	r3, [r0, #0]
                data->timestamp = msg->vs.lamport;
   d6c2a:	78e8      	ldrb	r0, [r5, #3]
   d6c2c:	7120      	strb	r0, [r4, #4]
                // Propagate the value.
                bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT, data->robot,
                                             data->key,
                                             data->value, data->timestamp);
   d6c2e:	8863      	ldrh	r3, [r4, #2]
   d6c30:	8822      	ldrh	r2, [r4, #0]
   d6c32:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   d6c36:	e126      	b.n	d6e86 <bbzmsg_process_vstig+0x2fe>
            } // The following "else if" is only for VSTIG_QUERY mesages.
            else if (msg->type == BBZMSG_VSTIG_QUERY &&
   d6c38:	782e      	ldrb	r6, [r5, #0]
   d6c3a:	2e02      	cmp	r6, #2
   d6c3c:	d104      	bne.n	d6c48 <bbzmsg_process_vstig+0xc0>
   d6c3e:	1ac6      	subs	r6, r0, r3
   d6c40:	b2f6      	uxtb	r6, r6
   d6c42:	2e31      	cmp	r6, #49	; 0x31
   d6c44:	f340 811c 	ble.w	d6e80 <bbzmsg_process_vstig+0x2f8>
                /* Local element is newer */
                /* Append a PUT message to the out message queue */
                bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT, vm->robot, msg->vs.key,
                                             data->value, data->timestamp);
            }
            else if (data->timestamp == msg->vs.lamport &&
   d6c48:	4283      	cmp	r3, r0
   d6c4a:	f040 817f 	bne.w	d6f4c <bbzmsg_process_vstig+0x3c4>
   d6c4e:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   d6c52:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   d6c56:	429a      	cmp	r2, r3
   d6c58:	f000 8178 	beq.w	d6f4c <bbzmsg_process_vstig+0x3c4>
                     data->robot != msg->vs.rid) {
                // Conflict! Call the onconflict callback closure.
                bbzheap_idx_t tmp = vm->nil;
   d6c5c:	f891 2459 	ldrb.w	r2, [r1, #1113]	; 0x459
   d6c60:	f891 3458 	ldrb.w	r3, [r1, #1112]	; 0x458
   d6c64:	ae04      	add	r6, sp, #16
   d6c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6c6a:	f826 3d02 	strh.w	r3, [r6, #-2]!
                // Check if there is a callback closure.
                if (bbztable_get(vm->vstig.hpos, bbzstring_get(__BBZSTRID___INTERNAL_1_DO_NOT_USE__),
   d6c6e:	2028      	movs	r0, #40	; 0x28
   d6c70:	f8b1 8591 	ldrh.w	r8, [r1, #1425]	; 0x591
   d6c74:	f7fd fbde 	bl	d4434 <bbzstring_get>
   d6c78:	4632      	mov	r2, r6
   d6c7a:	4601      	mov	r1, r0
   d6c7c:	4640      	mov	r0, r8
   d6c7e:	f7ff fd69 	bl	d6754 <bbztable_get>
   d6c82:	2800      	cmp	r0, #0
   d6c84:	f000 80b9 	beq.w	d6dfa <bbzmsg_process_vstig+0x272>
                                 &tmp)) {
                    bbzvm_pushnil(); // Push self table
   d6c88:	f7fd fd20 	bl	d46cc <bbzvm_pushnil>
                    bbzvm_push(tmp);
   d6c8c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d6c90:	f7fd fca8 	bl	d45e4 <bbzvm_push>
                    bbzvm_pushs(msg->vs.key);
   d6c94:	88a8      	ldrh	r0, [r5, #4]
   d6c96:	f7fd ff72 	bl	d4b7e <bbzvm_pushs>
                    // push the local data
                    bbzvm_pusht();
   d6c9a:	f7fd fcb7 	bl	d460c <bbzvm_pusht>
                    bbztable_add_data(__BBZSTRID_robot, bbzint_new(data->robot));
   d6c9e:	f9b4 0005 	ldrsh.w	r0, [r4, #5]
   d6ca2:	f7fd fb9d 	bl	d43e0 <bbzint_new>
   d6ca6:	4601      	mov	r1, r0
   d6ca8:	2026      	movs	r0, #38	; 0x26
   d6caa:	f7ff fd2a 	bl	d6702 <_Z17bbztable_add_datatt>
                    bbztable_add_data(__BBZSTRID_data, data->value);
   d6cae:	8861      	ldrh	r1, [r4, #2]
   d6cb0:	201b      	movs	r0, #27
   d6cb2:	f7ff fd26 	bl	d6702 <_Z17bbztable_add_datatt>
                    bbztable_add_data(__BBZSTRID_timestamp, bbzint_new(data->timestamp));
   d6cb6:	7920      	ldrb	r0, [r4, #4]
   d6cb8:	f7fd fb92 	bl	d43e0 <bbzint_new>
   d6cbc:	4601      	mov	r1, r0
   d6cbe:	2027      	movs	r0, #39	; 0x27
   d6cc0:	f7ff fd1f 	bl	d6702 <_Z17bbztable_add_datatt>
                    // push the remote data
                    bbzvm_pusht();
   d6cc4:	f7fd fca2 	bl	d460c <bbzvm_pusht>
                    bbzheap_idx_t rd = bbzvm_stack_at(0);
   d6cc8:	2000      	movs	r0, #0
   d6cca:	f7fd fbed 	bl	d44a8 <bbzvm_stack_at>
   d6cce:	4680      	mov	r8, r0
                    bbztable_add_data(__BBZSTRID_robot, bbzint_new(msg->vs.rid));
   d6cd0:	f9b5 0001 	ldrsh.w	r0, [r5, #1]
   d6cd4:	f7fd fb84 	bl	d43e0 <bbzint_new>
   d6cd8:	4601      	mov	r1, r0
   d6cda:	2026      	movs	r0, #38	; 0x26
   d6cdc:	f7ff fd11 	bl	d6702 <_Z17bbztable_add_datatt>
                    bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o);
   d6ce0:	a903      	add	r1, sp, #12
   d6ce2:	2006      	movs	r0, #6
   d6ce4:	f7ff fa7e 	bl	d61e4 <bbzheap_obj_alloc>
   d6ce8:	b908      	cbnz	r0, d6cee <bbzmsg_process_vstig+0x166>
   d6cea:	200d      	movs	r0, #13
   d6cec:	e02b      	b.n	d6d46 <bbzmsg_process_vstig+0x1be>
                    *bbzheap_obj_at(o) = msg->vs.data;
   d6cee:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6cf2:	f7ff f9f5 	bl	d60e0 <bbzheap_obj_at>
   d6cf6:	462b      	mov	r3, r5
   d6cf8:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d6cfc:	6002      	str	r2, [r0, #0]
   d6cfe:	791b      	ldrb	r3, [r3, #4]
   d6d00:	7103      	strb	r3, [r0, #4]
                    bbzheap_obj_makevalid(*bbzheap_obj_at(o));
   d6d02:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6d06:	f7ff f9eb 	bl	d60e0 <bbzheap_obj_at>
   d6d0a:	7803      	ldrb	r3, [r0, #0]
   d6d0c:	f043 0308 	orr.w	r3, r3, #8
   d6d10:	7003      	strb	r3, [r0, #0]
                    bbztable_add_data(__BBZSTRID_data, o);
   d6d12:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d6d16:	201b      	movs	r0, #27
   d6d18:	f7ff fcf3 	bl	d6702 <_Z17bbztable_add_datatt>
                    bbztable_add_data(__BBZSTRID_timestamp, bbzint_new(msg->vs.lamport));
   d6d1c:	78e8      	ldrb	r0, [r5, #3]
   d6d1e:	f7fd fb5f 	bl	d43e0 <bbzint_new>
   d6d22:	4601      	mov	r1, r0
   d6d24:	2027      	movs	r0, #39	; 0x27
   d6d26:	f7ff fcec 	bl	d6702 <_Z17bbztable_add_datatt>
                    bbzvm_closure_call(3);
   d6d2a:	2003      	movs	r0, #3
   d6d2c:	f7fe fb6c 	bl	d5408 <bbzvm_closure_call>
                    // Update the value with the table returned by the closure.
                    // If error, either no value was returned, or the returned value is of the wrong type.
                    bbzvm_assert_exec(bbztype_istable(*bbzheap_obj_at(bbzvm_stack_at(0))), BBZVM_ERROR_RET);
   d6d30:	2000      	movs	r0, #0
   d6d32:	f7fd fbb9 	bl	d44a8 <bbzvm_stack_at>
   d6d36:	f7ff f9d3 	bl	d60e0 <bbzheap_obj_at>
   d6d3a:	7803      	ldrb	r3, [r0, #0]
   d6d3c:	f003 0307 	and.w	r3, r3, #7
   d6d40:	2b04      	cmp	r3, #4
   d6d42:	d003      	beq.n	d6d4c <bbzmsg_process_vstig+0x1c4>
   d6d44:	2009      	movs	r0, #9
   d6d46:	f7fd fad7 	bl	d42f8 <bbzvm_seterror>
   d6d4a:	e0ff      	b.n	d6f4c <bbzmsg_process_vstig+0x3c4>
                    tmp = 0;
   d6d4c:	2000      	movs	r0, #0
   d6d4e:	f8ad 000e 	strh.w	r0, [sp, #14]
                    bbztable_get(bbzvm_stack_at(0), bbzstring_get(__BBZSTRID_robot), &tmp);
   d6d52:	f7fd fba9 	bl	d44a8 <bbzvm_stack_at>
   d6d56:	4681      	mov	r9, r0
   d6d58:	2026      	movs	r0, #38	; 0x26
   d6d5a:	f7fd fb6b 	bl	d4434 <bbzstring_get>
   d6d5e:	4632      	mov	r2, r6
   d6d60:	4601      	mov	r1, r0
   d6d62:	4648      	mov	r0, r9
   d6d64:	f7ff fcf6 	bl	d6754 <bbztable_get>
                    bbzrobot_id_t oldRID = data->robot;
                    data->robot = tmp ?
                                  (bbzrobot_id_t) bbzheap_obj_at(tmp)->i.value :
                                  data->robot;
   d6d68:	f8bd 000e 	ldrh.w	r0, [sp, #14]
                    // Update the value with the table returned by the closure.
                    // If error, either no value was returned, or the returned value is of the wrong type.
                    bbzvm_assert_exec(bbztype_istable(*bbzheap_obj_at(bbzvm_stack_at(0))), BBZVM_ERROR_RET);
                    tmp = 0;
                    bbztable_get(bbzvm_stack_at(0), bbzstring_get(__BBZSTRID_robot), &tmp);
                    bbzrobot_id_t oldRID = data->robot;
   d6d6c:	f8b4 9005 	ldrh.w	r9, [r4, #5]
                    data->robot = tmp ?
                                  (bbzrobot_id_t) bbzheap_obj_at(tmp)->i.value :
                                  data->robot;
   d6d70:	b120      	cbz	r0, d6d7c <bbzmsg_process_vstig+0x1f4>
                    bbzvm_assert_exec(bbztype_istable(*bbzheap_obj_at(bbzvm_stack_at(0))), BBZVM_ERROR_RET);
                    tmp = 0;
                    bbztable_get(bbzvm_stack_at(0), bbzstring_get(__BBZSTRID_robot), &tmp);
                    bbzrobot_id_t oldRID = data->robot;
                    data->robot = tmp ?
                                  (bbzrobot_id_t) bbzheap_obj_at(tmp)->i.value :
   d6d72:	f7ff f9b5 	bl	d60e0 <bbzheap_obj_at>
                                  data->robot;
   d6d76:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d6d7a:	e000      	b.n	d6d7e <bbzmsg_process_vstig+0x1f6>
   d6d7c:	464b      	mov	r3, r9
                    tmp = vm->nil;
   d6d7e:	683a      	ldr	r2, [r7, #0]
                    tmp = 0;
                    bbztable_get(bbzvm_stack_at(0), bbzstring_get(__BBZSTRID_robot), &tmp);
                    bbzrobot_id_t oldRID = data->robot;
                    data->robot = tmp ?
                                  (bbzrobot_id_t) bbzheap_obj_at(tmp)->i.value :
                                  data->robot;
   d6d80:	f8a4 3005 	strh.w	r3, [r4, #5]
                    tmp = vm->nil;
   d6d84:	f892 3458 	ldrb.w	r3, [r2, #1112]	; 0x458
   d6d88:	f892 2459 	ldrb.w	r2, [r2, #1113]	; 0x459
   d6d8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6d90:	f8ad 300e 	strh.w	r3, [sp, #14]
                    bbzheap_obj_makeinvalid(*bbzheap_obj_at(data->value));
   d6d94:	8860      	ldrh	r0, [r4, #2]
   d6d96:	f7ff f9a3 	bl	d60e0 <bbzheap_obj_at>
   d6d9a:	7803      	ldrb	r3, [r0, #0]
   d6d9c:	f023 0308 	bic.w	r3, r3, #8
   d6da0:	7003      	strb	r3, [r0, #0]
                    bbzheap_obj_unmake_permanent(*bbzheap_obj_at(data->value));
   d6da2:	8860      	ldrh	r0, [r4, #2]
   d6da4:	f7ff f99c 	bl	d60e0 <bbzheap_obj_at>
   d6da8:	7803      	ldrb	r3, [r0, #0]
   d6daa:	f023 0310 	bic.w	r3, r3, #16
   d6dae:	7003      	strb	r3, [r0, #0]
                    bbztable_get(bbzvm_stack_at(0), bbzstring_get(__BBZSTRID_data), &tmp);
   d6db0:	2000      	movs	r0, #0
   d6db2:	f7fd fb79 	bl	d44a8 <bbzvm_stack_at>
   d6db6:	4682      	mov	sl, r0
   d6db8:	201b      	movs	r0, #27
   d6dba:	f7fd fb3b 	bl	d4434 <bbzstring_get>
   d6dbe:	4632      	mov	r2, r6
   d6dc0:	4601      	mov	r1, r0
   d6dc2:	4650      	mov	r0, sl
   d6dc4:	f7ff fcc6 	bl	d6754 <bbztable_get>
                    data->value = tmp;
   d6dc8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d6dcc:	8060      	strh	r0, [r4, #2]
                    bbzheap_obj_make_permanent(*bbzheap_obj_at(tmp));
   d6dce:	f7ff f987 	bl	d60e0 <bbzheap_obj_at>
   d6dd2:	7803      	ldrb	r3, [r0, #0]
   d6dd4:	f043 0310 	orr.w	r3, r3, #16
   d6dd8:	7003      	strb	r3, [r0, #0]
                    data->timestamp = msg->vs.lamport;
   d6dda:	78eb      	ldrb	r3, [r5, #3]
   d6ddc:	7123      	strb	r3, [r4, #4]
                    // If this is the robot that lost, call the onconflictlost callback closure.
                    if ((bbzrobot_id_t) bbzheap_obj_at(tmp)->i.value != vm->robot &&
   d6dde:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d6de2:	f7ff f97d 	bl	d60e0 <bbzheap_obj_at>
   d6de6:	683b      	ldr	r3, [r7, #0]
   d6de8:	f8b0 1001 	ldrh.w	r1, [r0, #1]
   d6dec:	f8b3 2596 	ldrh.w	r2, [r3, #1430]	; 0x596
   d6df0:	4291      	cmp	r1, r2
   d6df2:	d03f      	beq.n	d6e74 <bbzmsg_process_vstig+0x2ec>
   d6df4:	4591      	cmp	r9, r2
   d6df6:	d13d      	bne.n	d6e74 <bbzmsg_process_vstig+0x2ec>
   d6df8:	e04a      	b.n	d6e90 <bbzmsg_process_vstig+0x308>
                                                 data->key,
                                                 data->value, data->timestamp);
                }
                else {
                    // No conflict manager, use default behavior.
                    if (msg->vs.rid >= data->robot) {
   d6dfa:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   d6dfe:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   d6e02:	b29a      	uxth	r2, r3
   d6e04:	4291      	cmp	r1, r2
   d6e06:	d835      	bhi.n	d6e74 <bbzmsg_process_vstig+0x2ec>
                        data->robot = msg->vs.rid;
   d6e08:	f8a4 3005 	strh.w	r3, [r4, #5]
                        data->key = msg->vs.key;
   d6e0c:	88ab      	ldrh	r3, [r5, #4]
   d6e0e:	8023      	strh	r3, [r4, #0]
                        bbzheap_obj_makeinvalid(*bbzheap_obj_at(data->value));
   d6e10:	8860      	ldrh	r0, [r4, #2]
   d6e12:	f7ff f965 	bl	d60e0 <bbzheap_obj_at>
   d6e16:	7803      	ldrb	r3, [r0, #0]
   d6e18:	f023 0308 	bic.w	r3, r3, #8
   d6e1c:	7003      	strb	r3, [r0, #0]
                        bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o);
   d6e1e:	a903      	add	r1, sp, #12
   d6e20:	2006      	movs	r0, #6
   d6e22:	f7ff f9df 	bl	d61e4 <bbzheap_obj_alloc>
   d6e26:	2800      	cmp	r0, #0
   d6e28:	f43f af5f 	beq.w	d6cea <bbzmsg_process_vstig+0x162>
                        *bbzheap_obj_at(o) = msg->vs.data;
   d6e2c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6e30:	f7ff f956 	bl	d60e0 <bbzheap_obj_at>
   d6e34:	462b      	mov	r3, r5
   d6e36:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d6e3a:	6002      	str	r2, [r0, #0]
   d6e3c:	791b      	ldrb	r3, [r3, #4]
   d6e3e:	7103      	strb	r3, [r0, #4]
                        bbzheap_obj_makevalid(*bbzheap_obj_at(o));
   d6e40:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6e44:	f7ff f94c 	bl	d60e0 <bbzheap_obj_at>
   d6e48:	7803      	ldrb	r3, [r0, #0]
   d6e4a:	f043 0308 	orr.w	r3, r3, #8
   d6e4e:	7003      	strb	r3, [r0, #0]
                        bbzheap_obj_unmake_permanent(*bbzheap_obj_at(data->value));
   d6e50:	8860      	ldrh	r0, [r4, #2]
   d6e52:	f7ff f945 	bl	d60e0 <bbzheap_obj_at>
   d6e56:	7803      	ldrb	r3, [r0, #0]
   d6e58:	f023 0310 	bic.w	r3, r3, #16
   d6e5c:	7003      	strb	r3, [r0, #0]
                        data->value = o;
   d6e5e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6e62:	8060      	strh	r0, [r4, #2]
                        bbzheap_obj_make_permanent(*bbzheap_obj_at(o));
   d6e64:	f7ff f93c 	bl	d60e0 <bbzheap_obj_at>
   d6e68:	7803      	ldrb	r3, [r0, #0]
   d6e6a:	f043 0310 	orr.w	r3, r3, #16
   d6e6e:	7003      	strb	r3, [r0, #0]
                        data->timestamp = msg->vs.lamport;
   d6e70:	78eb      	ldrb	r3, [r5, #3]
   d6e72:	7123      	strb	r3, [r4, #4]
                    }
                    // Propagate the winning value.
                    bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT, data->robot,
                                                 data->key,
                                                 data->value, data->timestamp);
   d6e74:	8863      	ldrh	r3, [r4, #2]
   d6e76:	8822      	ldrh	r2, [r4, #0]
   d6e78:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   d6e7c:	7920      	ldrb	r0, [r4, #4]
   d6e7e:	e002      	b.n	d6e86 <bbzmsg_process_vstig+0x2fe>
            else if (msg->type == BBZMSG_VSTIG_QUERY &&
                     bbzlamport_isnewer(data->timestamp, msg->vs.lamport)) {
                /* Local element is newer */
                /* Append a PUT message to the out message queue */
                bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT, vm->robot, msg->vs.key,
                                             data->value, data->timestamp);
   d6e80:	8863      	ldrh	r3, [r4, #2]
   d6e82:	f8b1 1596 	ldrh.w	r1, [r1, #1430]	; 0x596
   d6e86:	9000      	str	r0, [sp, #0]
   d6e88:	2001      	movs	r0, #1
   d6e8a:	f7ff f86d 	bl	d5f68 <bbzoutmsg_queue_append_vstig>
   d6e8e:	e05d      	b.n	d6f4c <bbzmsg_process_vstig+0x3c4>
                    data->timestamp = msg->vs.lamport;
                    // If this is the robot that lost, call the onconflictlost callback closure.
                    if ((bbzrobot_id_t) bbzheap_obj_at(tmp)->i.value != vm->robot &&
                        oldRID == vm->robot) {
                        // Check if there is an onconflictlost callback closure.
                        tmp = vm->nil;
   d6e90:	f893 1459 	ldrb.w	r1, [r3, #1113]	; 0x459
   d6e94:	f893 2458 	ldrb.w	r2, [r3, #1112]	; 0x458
   d6e98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   d6e9c:	f8ad 200e 	strh.w	r2, [sp, #14]
                        if (bbztable_get(vm->vstig.hpos,
   d6ea0:	2029      	movs	r0, #41	; 0x29
   d6ea2:	f8b3 7591 	ldrh.w	r7, [r3, #1425]	; 0x591
   d6ea6:	f7fd fac5 	bl	d4434 <bbzstring_get>
   d6eaa:	4632      	mov	r2, r6
   d6eac:	4601      	mov	r1, r0
   d6eae:	4638      	mov	r0, r7
   d6eb0:	f7ff fc50 	bl	d6754 <bbztable_get>
   d6eb4:	2800      	cmp	r0, #0
   d6eb6:	d0dd      	beq.n	d6e74 <bbzmsg_process_vstig+0x2ec>
                                         bbzstring_get(__BBZSTRID___INTERNAL_2_DO_NOT_USE__), &tmp)) {
                            bbzvm_pushnil(); // Push self table
   d6eb8:	f7fd fc08 	bl	d46cc <bbzvm_pushnil>
                            bbzvm_push(tmp);
   d6ebc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   d6ec0:	f7fd fb90 	bl	d45e4 <bbzvm_push>
                            bbzvm_pushs(msg->vs.key);
   d6ec4:	88a8      	ldrh	r0, [r5, #4]
   d6ec6:	f7fd fe5a 	bl	d4b7e <bbzvm_pushs>
                            bbzvm_push(rd);
   d6eca:	4640      	mov	r0, r8
   d6ecc:	f7fd fb8a 	bl	d45e4 <bbzvm_push>
                            bbzvm_closure_call(2);
   d6ed0:	2002      	movs	r0, #2
   d6ed2:	f7fe fa99 	bl	d5408 <bbzvm_closure_call>
   d6ed6:	e7cd      	b.n	d6e74 <bbzmsg_process_vstig+0x2ec>
   d6ed8:	2003e3f4 	.word	0x2003e3f4
            break;
        }
    }
    if (!inLocalVStig) {
        data = vm->vstig.data + vm->vstig.size;
        data->robot = msg->vs.rid;
   d6edc:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   d6ee0:	f8a6 3005 	strh.w	r3, [r6, #5]
        data->key = msg->vs.key;
   d6ee4:	88ab      	ldrh	r3, [r5, #4]
   d6ee6:	8033      	strh	r3, [r6, #0]
        bbzvm_assert_mem_alloc(BBZTYPE_USERDATA, &o);
   d6ee8:	a903      	add	r1, sp, #12
   d6eea:	2006      	movs	r0, #6
   d6eec:	f7ff f97a 	bl	d61e4 <bbzheap_obj_alloc>
   d6ef0:	2800      	cmp	r0, #0
   d6ef2:	f43f aefa 	beq.w	d6cea <bbzmsg_process_vstig+0x162>
        *bbzheap_obj_at(o) = msg->vs.data;
   d6ef6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6efa:	f7ff f8f1 	bl	d60e0 <bbzheap_obj_at>
   d6efe:	462b      	mov	r3, r5
   d6f00:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d6f04:	6002      	str	r2, [r0, #0]
   d6f06:	791b      	ldrb	r3, [r3, #4]
   d6f08:	7103      	strb	r3, [r0, #4]
        bbzheap_obj_makevalid(*bbzheap_obj_at(o));
   d6f0a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6f0e:	f7ff f8e7 	bl	d60e0 <bbzheap_obj_at>
   d6f12:	7803      	ldrb	r3, [r0, #0]
   d6f14:	f043 0308 	orr.w	r3, r3, #8
   d6f18:	7003      	strb	r3, [r0, #0]
        data->value = o;
   d6f1a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   d6f1e:	8070      	strh	r0, [r6, #2]
        bbzheap_obj_make_permanent(*bbzheap_obj_at(o));
   d6f20:	f7ff f8de 	bl	d60e0 <bbzheap_obj_at>
   d6f24:	7803      	ldrb	r3, [r0, #0]
   d6f26:	f043 0310 	orr.w	r3, r3, #16
   d6f2a:	7003      	strb	r3, [r0, #0]
        data->timestamp = msg->vs.lamport;
   d6f2c:	78e8      	ldrb	r0, [r5, #3]
   d6f2e:	7130      	strb	r0, [r6, #4]
        bbzoutmsg_queue_append_vstig(BBZMSG_VSTIG_PUT,
                                     data->robot,
                                     data->key,
                                     data->value,
                                     data->timestamp);
   d6f30:	8873      	ldrh	r3, [r6, #2]
   d6f32:	8832      	ldrh	r2, [r6, #0]
   d6f34:	f8b6 1005 	ldrh.w	r1, [r6, #5]
   d6f38:	9000      	str	r0, [sp, #0]
   d6f3a:	2001      	movs	r0, #1
   d6f3c:	f7ff f814 	bl	d5f68 <bbzoutmsg_queue_append_vstig>
        ++vm->vstig.size;
   d6f40:	683a      	ldr	r2, [r7, #0]
   d6f42:	f892 3590 	ldrb.w	r3, [r2, #1424]	; 0x590
   d6f46:	3301      	adds	r3, #1
   d6f48:	f882 3590 	strb.w	r3, [r2, #1424]	; 0x590
    }
}
   d6f4c:	b004      	add	sp, #16
   d6f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f52:	bf00      	nop

000d6f54 <bbzmsg_process_swarm>:

/****************************************/
/****************************************/

#ifndef BBZ_DISABLE_SWARMS
void bbzmsg_process_swarm(bbzmsg_t* msg) {
   d6f54:	4770      	bx	lr

000d6f56 <bbzdarray_new>:
#include "bbzdarray.h"

/****************************************/
/****************************************/

uint8_t bbzdarray_new(bbzheap_idx_t* d) {
   d6f56:	b510      	push	{r4, lr}
    /* Allocation of a new array */
    if (!bbzheap_obj_alloc(BBZTYPE_TABLE, d)) return 0;
   d6f58:	4601      	mov	r1, r0
#include "bbzdarray.h"

/****************************************/
/****************************************/

uint8_t bbzdarray_new(bbzheap_idx_t* d) {
   d6f5a:	4604      	mov	r4, r0
    /* Allocation of a new array */
    if (!bbzheap_obj_alloc(BBZTYPE_TABLE, d)) return 0;
   d6f5c:	2004      	movs	r0, #4
   d6f5e:	f7ff f941 	bl	d61e4 <bbzheap_obj_alloc>
   d6f62:	b170      	cbz	r0, d6f82 <bbzdarray_new+0x2c>
    /* Set the bit that tells it's a dynamic array */
    bbzheap_obj_at(*d)->t.mdata |= BBZTABLE_DARRAY_MASK;
   d6f64:	8820      	ldrh	r0, [r4, #0]
   d6f66:	f7ff f8bb 	bl	d60e0 <bbzheap_obj_at>
   d6f6a:	7803      	ldrb	r3, [r0, #0]
   d6f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d6f70:	7003      	strb	r3, [r0, #0]
    bbzheap_obj_at(*d)->t.mdata &= ~BBZTABLE_DARRAY_HAS_SELF_MASK;
   d6f72:	8820      	ldrh	r0, [r4, #0]
   d6f74:	f7ff f8b4 	bl	d60e0 <bbzheap_obj_at>
   d6f78:	7803      	ldrb	r3, [r0, #0]
   d6f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d6f7e:	7003      	strb	r3, [r0, #0]
   d6f80:	2001      	movs	r0, #1
    return 1;
}
   d6f82:	bd10      	pop	{r4, pc}

000d6f84 <bbzdarray_destroy>:

/****************************************/
/****************************************/

void bbzdarray_destroy(bbzheap_idx_t d) {
   d6f84:	b570      	push	{r4, r5, r6, lr}
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
   d6f86:	f7ff f8ab 	bl	d60e0 <bbzheap_obj_at>
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
   d6f8a:	4b10      	ldr	r3, [pc, #64]	; (d6fcc <bbzdarray_destroy+0x48>)
   d6f8c:	681a      	ldr	r2, [r3, #0]
   d6f8e:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d6f92:	2116      	movs	r1, #22
   d6f94:	434b      	muls	r3, r1
   d6f96:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d6f9a:	3218      	adds	r2, #24
   d6f9c:	3302      	adds	r3, #2
   d6f9e:	4413      	add	r3, r2
    while (1) {
        bbzheap_tseg_makeinvalid(*sd);
        if (!bbzheap_aseg_hasnext(sd)) break;
   d6fa0:	f643 75ff 	movw	r5, #16383	; 0x3fff
void bbzdarray_destroy(bbzheap_idx_t d) {
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
    while (1) {
        bbzheap_tseg_makeinvalid(*sd);
   d6fa4:	8a9c      	ldrh	r4, [r3, #20]
   d6fa6:	f3c4 060e 	ubfx	r6, r4, #0, #15
   d6faa:	829e      	strh	r6, [r3, #20]
   d6fac:	f3c4 030d 	ubfx	r3, r4, #0, #14
        if (!bbzheap_aseg_hasnext(sd)) break;
   d6fb0:	42ab      	cmp	r3, r5
   d6fb2:	d005      	beq.n	d6fc0 <bbzdarray_destroy+0x3c>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d6fb4:	434b      	muls	r3, r1
   d6fb6:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d6fba:	3302      	adds	r3, #2
   d6fbc:	4413      	add	r3, r2

void bbzdarray_destroy(bbzheap_idx_t d) {
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
    while (1) {
   d6fbe:	e7f1      	b.n	d6fa4 <bbzdarray_destroy+0x20>
        bbzheap_tseg_makeinvalid(*sd);
        if (!bbzheap_aseg_hasnext(sd)) break;
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    bbzheap_obj_makeinvalid(*((bbzobj_t*)da));
   d6fc0:	7803      	ldrb	r3, [r0, #0]
   d6fc2:	f023 0308 	bic.w	r3, r3, #8
   d6fc6:	7003      	strb	r3, [r0, #0]
   d6fc8:	bd70      	pop	{r4, r5, r6, pc}
   d6fca:	bf00      	nop
   d6fcc:	2003e3f4 	.word	0x2003e3f4

000d6fd0 <bbzdarray_get>:
/****************************************/
/****************************************/

uint8_t bbzdarray_get(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t* v) {
   d6fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fd2:	4607      	mov	r7, r0
   d6fd4:	460c      	mov	r4, r1
   d6fd6:	4615      	mov	r5, r2
    if (!bbztype_isdarray(*bbzheap_obj_at(d))) return 0;
   d6fd8:	f7ff f882 	bl	d60e0 <bbzheap_obj_at>
   d6fdc:	7803      	ldrb	r3, [r0, #0]
   d6fde:	f003 0307 	and.w	r3, r3, #7
   d6fe2:	2b04      	cmp	r3, #4
   d6fe4:	d119      	bne.n	d701a <bbzdarray_get+0x4a>
   d6fe6:	4638      	mov	r0, r7
   d6fe8:	f7ff f87a 	bl	d60e0 <bbzheap_obj_at>
   d6fec:	7803      	ldrb	r3, [r0, #0]
   d6fee:	0659      	lsls	r1, r3, #25
   d6ff0:	d513      	bpl.n	d701a <bbzdarray_get+0x4a>
   d6ff2:	e014      	b.n	d701e <bbzdarray_get+0x4e>
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
   d6ff4:	8a9a      	ldrh	r2, [r3, #20]
   d6ff6:	f3c2 020d 	ubfx	r2, r2, #0, #14
   d6ffa:	4562      	cmp	r2, ip
   d6ffc:	f107 0701 	add.w	r7, r7, #1
   d7000:	d009      	beq.n	d7016 <bbzdarray_get+0x46>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d7002:	fb00 f302 	mul.w	r3, r0, r2
   d7006:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d700a:	3302      	adds	r3, #2
   d700c:	440b      	add	r3, r1
   d700e:	fa1f fe87 	uxth.w	lr, r7
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
   d7012:	4576      	cmp	r6, lr
   d7014:	d8ee      	bhi.n	d6ff4 <bbzdarray_get+0x24>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    if (idx == qot &&
   d7016:	4576      	cmp	r6, lr
   d7018:	d017      	beq.n	d704a <bbzdarray_get+0x7a>
/****************************************/

uint8_t bbzdarray_get(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t* v) {
    if (!bbztype_isdarray(*bbzheap_obj_at(d))) return 0;
   d701a:	2000      	movs	r0, #0
   d701c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d701e:	4638      	mov	r0, r7
   d7020:	f7ff f85e 	bl	d60e0 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d7024:	4b11      	ldr	r3, [pc, #68]	; (d706c <bbzdarray_get+0x9c>)
   d7026:	6819      	ldr	r1, [r3, #0]
   d7028:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d702c:	2216      	movs	r2, #22
   d702e:	4353      	muls	r3, r2
   d7030:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d7034:	3118      	adds	r1, #24
   d7036:	3302      	adds	r3, #2

uint8_t bbzdarray_get(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t* v) {
    if (!bbztype_isdarray(*bbzheap_obj_at(d))) return 0;
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
   d7038:	260a      	movs	r6, #10
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d703a:	440b      	add	r3, r1

uint8_t bbzdarray_get(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t* v) {
    if (!bbztype_isdarray(*bbzheap_obj_at(d))) return 0;
    const uint16_t qot = idx / ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG)),
   d703c:	fbb4 f6f6 	udiv	r6, r4, r6
            rem = idx % ((uint16_t)(BBZHEAP_ELEMS_PER_ASEG));
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d7040:	2700      	movs	r7, #0
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
   d7042:	f643 7cff 	movw	ip, #16383	; 0x3fff
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d7046:	4610      	mov	r0, r2
   d7048:	e7e1      	b.n	d700e <bbzdarray_get+0x3e>
    }
    if (idx == qot &&
        bbzheap_aseg_elem_isvalid(sd->values[rem])) {
   d704a:	210a      	movs	r1, #10
   d704c:	fbb4 f2f1 	udiv	r2, r4, r1
   d7050:	fb01 4412 	mls	r4, r1, r2, r4
   d7054:	b2a4      	uxth	r4, r4
   d7056:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
   d705a:	b293      	uxth	r3, r2
    /* Loop to fetch the last segment */
    for (idx = 0; idx < qot && bbzheap_aseg_hasnext(sd); ++idx) {
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    if (idx == qot &&
   d705c:	0412      	lsls	r2, r2, #16
   d705e:	d5dc      	bpl.n	d701a <bbzdarray_get+0x4a>
        bbzheap_aseg_elem_isvalid(sd->values[rem])) {
        *v = bbzheap_aseg_elem_get(sd->values[rem]);
   d7060:	f3c3 030e 	ubfx	r3, r3, #0, #15
   d7064:	802b      	strh	r3, [r5, #0]
        return 1;
   d7066:	2001      	movs	r0, #1
   d7068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d706a:	bf00      	nop
   d706c:	2003e3f4 	.word	0x2003e3f4

000d7070 <bbzdarray_set>:
/****************************************/
/****************************************/

uint8_t bbzdarray_set(bbzheap_idx_t d,
                      uint16_t idx,
                      bbzheap_idx_t v) {
   d7070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7072:	460d      	mov	r5, r1
   d7074:	4614      	mov	r4, r2
    uint16_t qot = idx / (uint16_t)(BBZHEAP_ELEMS_PER_ASEG),
   d7076:	260a      	movs	r6, #10
   d7078:	fbb1 f6f6 	udiv	r6, r1, r6
            rem = idx % (uint16_t)(BBZHEAP_ELEMS_PER_ASEG);
    uint16_t i = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d707c:	f7ff f830 	bl	d60e0 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d7080:	4b1a      	ldr	r3, [pc, #104]	; (d70ec <bbzdarray_set+0x7c>)
   d7082:	681a      	ldr	r2, [r3, #0]
   d7084:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d7088:	2116      	movs	r1, #22
   d708a:	434b      	muls	r3, r1
   d708c:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d7090:	3218      	adds	r2, #24
   d7092:	3302      	adds	r3, #2
   d7094:	4413      	add	r3, r2
   d7096:	2700      	movs	r7, #0
    /* Loop to fetch the last segment */
    for (i = 0; i < qot && bbzheap_aseg_hasnext(sd); ++i) {
   d7098:	f643 7cff 	movw	ip, #16383	; 0x3fff
   d709c:	fa1f fe87 	uxth.w	lr, r7
   d70a0:	45b6      	cmp	lr, r6
   d70a2:	d20d      	bcs.n	d70c0 <bbzdarray_set+0x50>
   d70a4:	8a98      	ldrh	r0, [r3, #20]
   d70a6:	f3c0 000d 	ubfx	r0, r0, #0, #14
   d70aa:	4560      	cmp	r0, ip
   d70ac:	f107 0701 	add.w	r7, r7, #1
   d70b0:	d006      	beq.n	d70c0 <bbzdarray_set+0x50>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d70b2:	fb01 f300 	mul.w	r3, r1, r0
   d70b6:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d70ba:	3302      	adds	r3, #2
   d70bc:	4413      	add	r3, r2
            rem = idx % (uint16_t)(BBZHEAP_ELEMS_PER_ASEG);
    uint16_t i = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    for (i = 0; i < qot && bbzheap_aseg_hasnext(sd); ++i) {
   d70be:	e7ed      	b.n	d709c <bbzdarray_set+0x2c>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    if (i == qot &&
   d70c0:	45b6      	cmp	lr, r6
   d70c2:	d111      	bne.n	d70e8 <bbzdarray_set+0x78>
   d70c4:	210a      	movs	r1, #10
   d70c6:	fbb5 f2f1 	udiv	r2, r5, r1
   d70ca:	fb01 5112 	mls	r1, r1, r2, r5
   d70ce:	b289      	uxth	r1, r1
   d70d0:	f933 2011 	ldrsh.w	r2, [r3, r1, lsl #1]
   d70d4:	2a00      	cmp	r2, #0
   d70d6:	da07      	bge.n	d70e8 <bbzdarray_set+0x78>
        bbzheap_aseg_elem_isvalid(sd->values[rem])) {
        bbzheap_aseg_elem_set(sd->values[rem], v);
   d70d8:	ea6f 4444 	mvn.w	r4, r4, lsl #17
   d70dc:	ea6f 4454 	mvn.w	r4, r4, lsr #17
   d70e0:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
        return 1;
   d70e4:	2001      	movs	r0, #1
   d70e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    return 0;
   d70e8:	2000      	movs	r0, #0
}
   d70ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d70ec:	2003e3f4 	.word	0x2003e3f4

000d70f0 <bbzdarray_push>:

/****************************************/
/****************************************/

uint8_t bbzdarray_push(bbzheap_idx_t d,
                       bbzheap_idx_t v) {
   d70f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d70f2:	460d      	mov	r5, r1
    /* Initialisation for the loop */
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d70f4:	f7fe fff4 	bl	d60e0 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d70f8:	4e21      	ldr	r6, [pc, #132]	; (d7180 <bbzdarray_push+0x90>)
   d70fa:	f8b0 4001 	ldrh.w	r4, [r0, #1]
   d70fe:	6832      	ldr	r2, [r6, #0]
   d7100:	2316      	movs	r3, #22
   d7102:	435c      	muls	r4, r3
   d7104:	f5c4 6485 	rsb	r4, r4, #1064	; 0x428
   d7108:	3218      	adds	r2, #24
   d710a:	3402      	adds	r4, #2
   d710c:	4414      	add	r4, r2
    /* Loop to fetch the last segment */
    while (bbzheap_aseg_hasnext(sd)) {
   d710e:	f643 70ff 	movw	r0, #16383	; 0x3fff
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d7112:	4619      	mov	r1, r3
                       bbzheap_idx_t v) {
    /* Initialisation for the loop */
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    while (bbzheap_aseg_hasnext(sd)) {
   d7114:	8aa3      	ldrh	r3, [r4, #20]
   d7116:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d711a:	4283      	cmp	r3, r0
   d711c:	d006      	beq.n	d712c <bbzdarray_push+0x3c>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d711e:	fb01 f403 	mul.w	r4, r1, r3
   d7122:	f5c4 6485 	rsb	r4, r4, #1064	; 0x428
   d7126:	3402      	adds	r4, #2
   d7128:	4414      	add	r4, r2
                       bbzheap_idx_t v) {
    /* Initialisation for the loop */
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    /* Loop to fetch the last segment */
    while (bbzheap_aseg_hasnext(sd)) {
   d712a:	e7f3      	b.n	d7114 <bbzdarray_push+0x24>
   d712c:	2300      	movs	r3, #0
        sd = bbzheap_aseg_at(si);
    }
    /* We are now at the last segment */
    /* Find the first free space */
    for (si = 0; // Reusing 'si' as the position in the segment
         si < BBZHEAP_ELEMS_PER_ASEG &&
   d712e:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
   d7132:	2900      	cmp	r1, #0
   d7134:	b29a      	uxth	r2, r3
   d7136:	da19      	bge.n	d716c <bbzdarray_push+0x7c>
   d7138:	3301      	adds	r3, #1
   d713a:	2b0a      	cmp	r3, #10
   d713c:	d1f7      	bne.n	d712e <bbzdarray_push+0x3e>
         ++si);

    if (si >= BBZHEAP_ELEMS_PER_ASEG) {
        /* Last segment is full ; add a new segment */
        uint16_t o;
        if (!bbzheap_aseg_alloc(&o)) return 0;
   d713e:	f10d 0006 	add.w	r0, sp, #6
   d7142:	f7fe ffd7 	bl	d60f4 <bbzheap_tseg_alloc>
   d7146:	b1c0      	cbz	r0, d717a <bbzdarray_push+0x8a>
        bbzheap_aseg_next_set(sd, o);
   d7148:	8aa3      	ldrh	r3, [r4, #20]
   d714a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
   d714e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d7152:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d7156:	4313      	orrs	r3, r2
   d7158:	82a3      	strh	r3, [r4, #20]
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d715a:	6834      	ldr	r4, [r6, #0]
   d715c:	2216      	movs	r2, #22
   d715e:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d7162:	fb02 4413 	mls	r4, r2, r3, r4
   d7166:	f204 4442 	addw	r4, r4, #1090	; 0x442
        si = 0;
   d716a:	2200      	movs	r2, #0
    }

    /* Append value to segment */
    bbzheap_aseg_elem_set(sd->values[si], v);
   d716c:	ea6f 4545 	mvn.w	r5, r5, lsl #17
   d7170:	ea6f 4555 	mvn.w	r5, r5, lsr #17
   d7174:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]

    return 1;
   d7178:	2001      	movs	r0, #1
}
   d717a:	b002      	add	sp, #8
   d717c:	bd70      	pop	{r4, r5, r6, pc}
   d717e:	bf00      	nop
   d7180:	2003e3f4 	.word	0x2003e3f4

000d7184 <bbzdarray_pop>:

/****************************************/
/****************************************/

uint8_t bbzdarray_pop(bbzheap_idx_t d) {
   d7184:	b538      	push	{r3, r4, r5, lr}
    bbzheap_idx_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d7186:	f7fe ffab 	bl	d60e0 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d718a:	4b28      	ldr	r3, [pc, #160]	; (d722c <bbzdarray_pop+0xa8>)
   d718c:	6819      	ldr	r1, [r3, #0]
   d718e:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d7192:	2216      	movs	r2, #22
   d7194:	4353      	muls	r3, r2
   d7196:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d719a:	3118      	adds	r1, #24
   d719c:	3302      	adds	r3, #2
   d719e:	440b      	add	r3, r1
    bbzheap_aseg_t* prevsd = NULL; // To keep track of the previous segment
    /* If the array is empty, return with Failure */
    if (!bbzheap_aseg_hasnext(sd) &&
   d71a0:	f643 74ff 	movw	r4, #16383	; 0x3fff
   d71a4:	8a98      	ldrh	r0, [r3, #20]
   d71a6:	f3c0 000d 	ubfx	r0, r0, #0, #14
   d71aa:	42a0      	cmp	r0, r4
   d71ac:	d003      	beq.n	d71b6 <bbzdarray_pop+0x32>
        !bbzheap_aseg_elem_isvalid(sd->values[0])) {
        return 0;
    }
    /* Loop to fetch the last segment */
    while (bbzheap_aseg_hasnext(sd)) {
   d71ae:	4625      	mov	r5, r4
   d71b0:	2000      	movs	r0, #0
        si = bbzheap_aseg_next_get(sd);
        prevsd = sd;
        sd = bbzheap_aseg_at(si);
   d71b2:	4614      	mov	r4, r2
   d71b4:	e006      	b.n	d71c4 <bbzdarray_pop+0x40>
uint8_t bbzdarray_pop(bbzheap_idx_t d) {
    bbzheap_idx_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    bbzheap_aseg_t* prevsd = NULL; // To keep track of the previous segment
    /* If the array is empty, return with Failure */
    if (!bbzheap_aseg_hasnext(sd) &&
   d71b6:	f9b3 2000 	ldrsh.w	r2, [r3]
   d71ba:	2a00      	cmp	r2, #0
        !bbzheap_aseg_elem_isvalid(sd->values[0])) {
        return 0;
   d71bc:	f04f 0000 	mov.w	r0, #0
uint8_t bbzdarray_pop(bbzheap_idx_t d) {
    bbzheap_idx_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    bbzheap_aseg_t* prevsd = NULL; // To keep track of the previous segment
    /* If the array is empty, return with Failure */
    if (!bbzheap_aseg_hasnext(sd) &&
   d71c0:	da32      	bge.n	d7228 <bbzdarray_pop+0xa4>
   d71c2:	e00b      	b.n	d71dc <bbzdarray_pop+0x58>
        !bbzheap_aseg_elem_isvalid(sd->values[0])) {
        return 0;
    }
    /* Loop to fetch the last segment */
    while (bbzheap_aseg_hasnext(sd)) {
   d71c4:	8a9a      	ldrh	r2, [r3, #20]
   d71c6:	f3c2 020d 	ubfx	r2, r2, #0, #14
   d71ca:	42aa      	cmp	r2, r5
   d71cc:	d006      	beq.n	d71dc <bbzdarray_pop+0x58>
        si = bbzheap_aseg_next_get(sd);
        prevsd = sd;
        sd = bbzheap_aseg_at(si);
   d71ce:	4362      	muls	r2, r4
   d71d0:	f5c2 6285 	rsb	r2, r2, #1064	; 0x428
   d71d4:	3202      	adds	r2, #2
   d71d6:	4618      	mov	r0, r3
   d71d8:	188b      	adds	r3, r1, r2
    if (!bbzheap_aseg_hasnext(sd) &&
        !bbzheap_aseg_elem_isvalid(sd->values[0])) {
        return 0;
    }
    /* Loop to fetch the last segment */
    while (bbzheap_aseg_hasnext(sd)) {
   d71da:	e7f3      	b.n	d71c4 <bbzdarray_pop+0x40>
   d71dc:	2100      	movs	r1, #0
        sd = bbzheap_aseg_at(si);
    }
    /* We are now at the last segment */
    /* Find the last valid element */
    for (si = 0; // Reusing 'si' as the position in the segment
         si < BBZHEAP_ELEMS_PER_ASEG &&
   d71de:	f933 4011 	ldrsh.w	r4, [r3, r1, lsl #1]
   d71e2:	2c00      	cmp	r4, #0
   d71e4:	b28a      	uxth	r2, r1
   d71e6:	da04      	bge.n	d71f2 <bbzdarray_pop+0x6e>
   d71e8:	3101      	adds	r1, #1
   d71ea:	290a      	cmp	r1, #10
   d71ec:	d1f7      	bne.n	d71de <bbzdarray_pop+0x5a>
   d71ee:	460a      	mov	r2, r1
   d71f0:	e000      	b.n	d71f4 <bbzdarray_pop+0x70>
         bbzheap_aseg_elem_isvalid(sd->values[si]);
         ++si);
    if (si > 0) {
   d71f2:	b142      	cbz	r2, d7206 <bbzdarray_pop+0x82>
   d71f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        /* If a valid element was found, remove the last one */
        sd->values[si - 1] &= ~BBZHEAP_MASK_VALID_SEG_ELEM;
   d71f8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   d71fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
   d7200:	f823 2c02 	strh.w	r2, [r3, #-2]
   d7204:	e00e      	b.n	d7224 <bbzdarray_pop+0xa0>
    }
    else {
        if (prevsd != NULL) {
   d7206:	b178      	cbz	r0, d7228 <bbzdarray_pop+0xa4>
            /* If no valid element were found, remove the last one of
             * the previous segment */
            prevsd->values[BBZHEAP_ELEMS_PER_ASEG-1] &=
                    ~BBZHEAP_MASK_VALID_SEG_ELEM;
   d7208:	8a42      	ldrh	r2, [r0, #18]
   d720a:	f3c2 020e 	ubfx	r2, r2, #0, #15
   d720e:	8242      	strh	r2, [r0, #18]
            /* Remove the empty segment */
            bbzheap_tseg_makeinvalid(*sd);
   d7210:	8a9a      	ldrh	r2, [r3, #20]
   d7212:	f3c2 020e 	ubfx	r2, r2, #0, #15
   d7216:	829a      	strh	r2, [r3, #20]
            bbzheap_aseg_next_set(prevsd, BBZHEAP_SEG_NO_NEXT);
   d7218:	8a83      	ldrh	r3, [r0, #20]
   d721a:	ea6f 3393 	mvn.w	r3, r3, lsr #14
   d721e:	ea6f 3383 	mvn.w	r3, r3, lsl #14
   d7222:	8283      	strh	r3, [r0, #20]
        }
        else {
            return 0; // Should never be reached.
        }
    }
    return 1;
   d7224:	2001      	movs	r0, #1
   d7226:	bd38      	pop	{r3, r4, r5, pc}
}
   d7228:	bd38      	pop	{r3, r4, r5, pc}
   d722a:	bf00      	nop
   d722c:	2003e3f4 	.word	0x2003e3f4

000d7230 <bbzdarray_size>:

/****************************************/
/****************************************/

uint16_t bbzdarray_size(bbzheap_idx_t d) {
   d7230:	b570      	push	{r4, r5, r6, lr}
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d7232:	f7fe ff55 	bl	d60e0 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d7236:	4b15      	ldr	r3, [pc, #84]	; (d728c <bbzdarray_size+0x5c>)
   d7238:	681a      	ldr	r2, [r3, #0]
   d723a:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d723e:	2116      	movs	r1, #22
   d7240:	434b      	muls	r3, r1
   d7242:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d7246:	3218      	adds	r2, #24
   d7248:	3302      	adds	r3, #2
   d724a:	4413      	add	r3, r2

/****************************************/
/****************************************/

uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
   d724c:	2000      	movs	r0, #0
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
                return size;
            }
            ++size;
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
   d724e:	f643 75ff 	movw	r5, #16383	; 0x3fff

/****************************************/
/****************************************/

uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
   d7252:	2400      	movs	r4, #0
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
   d7254:	f933 6014 	ldrsh.w	r6, [r3, r4, lsl #1]
   d7258:	2e00      	cmp	r6, #0
   d725a:	db06      	blt.n	d726a <bbzdarray_size+0x3a>
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
   d725c:	8a9a      	ldrh	r2, [r3, #20]
   d725e:	ea6f 3292 	mvn.w	r2, r2, lsr #14
   d7262:	ea6f 3282 	mvn.w	r2, r2, lsl #14
   d7266:	829a      	strh	r2, [r3, #20]
                return size;
   d7268:	bd70      	pop	{r4, r5, r6, pc}
   d726a:	3401      	adds	r4, #1
            }
            ++size;
   d726c:	3001      	adds	r0, #1
uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d726e:	2c0a      	cmp	r4, #10
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
                return size;
            }
            ++size;
   d7270:	b280      	uxth	r0, r0
uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d7272:	d1ef      	bne.n	d7254 <bbzdarray_size+0x24>
                bbzheap_aseg_next_set(sd, BBZHEAP_SEG_NO_NEXT);
                return size;
            }
            ++size;
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
   d7274:	8a9b      	ldrh	r3, [r3, #20]
   d7276:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d727a:	42ab      	cmp	r3, r5
   d727c:	d005      	beq.n	d728a <bbzdarray_size+0x5a>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d727e:	434b      	muls	r3, r1
   d7280:	f5c3 6385 	rsb	r3, r3, #1064	; 0x428
   d7284:	3302      	adds	r3, #2
   d7286:	4413      	add	r3, r2

uint16_t bbzdarray_size(bbzheap_idx_t d) {
    uint16_t size = 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
   d7288:	e7e3      	b.n	d7252 <bbzdarray_size+0x22>
        if (!bbzheap_aseg_hasnext(sd)) break;
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    return size;
}
   d728a:	bd70      	pop	{r4, r5, r6, pc}
   d728c:	2003e3f4 	.word	0x2003e3f4

000d7290 <bbzdarray_clone>:

/****************************************/
/****************************************/

uint8_t bbzdarray_clone(bbzheap_idx_t d,
                        bbzheap_idx_t* newd) {
   d7290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7294:	4604      	mov	r4, r0
    if(!bbzdarray_new(newd)) return 0;
   d7296:	4608      	mov	r0, r1

/****************************************/
/****************************************/

uint8_t bbzdarray_clone(bbzheap_idx_t d,
                        bbzheap_idx_t* newd) {
   d7298:	460e      	mov	r6, r1
    if(!bbzdarray_new(newd)) return 0;
   d729a:	f7ff fe5c 	bl	d6f56 <bbzdarray_new>
   d729e:	b348      	cbz	r0, d72f4 <bbzdarray_clone+0x64>
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
   d72a0:	4620      	mov	r0, r4
   d72a2:	f7fe ff1d 	bl	d60e0 <bbzheap_obj_at>
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
   d72a6:	4f16      	ldr	r7, [pc, #88]	; (d7300 <bbzdarray_clone+0x70>)
   d72a8:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d72ac:	683c      	ldr	r4, [r7, #0]
   d72ae:	2216      	movs	r2, #22
   d72b0:	fb02 4413 	mls	r4, r2, r3, r4
   d72b4:	f204 4442 	addw	r4, r4, #1090	; 0x442
                break;
            }
            if (!bbzdarray_push(*newd, bbzheap_aseg_elem_get(sd->values[i])))
                return 0;
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
   d72b8:	f643 78ff 	movw	r8, #16383	; 0x3fff
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d72bc:	4691      	mov	r9, r2

/****************************************/
/****************************************/

uint8_t bbzdarray_clone(bbzheap_idx_t d,
                        bbzheap_idx_t* newd) {
   d72be:	2500      	movs	r5, #0
    if(!bbzdarray_new(newd)) return 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
   d72c0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
   d72c4:	b299      	uxth	r1, r3
   d72c6:	041b      	lsls	r3, r3, #16
   d72c8:	d40a      	bmi.n	d72e0 <bbzdarray_clone+0x50>
                break;
            }
            if (!bbzdarray_push(*newd, bbzheap_aseg_elem_get(sd->values[i])))
                return 0;
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
   d72ca:	8aa3      	ldrh	r3, [r4, #20]
   d72cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d72d0:	4543      	cmp	r3, r8
   d72d2:	d012      	beq.n	d72fa <bbzdarray_clone+0x6a>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d72d4:	683c      	ldr	r4, [r7, #0]
   d72d6:	fb09 4413 	mls	r4, r9, r3, r4
   d72da:	f204 4442 	addw	r4, r4, #1090	; 0x442
uint8_t bbzdarray_clone(bbzheap_idx_t d,
                        bbzheap_idx_t* newd) {
    if(!bbzdarray_new(newd)) return 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
   d72de:	e7ee      	b.n	d72be <bbzdarray_clone+0x2e>
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
                break;
            }
            if (!bbzdarray_push(*newd, bbzheap_aseg_elem_get(sd->values[i])))
   d72e0:	f3c1 010e 	ubfx	r1, r1, #0, #15
   d72e4:	8830      	ldrh	r0, [r6, #0]
   d72e6:	f7ff ff03 	bl	d70f0 <bbzdarray_push>
   d72ea:	b118      	cbz	r0, d72f4 <bbzdarray_clone+0x64>
   d72ec:	3501      	adds	r5, #1
                        bbzheap_idx_t* newd) {
    if(!bbzdarray_new(newd)) return 0;
    uint16_t si = bbzheap_obj_at(d)->t.value; // Segment index
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si); // Segment data
    while (1) {
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d72ee:	2d0a      	cmp	r5, #10
   d72f0:	d1e6      	bne.n	d72c0 <bbzdarray_clone+0x30>
   d72f2:	e7ea      	b.n	d72ca <bbzdarray_clone+0x3a>
/****************************************/
/****************************************/

uint8_t bbzdarray_clone(bbzheap_idx_t d,
                        bbzheap_idx_t* newd) {
    if(!bbzdarray_new(newd)) return 0;
   d72f4:	2000      	movs	r0, #0
   d72f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
        if (!bbzheap_aseg_hasnext(sd)) break;
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    return 1;
   d72fa:	2001      	movs	r0, #1
}
   d72fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7300:	2003e3f4 	.word	0x2003e3f4

000d7304 <bbzdarray_find>:
/****************************************/
/****************************************/

uint16_t bbzdarray_find(bbzheap_idx_t d,
                        bbzdarray_elem_cmpp cmp,
                        bbzheap_idx_t data) {
   d7304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7308:	460f      	mov	r7, r1
   d730a:	4690      	mov	r8, r2
    uint16_t pos = 0;
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
   d730c:	f7fe fee8 	bl	d60e0 <bbzheap_obj_at>
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
   d7310:	4d22      	ldr	r5, [pc, #136]	; (d739c <bbzdarray_find+0x98>)
   d7312:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   d7316:	682c      	ldr	r4, [r5, #0]
   d7318:	2616      	movs	r6, #22
   d731a:	fb06 4413 	mls	r4, r6, r3, r4
   d731e:	f204 4442 	addw	r4, r4, #1090	; 0x442
/****************************************/

uint16_t bbzdarray_find(bbzheap_idx_t d,
                        bbzdarray_elem_cmpp cmp,
                        bbzheap_idx_t data) {
    uint16_t pos = 0;
   d7322:	f04f 0a00 	mov.w	sl, #0
                return pos;
            }
            ++pos;
        }
        /* Go to next segment */
        if (!bbzheap_aseg_hasnext(sd)) break;
   d7326:	f643 79ff 	movw	r9, #16383	; 0x3fff
/****************************************/

uint16_t bbzdarray_find(bbzheap_idx_t d,
                        bbzdarray_elem_cmpp cmp,
                        bbzheap_idx_t data) {
    uint16_t pos = 0;
   d732a:	f04f 0b00 	mov.w	fp, #0
   d732e:	eb04 034b 	add.w	r3, r4, fp, lsl #1
    /* Go through the darray segments */
    while (1) {
        /* Go through the subelements of the segment */
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
            /* No more elements? */
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
   d7332:	9301      	str	r3, [sp, #4]
   d7334:	881a      	ldrh	r2, [r3, #0]
   d7336:	0413      	lsls	r3, r2, #16
   d7338:	b290      	uxth	r0, r2
   d733a:	d51f      	bpl.n	d737c <bbzdarray_find+0x78>
                break;
            }
            /* Element found? */
            if (bbzheap_obj_isvalid(*bbzheap_obj_at(
   d733c:	f3c0 000e 	ubfx	r0, r0, #0, #15
   d7340:	f7fe fece 	bl	d60e0 <bbzheap_obj_at>
                    bbzheap_aseg_elem_get(sd->values[i]))) &&
   d7344:	7802      	ldrb	r2, [r0, #0]
   d7346:	9b01      	ldr	r3, [sp, #4]
   d7348:	f012 0f08 	tst.w	r2, #8
   d734c:	d00d      	beq.n	d736a <bbzdarray_find+0x66>
                cmp(bbzheap_obj_at(bbzheap_aseg_elem_get(sd->values[i])),
   d734e:	8818      	ldrh	r0, [r3, #0]
   d7350:	f3c0 000e 	ubfx	r0, r0, #0, #15
   d7354:	f7fe fec4 	bl	d60e0 <bbzheap_obj_at>
   d7358:	9001      	str	r0, [sp, #4]
                    bbzheap_obj_at(data)) == 0) {
   d735a:	4640      	mov	r0, r8
   d735c:	f7fe fec0 	bl	d60e0 <bbzheap_obj_at>
                break;
            }
            /* Element found? */
            if (bbzheap_obj_isvalid(*bbzheap_obj_at(
                    bbzheap_aseg_elem_get(sd->values[i]))) &&
                cmp(bbzheap_obj_at(bbzheap_aseg_elem_get(sd->values[i])),
   d7360:	9b01      	ldr	r3, [sp, #4]
   d7362:	4601      	mov	r1, r0
   d7364:	4618      	mov	r0, r3
   d7366:	47b8      	blx	r7
            if (!bbzheap_aseg_elem_isvalid(sd->values[i])) {
                break;
            }
            /* Element found? */
            if (bbzheap_obj_isvalid(*bbzheap_obj_at(
                    bbzheap_aseg_elem_get(sd->values[i]))) &&
   d7368:	b198      	cbz	r0, d7392 <bbzdarray_find+0x8e>
   d736a:	f10b 0b01 	add.w	fp, fp, #1
                cmp(bbzheap_obj_at(bbzheap_aseg_elem_get(sd->values[i])),
                    bbzheap_obj_at(data)) == 0) {
                return pos;
            }
            ++pos;
   d736e:	f10a 0a01 	add.w	sl, sl, #1
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
    /* Go through the darray segments */
    while (1) {
        /* Go through the subelements of the segment */
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d7372:	f1bb 0f0a 	cmp.w	fp, #10
                    bbzheap_aseg_elem_get(sd->values[i]))) &&
                cmp(bbzheap_obj_at(bbzheap_aseg_elem_get(sd->values[i])),
                    bbzheap_obj_at(data)) == 0) {
                return pos;
            }
            ++pos;
   d7376:	fa1f fa8a 	uxth.w	sl, sl
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
    /* Go through the darray segments */
    while (1) {
        /* Go through the subelements of the segment */
        for (uint16_t i = 0; i < BBZHEAP_ELEMS_PER_ASEG; ++i) {
   d737a:	d1d8      	bne.n	d732e <bbzdarray_find+0x2a>
                return pos;
            }
            ++pos;
        }
        /* Go to next segment */
        if (!bbzheap_aseg_hasnext(sd)) break;
   d737c:	8aa3      	ldrh	r3, [r4, #20]
   d737e:	f3c3 030d 	ubfx	r3, r3, #0, #14
   d7382:	454b      	cmp	r3, r9
   d7384:	d005      	beq.n	d7392 <bbzdarray_find+0x8e>
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
   d7386:	682c      	ldr	r4, [r5, #0]
   d7388:	fb06 4413 	mls	r4, r6, r3, r4
   d738c:	f204 4442 	addw	r4, r4, #1090	; 0x442
    uint16_t pos = 0;
    bbzdarray_t* da = (bbzdarray_t*)bbzheap_obj_at(d);
    uint16_t si = da->value;
    bbzheap_aseg_t* sd = bbzheap_aseg_at(si);
    /* Go through the darray segments */
    while (1) {
   d7390:	e7cb      	b.n	d732a <bbzdarray_find+0x26>
        if (!bbzheap_aseg_hasnext(sd)) break;
        si = bbzheap_aseg_next_get(sd);
        sd = bbzheap_aseg_at(si);
    }
    return pos;
}
   d7392:	4650      	mov	r0, sl
   d7394:	b003      	add	sp, #12
   d7396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d739a:	bf00      	nop
   d739c:	2003e3f4 	.word	0x2003e3f4

000d73a0 <bbzdarray_lambda_alloc>:

/****************************************/
/****************************************/

uint8_t bbzdarray_lambda_alloc(bbzheap_idx_t d, uint8_t* l) {
   d73a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d73a4:	4606      	mov	r6, r0
   d73a6:	460f      	mov	r7, r1
   d73a8:	2400      	movs	r4, #0
    /* Look for empty slot */
    for(uint8_t i = 0;
        i < BBZHEAP_RSV_ACTREC_MAX;
        ++i)
        if(!bbzheap_obj_isvalid(*bbzheap_obj_at(i))) {
   d73aa:	fa1f f984 	uxth.w	r9, r4
   d73ae:	4648      	mov	r0, r9
   d73b0:	f7fe fe96 	bl	d60e0 <bbzheap_obj_at>
   d73b4:	7803      	ldrb	r3, [r0, #0]
   d73b6:	f003 0308 	and.w	r3, r3, #8
   d73ba:	fa5f f884 	uxtb.w	r8, r4
   d73be:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d73c2:	bb33      	cbnz	r3, d7412 <bbzdarray_lambda_alloc+0x72>
            /* Empty slot found */
            bbzobj_t* x = bbzheap_obj_at(i);
   d73c4:	4648      	mov	r0, r9
   d73c6:	f7fe fe8b 	bl	d60e0 <bbzheap_obj_at>
            /* Set valid bit and type */
            bbzheap_obj_makevalid(*x);
            bbztype_cast(*x, BBZTYPE_TABLE);
            /* Set the bit that tells it's a dynamic array */
            x->t.mdata |= BBZTABLE_DARRAY_MASK;
            x->t.mdata &= ~BBZTABLE_DARRAY_HAS_SELF_MASK;
   d73ca:	7803      	ldrb	r3, [r0, #0]
   d73cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   d73d0:	f043 034c 	orr.w	r3, r3, #76	; 0x4c
   d73d4:	f800 3b01 	strb.w	r3, [r0], #1
            /* Set result */
            *l = i;
   d73d8:	f887 8000 	strb.w	r8, [r7]
            /* Allocate an array segment */
            if(!bbzheap_aseg_alloc(&(x->t.value))) return 0;
   d73dc:	f7fe fe8a 	bl	d60f4 <bbzheap_tseg_alloc>
   d73e0:	b1d8      	cbz	r0, d741a <bbzdarray_lambda_alloc+0x7a>
            uint16_t idx = bbzdarray_size(d);
   d73e2:	4630      	mov	r0, r6
   d73e4:	f7ff ff24 	bl	d7230 <bbzdarray_size>
   d73e8:	462c      	mov	r4, r5
   d73ea:	4680      	mov	r8, r0
   d73ec:	b2a1      	uxth	r1, r4
            uint16_t v;
            for (uint16_t j = 0; j < idx; ++j) {
   d73ee:	4541      	cmp	r1, r8
   d73f0:	d20d      	bcs.n	d740e <bbzdarray_lambda_alloc+0x6e>
                bbzdarray_get(d, j, &v);
   d73f2:	f10d 0206 	add.w	r2, sp, #6
   d73f6:	4630      	mov	r0, r6
   d73f8:	f7ff fdea 	bl	d6fd0 <bbzdarray_get>
                if (!bbzdarray_push(*l, v)) return 0;
   d73fc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d7400:	7838      	ldrb	r0, [r7, #0]
   d7402:	f7ff fe75 	bl	d70f0 <bbzdarray_push>
   d7406:	3401      	adds	r4, #1
   d7408:	2800      	cmp	r0, #0
   d740a:	d1ef      	bne.n	d73ec <bbzdarray_lambda_alloc+0x4c>
   d740c:	e005      	b.n	d741a <bbzdarray_lambda_alloc+0x7a>
            }
            /* Success */
            return 1;
   d740e:	2501      	movs	r5, #1
   d7410:	e003      	b.n	d741a <bbzdarray_lambda_alloc+0x7a>
   d7412:	3401      	adds	r4, #1
/****************************************/

uint8_t bbzdarray_lambda_alloc(bbzheap_idx_t d, uint8_t* l) {
    /* Look for empty slot */
    for(uint8_t i = 0;
        i < BBZHEAP_RSV_ACTREC_MAX;
   d7414:	2c1c      	cmp	r4, #28
   d7416:	d1c8      	bne.n	d73aa <bbzdarray_lambda_alloc+0xa>
            }
            /* Success */
            return 1;
        }
    /* No empty slot found, we're out of reserved memory! */
    return 0;
   d7418:	2500      	movs	r5, #0
   d741a:	4628      	mov	r0, r5
   d741c:	b003      	add	sp, #12
   d741e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7424 <bbzinmsg_queue_extract>:
}

/****************************************/
/****************************************/

bbzmsg_t * bbzinmsg_queue_extract() {
   d7424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbzmsg_t* ret = &vm->inmsgs.buf[vm->inmsgs.queue.capacity];
   d7426:	4f0f      	ldr	r7, [pc, #60]	; (d7464 <bbzinmsg_queue_extract+0x40>)
   d7428:	683d      	ldr	r5, [r7, #0]
   d742a:	f895 4468 	ldrb.w	r4, [r5, #1128]	; 0x468
   d742e:	230b      	movs	r3, #11
    *ret = *bbzinmsg_queue_get(0);
   d7430:	2100      	movs	r1, #0
   d7432:	f205 4063 	addw	r0, r5, #1123	; 0x463

/****************************************/
/****************************************/

bbzmsg_t * bbzinmsg_queue_extract() {
    bbzmsg_t* ret = &vm->inmsgs.buf[vm->inmsgs.queue.capacity];
   d7436:	435c      	muls	r4, r3
    *ret = *bbzinmsg_queue_get(0);
   d7438:	f7ff fb19 	bl	d6a6e <bbzringbuf_at>

/****************************************/
/****************************************/

bbzmsg_t * bbzinmsg_queue_extract() {
    bbzmsg_t* ret = &vm->inmsgs.buf[vm->inmsgs.queue.capacity];
   d743c:	192e      	adds	r6, r5, r4
    *ret = *bbzinmsg_queue_get(0);
   d743e:	442c      	add	r4, r5
   d7440:	6802      	ldr	r2, [r0, #0]
   d7442:	f8c4 246b 	str.w	r2, [r4, #1131]	; 0x46b

/****************************************/
/****************************************/

bbzmsg_t * bbzinmsg_queue_extract() {
    bbzmsg_t* ret = &vm->inmsgs.buf[vm->inmsgs.queue.capacity];
   d7446:	f206 466b 	addw	r6, r6, #1131	; 0x46b
    *ret = *bbzinmsg_queue_get(0);
   d744a:	6842      	ldr	r2, [r0, #4]
   d744c:	6072      	str	r2, [r6, #4]
   d744e:	8902      	ldrh	r2, [r0, #8]
   d7450:	8132      	strh	r2, [r6, #8]
   d7452:	7a82      	ldrb	r2, [r0, #10]
    bbzringbuf_pop(&vm->inmsgs.queue);
   d7454:	6838      	ldr	r0, [r7, #0]
/****************************************/
/****************************************/

bbzmsg_t * bbzinmsg_queue_extract() {
    bbzmsg_t* ret = &vm->inmsgs.buf[vm->inmsgs.queue.capacity];
    *ret = *bbzinmsg_queue_get(0);
   d7456:	72b2      	strb	r2, [r6, #10]
    bbzringbuf_pop(&vm->inmsgs.queue);
   d7458:	f200 4063 	addw	r0, r0, #1123	; 0x463
   d745c:	f7ff fb12 	bl	d6a84 <bbzringbuf_pop>
#ifdef BBZMSG_POP_NEEDS_SORT
    bbzmsg_sort_priority(&vm->inmsgs.queue);
#endif
    return ret;
}
   d7460:	4630      	mov	r0, r6
   d7462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7464:	2003e3f4 	.word	0x2003e3f4

000d7468 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7468:	b508      	push	{r3, lr}
   d746a:	4b02      	ldr	r3, [pc, #8]	; (d7474 <HAL_USB_USART_Init+0xc>)
   d746c:	681b      	ldr	r3, [r3, #0]
   d746e:	681b      	ldr	r3, [r3, #0]
   d7470:	9301      	str	r3, [sp, #4]
   d7472:	bd08      	pop	{r3, pc}
   d7474:	0003024c 	.word	0x0003024c

000d7478 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7478:	b508      	push	{r3, lr}
   d747a:	4b02      	ldr	r3, [pc, #8]	; (d7484 <HAL_USB_USART_Begin+0xc>)
   d747c:	681b      	ldr	r3, [r3, #0]
   d747e:	685b      	ldr	r3, [r3, #4]
   d7480:	9301      	str	r3, [sp, #4]
   d7482:	bd08      	pop	{r3, pc}
   d7484:	0003024c 	.word	0x0003024c

000d7488 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7488:	b508      	push	{r3, lr}
   d748a:	4b02      	ldr	r3, [pc, #8]	; (d7494 <HAL_USB_USART_Available_Data+0xc>)
   d748c:	681b      	ldr	r3, [r3, #0]
   d748e:	691b      	ldr	r3, [r3, #16]
   d7490:	9301      	str	r3, [sp, #4]
   d7492:	bd08      	pop	{r3, pc}
   d7494:	0003024c 	.word	0x0003024c

000d7498 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7498:	b508      	push	{r3, lr}
   d749a:	4b02      	ldr	r3, [pc, #8]	; (d74a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d749c:	681b      	ldr	r3, [r3, #0]
   d749e:	695b      	ldr	r3, [r3, #20]
   d74a0:	9301      	str	r3, [sp, #4]
   d74a2:	bd08      	pop	{r3, pc}
   d74a4:	0003024c 	.word	0x0003024c

000d74a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d74a8:	b508      	push	{r3, lr}
   d74aa:	4b02      	ldr	r3, [pc, #8]	; (d74b4 <HAL_USB_USART_Receive_Data+0xc>)
   d74ac:	681b      	ldr	r3, [r3, #0]
   d74ae:	699b      	ldr	r3, [r3, #24]
   d74b0:	9301      	str	r3, [sp, #4]
   d74b2:	bd08      	pop	{r3, pc}
   d74b4:	0003024c 	.word	0x0003024c

000d74b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d74b8:	b508      	push	{r3, lr}
   d74ba:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <HAL_USB_USART_Send_Data+0xc>)
   d74bc:	681b      	ldr	r3, [r3, #0]
   d74be:	69db      	ldr	r3, [r3, #28]
   d74c0:	9301      	str	r3, [sp, #4]
   d74c2:	bd08      	pop	{r3, pc}
   d74c4:	0003024c 	.word	0x0003024c

000d74c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d74c8:	b508      	push	{r3, lr}
   d74ca:	4b02      	ldr	r3, [pc, #8]	; (d74d4 <HAL_USB_USART_Flush_Data+0xc>)
   d74cc:	681b      	ldr	r3, [r3, #0]
   d74ce:	6a1b      	ldr	r3, [r3, #32]
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	bd08      	pop	{r3, pc}
   d74d4:	0003024c 	.word	0x0003024c

000d74d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d74d8:	b508      	push	{r3, lr}
   d74da:	4b02      	ldr	r3, [pc, #8]	; (d74e4 <HAL_USART_Init+0xc>)
   d74dc:	681b      	ldr	r3, [r3, #0]
   d74de:	681b      	ldr	r3, [r3, #0]
   d74e0:	9301      	str	r3, [sp, #4]
   d74e2:	bd08      	pop	{r3, pc}
   d74e4:	0003023c 	.word	0x0003023c

000d74e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d74e8:	b508      	push	{r3, lr}
   d74ea:	4b02      	ldr	r3, [pc, #8]	; (d74f4 <HAL_USART_Write_Data+0xc>)
   d74ec:	681b      	ldr	r3, [r3, #0]
   d74ee:	68db      	ldr	r3, [r3, #12]
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	bd08      	pop	{r3, pc}
   d74f4:	0003023c 	.word	0x0003023c

000d74f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d74f8:	b508      	push	{r3, lr}
   d74fa:	4b02      	ldr	r3, [pc, #8]	; (d7504 <HAL_USART_Available_Data+0xc>)
   d74fc:	681b      	ldr	r3, [r3, #0]
   d74fe:	691b      	ldr	r3, [r3, #16]
   d7500:	9301      	str	r3, [sp, #4]
   d7502:	bd08      	pop	{r3, pc}
   d7504:	0003023c 	.word	0x0003023c

000d7508 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7508:	b508      	push	{r3, lr}
   d750a:	4b02      	ldr	r3, [pc, #8]	; (d7514 <HAL_USART_Read_Data+0xc>)
   d750c:	681b      	ldr	r3, [r3, #0]
   d750e:	695b      	ldr	r3, [r3, #20]
   d7510:	9301      	str	r3, [sp, #4]
   d7512:	bd08      	pop	{r3, pc}
   d7514:	0003023c 	.word	0x0003023c

000d7518 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7518:	b508      	push	{r3, lr}
   d751a:	4b02      	ldr	r3, [pc, #8]	; (d7524 <HAL_USART_Peek_Data+0xc>)
   d751c:	681b      	ldr	r3, [r3, #0]
   d751e:	699b      	ldr	r3, [r3, #24]
   d7520:	9301      	str	r3, [sp, #4]
   d7522:	bd08      	pop	{r3, pc}
   d7524:	0003023c 	.word	0x0003023c

000d7528 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7528:	b508      	push	{r3, lr}
   d752a:	4b02      	ldr	r3, [pc, #8]	; (d7534 <HAL_USART_Flush_Data+0xc>)
   d752c:	681b      	ldr	r3, [r3, #0]
   d752e:	69db      	ldr	r3, [r3, #28]
   d7530:	9301      	str	r3, [sp, #4]
   d7532:	bd08      	pop	{r3, pc}
   d7534:	0003023c 	.word	0x0003023c

000d7538 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7538:	b508      	push	{r3, lr}
   d753a:	4b02      	ldr	r3, [pc, #8]	; (d7544 <HAL_USART_Available_Data_For_Write+0xc>)
   d753c:	681b      	ldr	r3, [r3, #0]
   d753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7540:	9301      	str	r3, [sp, #4]
   d7542:	bd08      	pop	{r3, pc}
   d7544:	0003023c 	.word	0x0003023c

000d7548 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7548:	b508      	push	{r3, lr}
   d754a:	4b02      	ldr	r3, [pc, #8]	; (d7554 <inet_inet_ntop+0xc>)
   d754c:	681b      	ldr	r3, [r3, #0]
   d754e:	695b      	ldr	r3, [r3, #20]
   d7550:	9301      	str	r3, [sp, #4]
   d7552:	bd08      	pop	{r3, pc}
   d7554:	00030264 	.word	0x00030264

000d7558 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7558:	b508      	push	{r3, lr}
   d755a:	4b02      	ldr	r3, [pc, #8]	; (d7564 <os_thread_is_current+0xc>)
   d755c:	681b      	ldr	r3, [r3, #0]
   d755e:	689b      	ldr	r3, [r3, #8]
   d7560:	9301      	str	r3, [sp, #4]
   d7562:	bd08      	pop	{r3, pc}
   d7564:	00030248 	.word	0x00030248

000d7568 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7568:	b508      	push	{r3, lr}
   d756a:	4b02      	ldr	r3, [pc, #8]	; (d7574 <os_thread_join+0xc>)
   d756c:	681b      	ldr	r3, [r3, #0]
   d756e:	691b      	ldr	r3, [r3, #16]
   d7570:	9301      	str	r3, [sp, #4]
   d7572:	bd08      	pop	{r3, pc}
   d7574:	00030248 	.word	0x00030248

000d7578 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7578:	b508      	push	{r3, lr}
   d757a:	4b02      	ldr	r3, [pc, #8]	; (d7584 <os_thread_cleanup+0xc>)
   d757c:	681b      	ldr	r3, [r3, #0]
   d757e:	695b      	ldr	r3, [r3, #20]
   d7580:	9301      	str	r3, [sp, #4]
   d7582:	bd08      	pop	{r3, pc}
   d7584:	00030248 	.word	0x00030248

000d7588 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7588:	b508      	push	{r3, lr}
   d758a:	4b02      	ldr	r3, [pc, #8]	; (d7594 <os_mutex_recursive_create+0xc>)
   d758c:	681b      	ldr	r3, [r3, #0]
   d758e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7590:	9301      	str	r3, [sp, #4]
   d7592:	bd08      	pop	{r3, pc}
   d7594:	00030248 	.word	0x00030248

000d7598 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7598:	b508      	push	{r3, lr}
   d759a:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <os_mutex_recursive_destroy+0xc>)
   d759c:	681b      	ldr	r3, [r3, #0]
   d759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d75a0:	9301      	str	r3, [sp, #4]
   d75a2:	bd08      	pop	{r3, pc}
   d75a4:	00030248 	.word	0x00030248

000d75a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d75a8:	b508      	push	{r3, lr}
   d75aa:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <HAL_RNG_GetRandomNumber+0xc>)
   d75ac:	681b      	ldr	r3, [r3, #0]
   d75ae:	685b      	ldr	r3, [r3, #4]
   d75b0:	9301      	str	r3, [sp, #4]
   d75b2:	bd08      	pop	{r3, pc}
   d75b4:	00030218 	.word	0x00030218

000d75b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d75b8:	b508      	push	{r3, lr}
   d75ba:	4b02      	ldr	r3, [pc, #8]	; (d75c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d75bc:	681b      	ldr	r3, [r3, #0]
   d75be:	695b      	ldr	r3, [r3, #20]
   d75c0:	9301      	str	r3, [sp, #4]
   d75c2:	bd08      	pop	{r3, pc}
   d75c4:	00030218 	.word	0x00030218

000d75c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d75c8:	b508      	push	{r3, lr}
   d75ca:	4b02      	ldr	r3, [pc, #8]	; (d75d4 <HAL_Pin_Map+0xc>)
   d75cc:	681b      	ldr	r3, [r3, #0]
   d75ce:	681b      	ldr	r3, [r3, #0]
   d75d0:	9301      	str	r3, [sp, #4]
   d75d2:	bd08      	pop	{r3, pc}
   d75d4:	0003022c 	.word	0x0003022c

000d75d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d75d8:	b508      	push	{r3, lr}
   d75da:	4b02      	ldr	r3, [pc, #8]	; (d75e4 <netdb_freeaddrinfo+0xc>)
   d75dc:	681b      	ldr	r3, [r3, #0]
   d75de:	689b      	ldr	r3, [r3, #8]
   d75e0:	9301      	str	r3, [sp, #4]
   d75e2:	bd08      	pop	{r3, pc}
   d75e4:	00030268 	.word	0x00030268

000d75e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d75e8:	b508      	push	{r3, lr}
   d75ea:	4b02      	ldr	r3, [pc, #8]	; (d75f4 <netdb_getaddrinfo+0xc>)
   d75ec:	681b      	ldr	r3, [r3, #0]
   d75ee:	68db      	ldr	r3, [r3, #12]
   d75f0:	9301      	str	r3, [sp, #4]
   d75f2:	bd08      	pop	{r3, pc}
   d75f4:	00030268 	.word	0x00030268

000d75f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d75f8:	b508      	push	{r3, lr}
   d75fa:	4b02      	ldr	r3, [pc, #8]	; (d7604 <spark_set_random_seed_from_cloud_handler+0xc>)
   d75fc:	681b      	ldr	r3, [r3, #0]
   d75fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7600:	9301      	str	r3, [sp, #4]
   d7602:	bd08      	pop	{r3, pc}
   d7604:	00030244 	.word	0x00030244

000d7608 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7608:	b508      	push	{r3, lr}
   d760a:	4b02      	ldr	r3, [pc, #8]	; (d7614 <network_connect+0xc>)
   d760c:	681b      	ldr	r3, [r3, #0]
   d760e:	685b      	ldr	r3, [r3, #4]
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	bd08      	pop	{r3, pc}
   d7614:	00030240 	.word	0x00030240

000d7618 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7618:	b508      	push	{r3, lr}
   d761a:	4b02      	ldr	r3, [pc, #8]	; (d7624 <network_connecting+0xc>)
   d761c:	681b      	ldr	r3, [r3, #0]
   d761e:	689b      	ldr	r3, [r3, #8]
   d7620:	9301      	str	r3, [sp, #4]
   d7622:	bd08      	pop	{r3, pc}
   d7624:	00030240 	.word	0x00030240

000d7628 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7628:	b508      	push	{r3, lr}
   d762a:	4b02      	ldr	r3, [pc, #8]	; (d7634 <network_disconnect+0xc>)
   d762c:	681b      	ldr	r3, [r3, #0]
   d762e:	68db      	ldr	r3, [r3, #12]
   d7630:	9301      	str	r3, [sp, #4]
   d7632:	bd08      	pop	{r3, pc}
   d7634:	00030240 	.word	0x00030240

000d7638 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7638:	b508      	push	{r3, lr}
   d763a:	4b02      	ldr	r3, [pc, #8]	; (d7644 <network_ready+0xc>)
   d763c:	681b      	ldr	r3, [r3, #0]
   d763e:	691b      	ldr	r3, [r3, #16]
   d7640:	9301      	str	r3, [sp, #4]
   d7642:	bd08      	pop	{r3, pc}
   d7644:	00030240 	.word	0x00030240

000d7648 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7648:	b508      	push	{r3, lr}
   d764a:	4b02      	ldr	r3, [pc, #8]	; (d7654 <network_on+0xc>)
   d764c:	681b      	ldr	r3, [r3, #0]
   d764e:	695b      	ldr	r3, [r3, #20]
   d7650:	9301      	str	r3, [sp, #4]
   d7652:	bd08      	pop	{r3, pc}
   d7654:	00030240 	.word	0x00030240

000d7658 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7658:	b508      	push	{r3, lr}
   d765a:	4b02      	ldr	r3, [pc, #8]	; (d7664 <network_off+0xc>)
   d765c:	681b      	ldr	r3, [r3, #0]
   d765e:	699b      	ldr	r3, [r3, #24]
   d7660:	9301      	str	r3, [sp, #4]
   d7662:	bd08      	pop	{r3, pc}
   d7664:	00030240 	.word	0x00030240

000d7668 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7668:	b508      	push	{r3, lr}
   d766a:	4b02      	ldr	r3, [pc, #8]	; (d7674 <network_listen+0xc>)
   d766c:	681b      	ldr	r3, [r3, #0]
   d766e:	69db      	ldr	r3, [r3, #28]
   d7670:	9301      	str	r3, [sp, #4]
   d7672:	bd08      	pop	{r3, pc}
   d7674:	00030240 	.word	0x00030240

000d7678 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7678:	b508      	push	{r3, lr}
   d767a:	4b02      	ldr	r3, [pc, #8]	; (d7684 <network_listening+0xc>)
   d767c:	681b      	ldr	r3, [r3, #0]
   d767e:	6a1b      	ldr	r3, [r3, #32]
   d7680:	9301      	str	r3, [sp, #4]
   d7682:	bd08      	pop	{r3, pc}
   d7684:	00030240 	.word	0x00030240

000d7688 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7688:	b508      	push	{r3, lr}
   d768a:	4b02      	ldr	r3, [pc, #8]	; (d7694 <network_set_listen_timeout+0xc>)
   d768c:	681b      	ldr	r3, [r3, #0]
   d768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7690:	9301      	str	r3, [sp, #4]
   d7692:	bd08      	pop	{r3, pc}
   d7694:	00030240 	.word	0x00030240

000d7698 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7698:	b508      	push	{r3, lr}
   d769a:	4b02      	ldr	r3, [pc, #8]	; (d76a4 <network_get_listen_timeout+0xc>)
   d769c:	681b      	ldr	r3, [r3, #0]
   d769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d76a0:	9301      	str	r3, [sp, #4]
   d76a2:	bd08      	pop	{r3, pc}
   d76a4:	00030240 	.word	0x00030240

000d76a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d76a8:	b508      	push	{r3, lr}
   d76aa:	4b02      	ldr	r3, [pc, #8]	; (d76b4 <set_system_mode+0xc>)
   d76ac:	681b      	ldr	r3, [r3, #0]
   d76ae:	685b      	ldr	r3, [r3, #4]
   d76b0:	9301      	str	r3, [sp, #4]
   d76b2:	bd08      	pop	{r3, pc}
   d76b4:	00030220 	.word	0x00030220

000d76b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d76b8:	b508      	push	{r3, lr}
   d76ba:	4b03      	ldr	r3, [pc, #12]	; (d76c8 <system_ctrl_set_app_request_handler+0x10>)
   d76bc:	681b      	ldr	r3, [r3, #0]
   d76be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d76c2:	9301      	str	r3, [sp, #4]
   d76c4:	bd08      	pop	{r3, pc}
   d76c6:	0000      	.short	0x0000
   d76c8:	00030220 	.word	0x00030220

000d76cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d76cc:	b508      	push	{r3, lr}
   d76ce:	4b03      	ldr	r3, [pc, #12]	; (d76dc <system_ctrl_set_result+0x10>)
   d76d0:	681b      	ldr	r3, [r3, #0]
   d76d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d76d6:	9301      	str	r3, [sp, #4]
   d76d8:	bd08      	pop	{r3, pc}
   d76da:	0000      	.short	0x0000
   d76dc:	00030220 	.word	0x00030220

000d76e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <malloc+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	681b      	ldr	r3, [r3, #0]
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	0003021c 	.word	0x0003021c

000d76f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <free+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	685b      	ldr	r3, [r3, #4]
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	0003021c 	.word	0x0003021c

000d7700 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <vsnprintf+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	0003021c 	.word	0x0003021c

000d7710 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7710:	2300      	movs	r3, #0
   d7712:	461a      	mov	r2, r3
   d7714:	6840      	ldr	r0, [r0, #4]
   d7716:	f7ff bf77 	b.w	d7608 <network_connect>

000d771a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d771a:	2200      	movs	r2, #0
   d771c:	2102      	movs	r1, #2
   d771e:	6840      	ldr	r0, [r0, #4]
   d7720:	f7ff bf82 	b.w	d7628 <network_disconnect>

000d7724 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7724:	2200      	movs	r2, #0
   d7726:	4611      	mov	r1, r2
   d7728:	6840      	ldr	r0, [r0, #4]
   d772a:	f7ff bf75 	b.w	d7618 <network_connecting>

000d772e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d772e:	2200      	movs	r2, #0
   d7730:	4611      	mov	r1, r2
   d7732:	6840      	ldr	r0, [r0, #4]
   d7734:	f7ff bf80 	b.w	d7638 <network_ready>

000d7738 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7738:	2300      	movs	r3, #0
   d773a:	461a      	mov	r2, r3
   d773c:	4619      	mov	r1, r3
   d773e:	6840      	ldr	r0, [r0, #4]
   d7740:	f7ff bf82 	b.w	d7648 <network_on>

000d7744 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7744:	2300      	movs	r3, #0
   d7746:	461a      	mov	r2, r3
   d7748:	4619      	mov	r1, r3
   d774a:	6840      	ldr	r0, [r0, #4]
   d774c:	f7ff bf84 	b.w	d7658 <network_off>

000d7750 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7750:	2200      	movs	r2, #0
   d7752:	f081 0101 	eor.w	r1, r1, #1
   d7756:	6840      	ldr	r0, [r0, #4]
   d7758:	f7ff bf86 	b.w	d7668 <network_listen>

000d775c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d775c:	2200      	movs	r2, #0
   d775e:	6840      	ldr	r0, [r0, #4]
   d7760:	f7ff bf92 	b.w	d7688 <network_set_listen_timeout>

000d7764 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7764:	2200      	movs	r2, #0
   d7766:	4611      	mov	r1, r2
   d7768:	6840      	ldr	r0, [r0, #4]
   d776a:	f7ff bf95 	b.w	d7698 <network_get_listen_timeout>

000d776e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d776e:	2200      	movs	r2, #0
   d7770:	4611      	mov	r1, r2
   d7772:	6840      	ldr	r0, [r0, #4]
   d7774:	f7ff bf80 	b.w	d7678 <network_listening>

000d7778 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d777c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d777e:	b095      	sub	sp, #84	; 0x54
   d7780:	4616      	mov	r6, r2
   d7782:	460d      	mov	r5, r1
   d7784:	4607      	mov	r7, r0
    IPAddress addr;
   d7786:	f000 faad 	bl	d7ce4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d778a:	4621      	mov	r1, r4
   d778c:	2220      	movs	r2, #32
   d778e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7790:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7792:	f001 f9d4 	bl	d8b3e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7796:	2340      	movs	r3, #64	; 0x40
   d7798:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d779a:	4621      	mov	r1, r4
   d779c:	466b      	mov	r3, sp
   d779e:	aa0c      	add	r2, sp, #48	; 0x30
   d77a0:	4630      	mov	r0, r6
   d77a2:	f7ff ff21 	bl	d75e8 <netdb_getaddrinfo>
    if (!r) {
   d77a6:	4604      	mov	r4, r0
   d77a8:	2800      	cmp	r0, #0
   d77aa:	d144      	bne.n	d7836 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77ac:	4602      	mov	r2, r0
   d77ae:	2101      	movs	r1, #1
   d77b0:	6868      	ldr	r0, [r5, #4]
   d77b2:	f7ff ff41 	bl	d7638 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77b6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77b8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77ba:	4622      	mov	r2, r4
   d77bc:	6868      	ldr	r0, [r5, #4]
   d77be:	f7ff ff3b 	bl	d7638 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77c2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77c4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d77c6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77c8:	2e00      	cmp	r6, #0
   d77ca:	d034      	beq.n	d7836 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d77cc:	2900      	cmp	r1, #0
   d77ce:	d132      	bne.n	d7836 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d77d0:	6873      	ldr	r3, [r6, #4]
   d77d2:	2b02      	cmp	r3, #2
   d77d4:	d002      	beq.n	d77dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d77d6:	2b0a      	cmp	r3, #10
   d77d8:	d009      	beq.n	d77ee <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d77da:	e02a      	b.n	d7832 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d77dc:	f1b8 0f00 	cmp.w	r8, #0
   d77e0:	d027      	beq.n	d7832 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d77e2:	6971      	ldr	r1, [r6, #20]
   d77e4:	4638      	mov	r0, r7
   d77e6:	3104      	adds	r1, #4
   d77e8:	f000 faa9 	bl	d7d3e <_ZN9IPAddressaSEPKh>
   d77ec:	e020      	b.n	d7830 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d77ee:	f1b9 0f00 	cmp.w	r9, #0
   d77f2:	d01e      	beq.n	d7832 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d77f4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d77f6:	2211      	movs	r2, #17
   d77f8:	a801      	add	r0, sp, #4
   d77fa:	f001 f9a0 	bl	d8b3e <memset>
                    a.v = 6;
   d77fe:	2306      	movs	r3, #6
   d7800:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7804:	ad01      	add	r5, sp, #4
   d7806:	f104 0308 	add.w	r3, r4, #8
   d780a:	3418      	adds	r4, #24
   d780c:	6818      	ldr	r0, [r3, #0]
   d780e:	6859      	ldr	r1, [r3, #4]
   d7810:	462a      	mov	r2, r5
   d7812:	c203      	stmia	r2!, {r0, r1}
   d7814:	3308      	adds	r3, #8
   d7816:	42a3      	cmp	r3, r4
   d7818:	4615      	mov	r5, r2
   d781a:	d1f7      	bne.n	d780c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d781c:	a901      	add	r1, sp, #4
   d781e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7820:	ad07      	add	r5, sp, #28
   d7822:	f000 fa6d 	bl	d7d00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7828:	1d3c      	adds	r4, r7, #4
   d782a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d782c:	682b      	ldr	r3, [r5, #0]
   d782e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7830:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7832:	69f6      	ldr	r6, [r6, #28]
   d7834:	e7c8      	b.n	d77c8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7836:	9800      	ldr	r0, [sp, #0]
   d7838:	f7ff fece 	bl	d75d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d783c:	4638      	mov	r0, r7
   d783e:	b015      	add	sp, #84	; 0x54
   d7840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7844 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7844:	4b02      	ldr	r3, [pc, #8]	; (d7850 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7846:	4a03      	ldr	r2, [pc, #12]	; (d7854 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7848:	601a      	str	r2, [r3, #0]
   d784a:	2200      	movs	r2, #0
   d784c:	605a      	str	r2, [r3, #4]
   d784e:	4770      	bx	lr
   d7850:	2003e3f8 	.word	0x2003e3f8
   d7854:	000d9110 	.word	0x000d9110

000d7858 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7858:	2200      	movs	r2, #0
   d785a:	4611      	mov	r1, r2
   d785c:	6840      	ldr	r0, [r0, #4]
   d785e:	f7ff beeb 	b.w	d7638 <network_ready>

000d7862 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7862:	2200      	movs	r2, #0
   d7864:	4611      	mov	r1, r2
   d7866:	6840      	ldr	r0, [r0, #4]
   d7868:	f7ff bf06 	b.w	d7678 <network_listening>

000d786c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d786c:	2200      	movs	r2, #0
   d786e:	4611      	mov	r1, r2
   d7870:	6840      	ldr	r0, [r0, #4]
   d7872:	f7ff bf11 	b.w	d7698 <network_get_listen_timeout>

000d7876 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7876:	2200      	movs	r2, #0
   d7878:	6840      	ldr	r0, [r0, #4]
   d787a:	f7ff bf05 	b.w	d7688 <network_set_listen_timeout>

000d787e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d787e:	2200      	movs	r2, #0
   d7880:	f081 0101 	eor.w	r1, r1, #1
   d7884:	6840      	ldr	r0, [r0, #4]
   d7886:	f7ff beef 	b.w	d7668 <network_listen>

000d788a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d788a:	2300      	movs	r3, #0
   d788c:	461a      	mov	r2, r3
   d788e:	4619      	mov	r1, r3
   d7890:	6840      	ldr	r0, [r0, #4]
   d7892:	f7ff bee1 	b.w	d7658 <network_off>

000d7896 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7896:	2300      	movs	r3, #0
   d7898:	461a      	mov	r2, r3
   d789a:	4619      	mov	r1, r3
   d789c:	6840      	ldr	r0, [r0, #4]
   d789e:	f7ff bed3 	b.w	d7648 <network_on>

000d78a2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d78a2:	2200      	movs	r2, #0
   d78a4:	4611      	mov	r1, r2
   d78a6:	6840      	ldr	r0, [r0, #4]
   d78a8:	f7ff beb6 	b.w	d7618 <network_connecting>

000d78ac <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d78ac:	2200      	movs	r2, #0
   d78ae:	2102      	movs	r1, #2
   d78b0:	6840      	ldr	r0, [r0, #4]
   d78b2:	f7ff beb9 	b.w	d7628 <network_disconnect>

000d78b6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d78b6:	2300      	movs	r3, #0
   d78b8:	461a      	mov	r2, r3
   d78ba:	6840      	ldr	r0, [r0, #4]
   d78bc:	f7ff bea4 	b.w	d7608 <network_connect>

000d78c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d78c0:	4b02      	ldr	r3, [pc, #8]	; (d78cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d78c2:	2204      	movs	r2, #4
   d78c4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d78c6:	4a02      	ldr	r2, [pc, #8]	; (d78d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d78c8:	601a      	str	r2, [r3, #0]
   d78ca:	4770      	bx	lr
   d78cc:	2003e400 	.word	0x2003e400
   d78d0:	000d9144 	.word	0x000d9144

000d78d4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d78d4:	2200      	movs	r2, #0
   d78d6:	4611      	mov	r1, r2
   d78d8:	6840      	ldr	r0, [r0, #4]
   d78da:	f7ff becd 	b.w	d7678 <network_listening>

000d78de <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d78de:	2200      	movs	r2, #0
   d78e0:	4611      	mov	r1, r2
   d78e2:	6840      	ldr	r0, [r0, #4]
   d78e4:	f7ff bed8 	b.w	d7698 <network_get_listen_timeout>

000d78e8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d78e8:	2200      	movs	r2, #0
   d78ea:	6840      	ldr	r0, [r0, #4]
   d78ec:	f7ff becc 	b.w	d7688 <network_set_listen_timeout>

000d78f0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d78f0:	2200      	movs	r2, #0
   d78f2:	f081 0101 	eor.w	r1, r1, #1
   d78f6:	6840      	ldr	r0, [r0, #4]
   d78f8:	f7ff beb6 	b.w	d7668 <network_listen>

000d78fc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d78fc:	2300      	movs	r3, #0
   d78fe:	461a      	mov	r2, r3
   d7900:	2101      	movs	r1, #1
   d7902:	6840      	ldr	r0, [r0, #4]
   d7904:	f7ff bea8 	b.w	d7658 <network_off>

000d7908 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7908:	2300      	movs	r3, #0
   d790a:	461a      	mov	r2, r3
   d790c:	4619      	mov	r1, r3
   d790e:	6840      	ldr	r0, [r0, #4]
   d7910:	f7ff be9a 	b.w	d7648 <network_on>

000d7914 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7914:	2200      	movs	r2, #0
   d7916:	4611      	mov	r1, r2
   d7918:	6840      	ldr	r0, [r0, #4]
   d791a:	f7ff be8d 	b.w	d7638 <network_ready>

000d791e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d791e:	2200      	movs	r2, #0
   d7920:	4611      	mov	r1, r2
   d7922:	6840      	ldr	r0, [r0, #4]
   d7924:	f7ff be78 	b.w	d7618 <network_connecting>

000d7928 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7928:	2200      	movs	r2, #0
   d792a:	2102      	movs	r1, #2
   d792c:	6840      	ldr	r0, [r0, #4]
   d792e:	f7ff be7b 	b.w	d7628 <network_disconnect>

000d7932 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7932:	2300      	movs	r3, #0
   d7934:	461a      	mov	r2, r3
   d7936:	6840      	ldr	r0, [r0, #4]
   d7938:	f7ff be66 	b.w	d7608 <network_connect>

000d793c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d793c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d793e:	4605      	mov	r5, r0
   d7940:	b188      	cbz	r0, d7966 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7942:	6804      	ldr	r4, [r0, #0]
   d7944:	b14c      	cbz	r4, d795a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7946:	68a3      	ldr	r3, [r4, #8]
   d7948:	b11b      	cbz	r3, d7952 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d794a:	2203      	movs	r2, #3
   d794c:	4621      	mov	r1, r4
   d794e:	4620      	mov	r0, r4
   d7950:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7952:	2110      	movs	r1, #16
   d7954:	4620      	mov	r0, r4
   d7956:	f000 fbc4 	bl	d80e2 <_ZdlPvj>
   d795a:	4628      	mov	r0, r5
   d795c:	2114      	movs	r1, #20
      }
   d795e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7962:	f000 bbbe 	b.w	d80e2 <_ZdlPvj>
   d7966:	bd38      	pop	{r3, r4, r5, pc}

000d7968 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7968:	b110      	cbz	r0, d7970 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d796a:	6803      	ldr	r3, [r0, #0]
   d796c:	685b      	ldr	r3, [r3, #4]
   d796e:	4718      	bx	r3
   d7970:	4770      	bx	lr

000d7972 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7972:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7974:	6803      	ldr	r3, [r0, #0]
   d7976:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7978:	b1bb      	cbz	r3, d79aa <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d797a:	6858      	ldr	r0, [r3, #4]
   d797c:	f7ff fdec 	bl	d7558 <os_thread_is_current>
   d7980:	b978      	cbnz	r0, d79a2 <_ZN6ThreadD1Ev+0x30>
   d7982:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7984:	7c5a      	ldrb	r2, [r3, #17]
   d7986:	b912      	cbnz	r2, d798e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7988:	6858      	ldr	r0, [r3, #4]
   d798a:	f7ff fded 	bl	d7568 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d798e:	6823      	ldr	r3, [r4, #0]
   d7990:	6858      	ldr	r0, [r3, #4]
   d7992:	f7ff fdf1 	bl	d7578 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7996:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7998:	2300      	movs	r3, #0
   d799a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d799c:	b128      	cbz	r0, d79aa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d799e:	f7ff ffcd 	bl	d793c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79a2:	6820      	ldr	r0, [r4, #0]
   d79a4:	b108      	cbz	r0, d79aa <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d79a6:	f7ff ffc9 	bl	d793c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d79aa:	4620      	mov	r0, r4
   d79ac:	bd10      	pop	{r4, pc}

000d79ae <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d79ae:	b538      	push	{r3, r4, r5, lr}
   d79b0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79b2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d79b6:	b108      	cbz	r0, d79bc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d79b8:	f7fc fb6f 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d79bc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d79c0:	b108      	cbz	r0, d79c6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d79c2:	f7ff fde9 	bl	d7598 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79c6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d79ca:	b135      	cbz	r5, d79da <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d79cc:	4628      	mov	r0, r5
   d79ce:	f7ff ffd0 	bl	d7972 <_ZN6ThreadD1Ev>
   d79d2:	2104      	movs	r1, #4
   d79d4:	4628      	mov	r0, r5
   d79d6:	f000 fb84 	bl	d80e2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79da:	6820      	ldr	r0, [r4, #0]
   d79dc:	b108      	cbz	r0, d79e2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d79de:	f7ff ffc3 	bl	d7968 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d79e2:	4620      	mov	r0, r4
   d79e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d79e8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d79e8:	b510      	push	{r4, lr}
   d79ea:	4b04      	ldr	r3, [pc, #16]	; (d79fc <_ZN5spark9MeshClassD1Ev+0x14>)
   d79ec:	4604      	mov	r4, r0
   d79ee:	f840 3b08 	str.w	r3, [r0], #8
   d79f2:	f7ff ffdc 	bl	d79ae <_ZN5spark11MeshPublishD1Ev>
   d79f6:	4620      	mov	r0, r4
   d79f8:	bd10      	pop	{r4, pc}
   d79fa:	bf00      	nop
   d79fc:	000d9178 	.word	0x000d9178

000d7a00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7a00:	b538      	push	{r3, r4, r5, lr}
   d7a02:	4c0e      	ldr	r4, [pc, #56]	; (d7a3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7a04:	4b0e      	ldr	r3, [pc, #56]	; (d7a40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7a06:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7a08:	2500      	movs	r5, #0
   d7a0a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7a0c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7a10:	6063      	str	r3, [r4, #4]
   d7a12:	60a5      	str	r5, [r4, #8]
   d7a14:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7a18:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7a1c:	f7ff fdb4 	bl	d7588 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7a20:	4b08      	ldr	r3, [pc, #32]	; (d7a44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7a22:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7a26:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7a2a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	4a06      	ldr	r2, [pc, #24]	; (d7a48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7a30:	4906      	ldr	r1, [pc, #24]	; (d7a4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7a36:	f000 bb4f 	b.w	d80d8 <__aeabi_atexit>
   d7a3a:	bf00      	nop
   d7a3c:	2003e408 	.word	0x2003e408
   d7a40:	000d9110 	.word	0x000d9110
   d7a44:	000d9178 	.word	0x000d9178
   d7a48:	2003dd78 	.word	0x2003dd78
   d7a4c:	000d79e9 	.word	0x000d79e9

000d7a50 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7a50:	4770      	bx	lr

000d7a52 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a52:	7441      	strb	r1, [r0, #17]
   d7a54:	4770      	bx	lr

000d7a56 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7a56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7a58:	7c00      	ldrb	r0, [r0, #16]
   d7a5a:	f7ff fd6d 	bl	d7538 <HAL_USART_Available_Data_For_Write>
}
   d7a5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a62:	bd08      	pop	{r3, pc}

000d7a64 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7a64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7a66:	7c00      	ldrb	r0, [r0, #16]
   d7a68:	f7ff fd46 	bl	d74f8 <HAL_USART_Available_Data>
}
   d7a6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a70:	bd08      	pop	{r3, pc}

000d7a72 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7a72:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7a74:	7c00      	ldrb	r0, [r0, #16]
   d7a76:	f7ff fd4f 	bl	d7518 <HAL_USART_Peek_Data>
}
   d7a7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a7e:	bf28      	it	cs
   d7a80:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a84:	bd08      	pop	{r3, pc}

000d7a86 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7a88:	7c00      	ldrb	r0, [r0, #16]
   d7a8a:	f7ff fd3d 	bl	d7508 <HAL_USART_Read_Data>
}
   d7a8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a92:	bf28      	it	cs
   d7a94:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a98:	bd08      	pop	{r3, pc}

000d7a9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7a9a:	7c00      	ldrb	r0, [r0, #16]
   d7a9c:	f7ff bd44 	b.w	d7528 <HAL_USART_Flush_Data>

000d7aa0 <_ZN11USARTSerialD0Ev>:
   d7aa0:	b510      	push	{r4, lr}
   d7aa2:	2114      	movs	r1, #20
   d7aa4:	4604      	mov	r4, r0
   d7aa6:	f000 fb1c 	bl	d80e2 <_ZdlPvj>
   d7aaa:	4620      	mov	r0, r4
   d7aac:	bd10      	pop	{r4, pc}

000d7aae <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7aae:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7ab0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7ab2:	4604      	mov	r4, r0
   d7ab4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7ab6:	b925      	cbnz	r5, d7ac2 <_ZN11USARTSerial5writeEh+0x14>
   d7ab8:	7c00      	ldrb	r0, [r0, #16]
   d7aba:	f7ff fd3d 	bl	d7538 <HAL_USART_Available_Data_For_Write>
   d7abe:	2800      	cmp	r0, #0
   d7ac0:	dd05      	ble.n	d7ace <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7ac2:	4631      	mov	r1, r6
   d7ac4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7aca:	f7ff bd0d 	b.w	d74e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7ace:	4628      	mov	r0, r5
   d7ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7ad4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7ad4:	b510      	push	{r4, lr}
   d7ad6:	4604      	mov	r4, r0
   d7ad8:	4608      	mov	r0, r1
   d7ada:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7adc:	2200      	movs	r2, #0
   d7ade:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ae4:	60a2      	str	r2, [r4, #8]
   d7ae6:	4a05      	ldr	r2, [pc, #20]	; (d7afc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7ae8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7aea:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7aec:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7aee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7af0:	461a      	mov	r2, r3
   d7af2:	f7ff fcf1 	bl	d74d8 <HAL_USART_Init>
}
   d7af6:	4620      	mov	r0, r4
   d7af8:	bd10      	pop	{r4, pc}
   d7afa:	bf00      	nop
   d7afc:	000d91ac 	.word	0x000d91ac

000d7b00 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7b00:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7b02:	4d0c      	ldr	r5, [pc, #48]	; (d7b34 <_Z22__fetch_global_Serial1v+0x34>)
   d7b04:	6829      	ldr	r1, [r5, #0]
   d7b06:	f011 0401 	ands.w	r4, r1, #1
   d7b0a:	d111      	bne.n	d7b30 <_Z22__fetch_global_Serial1v+0x30>
   d7b0c:	4628      	mov	r0, r5
   d7b0e:	f7fc fac6 	bl	d409e <__cxa_guard_acquire>
   d7b12:	b168      	cbz	r0, d7b30 <_Z22__fetch_global_Serial1v+0x30>
   d7b14:	4a08      	ldr	r2, [pc, #32]	; (d7b38 <_Z22__fetch_global_Serial1v+0x38>)
   d7b16:	4b09      	ldr	r3, [pc, #36]	; (d7b3c <_Z22__fetch_global_Serial1v+0x3c>)
   d7b18:	4809      	ldr	r0, [pc, #36]	; (d7b40 <_Z22__fetch_global_Serial1v+0x40>)
   d7b1a:	4621      	mov	r1, r4
   d7b1c:	f7ff ffda 	bl	d7ad4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7b20:	4628      	mov	r0, r5
   d7b22:	f7fc fac1 	bl	d40a8 <__cxa_guard_release>
   d7b26:	4a07      	ldr	r2, [pc, #28]	; (d7b44 <_Z22__fetch_global_Serial1v+0x44>)
   d7b28:	4907      	ldr	r1, [pc, #28]	; (d7b48 <_Z22__fetch_global_Serial1v+0x48>)
   d7b2a:	4805      	ldr	r0, [pc, #20]	; (d7b40 <_Z22__fetch_global_Serial1v+0x40>)
   d7b2c:	f000 fad4 	bl	d80d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7b30:	4803      	ldr	r0, [pc, #12]	; (d7b40 <_Z22__fetch_global_Serial1v+0x40>)
   d7b32:	bd38      	pop	{r3, r4, r5, pc}
   d7b34:	2003e674 	.word	0x2003e674
   d7b38:	2003e678 	.word	0x2003e678
   d7b3c:	2003e5f0 	.word	0x2003e5f0
   d7b40:	2003e5dc 	.word	0x2003e5dc
   d7b44:	2003dd78 	.word	0x2003dd78
   d7b48:	000d7a51 	.word	0x000d7a51

000d7b4c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7b4c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7b4e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7b50:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7b52:	b113      	cbz	r3, d7b5a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b54:	2203      	movs	r2, #3
   d7b56:	4601      	mov	r1, r0
   d7b58:	4798      	blx	r3
    }
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	bd10      	pop	{r4, pc}

000d7b5e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b5e:	7441      	strb	r1, [r0, #17]
   d7b60:	4770      	bx	lr

000d7b62 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b62:	4770      	bx	lr

000d7b64 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7b64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b66:	2100      	movs	r1, #0
   d7b68:	7c00      	ldrb	r0, [r0, #16]
   d7b6a:	f7ff fc9d 	bl	d74a8 <HAL_USB_USART_Receive_Data>
}
   d7b6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b72:	bf28      	it	cs
   d7b74:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b78:	bd08      	pop	{r3, pc}

000d7b7a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7b7a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b7c:	2101      	movs	r1, #1
   d7b7e:	7c00      	ldrb	r0, [r0, #16]
   d7b80:	f7ff fc92 	bl	d74a8 <HAL_USB_USART_Receive_Data>
}
   d7b84:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b88:	bf28      	it	cs
   d7b8a:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b8e:	bd08      	pop	{r3, pc}

000d7b90 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7b90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7b92:	7c00      	ldrb	r0, [r0, #16]
   d7b94:	f7ff fc80 	bl	d7498 <HAL_USB_USART_Available_Data_For_Write>
}
   d7b98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b9c:	bd08      	pop	{r3, pc}

000d7b9e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7b9e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7ba0:	7c00      	ldrb	r0, [r0, #16]
   d7ba2:	f7ff fc71 	bl	d7488 <HAL_USB_USART_Available_Data>
}
   d7ba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7baa:	bd08      	pop	{r3, pc}

000d7bac <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7bac:	7c00      	ldrb	r0, [r0, #16]
   d7bae:	f7ff bc8b 	b.w	d74c8 <HAL_USB_USART_Flush_Data>

000d7bb2 <_ZN9USBSerialD0Ev>:
   d7bb2:	b510      	push	{r4, lr}
   d7bb4:	2114      	movs	r1, #20
   d7bb6:	4604      	mov	r4, r0
   d7bb8:	f000 fa93 	bl	d80e2 <_ZdlPvj>
   d7bbc:	4620      	mov	r0, r4
   d7bbe:	bd10      	pop	{r4, pc}

000d7bc0 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7bc0:	b538      	push	{r3, r4, r5, lr}
   d7bc2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7bc4:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7bc6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7bc8:	f7ff fc66 	bl	d7498 <HAL_USB_USART_Available_Data_For_Write>
   d7bcc:	2800      	cmp	r0, #0
   d7bce:	dc01      	bgt.n	d7bd4 <_ZN9USBSerial5writeEh+0x14>
   d7bd0:	7c60      	ldrb	r0, [r4, #17]
   d7bd2:	b128      	cbz	r0, d7be0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7bd4:	4629      	mov	r1, r5
   d7bd6:	7c20      	ldrb	r0, [r4, #16]
   d7bd8:	f7ff fc6e 	bl	d74b8 <HAL_USB_USART_Send_Data>
   d7bdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7be0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7be4:	b510      	push	{r4, lr}
   d7be6:	4604      	mov	r4, r0
   d7be8:	2300      	movs	r3, #0
   d7bea:	6063      	str	r3, [r4, #4]
   d7bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7bf0:	60a3      	str	r3, [r4, #8]
   d7bf2:	4b05      	ldr	r3, [pc, #20]	; (d7c08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7bf4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7bf6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7bf8:	4608      	mov	r0, r1
{
  _serial = serial;
   d7bfa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7bfc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7bfe:	4611      	mov	r1, r2
   d7c00:	f7ff fc32 	bl	d7468 <HAL_USB_USART_Init>
}
   d7c04:	4620      	mov	r0, r4
   d7c06:	bd10      	pop	{r4, pc}
   d7c08:	000d91dc 	.word	0x000d91dc

000d7c0c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7c0c:	2200      	movs	r2, #0
   d7c0e:	7c00      	ldrb	r0, [r0, #16]
   d7c10:	f7ff bc32 	b.w	d7478 <HAL_USB_USART_Begin>

000d7c14 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7c16:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c18:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7c1a:	2100      	movs	r1, #0
   d7c1c:	f000 ff8f 	bl	d8b3e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7c20:	4620      	mov	r0, r4
   d7c22:	bd10      	pop	{r4, pc}

000d7c24 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7c24:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c26:	4d0e      	ldr	r5, [pc, #56]	; (d7c60 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7c28:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7c2a:	a801      	add	r0, sp, #4
   d7c2c:	f7ff fff2 	bl	d7c14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c30:	6829      	ldr	r1, [r5, #0]
   d7c32:	f011 0401 	ands.w	r4, r1, #1
   d7c36:	d110      	bne.n	d7c5a <_Z16_fetch_usbserialv+0x36>
   d7c38:	4628      	mov	r0, r5
   d7c3a:	f7fc fa30 	bl	d409e <__cxa_guard_acquire>
   d7c3e:	b160      	cbz	r0, d7c5a <_Z16_fetch_usbserialv+0x36>
   d7c40:	aa01      	add	r2, sp, #4
   d7c42:	4621      	mov	r1, r4
   d7c44:	4807      	ldr	r0, [pc, #28]	; (d7c64 <_Z16_fetch_usbserialv+0x40>)
   d7c46:	f7ff ffcd 	bl	d7be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c4a:	4628      	mov	r0, r5
   d7c4c:	f7fc fa2c 	bl	d40a8 <__cxa_guard_release>
   d7c50:	4a05      	ldr	r2, [pc, #20]	; (d7c68 <_Z16_fetch_usbserialv+0x44>)
   d7c52:	4906      	ldr	r1, [pc, #24]	; (d7c6c <_Z16_fetch_usbserialv+0x48>)
   d7c54:	4803      	ldr	r0, [pc, #12]	; (d7c64 <_Z16_fetch_usbserialv+0x40>)
   d7c56:	f000 fa3f 	bl	d80d8 <__aeabi_atexit>
	return _usbserial;
}
   d7c5a:	4802      	ldr	r0, [pc, #8]	; (d7c64 <_Z16_fetch_usbserialv+0x40>)
   d7c5c:	b007      	add	sp, #28
   d7c5e:	bd30      	pop	{r4, r5, pc}
   d7c60:	2003e6fc 	.word	0x2003e6fc
   d7c64:	2003e700 	.word	0x2003e700
   d7c68:	2003dd78 	.word	0x2003dd78
   d7c6c:	000d7b63 	.word	0x000d7b63

000d7c70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7c70:	4770      	bx	lr

000d7c72 <_ZN9IPAddressD0Ev>:
   d7c72:	b510      	push	{r4, lr}
   d7c74:	2118      	movs	r1, #24
   d7c76:	4604      	mov	r4, r0
   d7c78:	f000 fa33 	bl	d80e2 <_ZdlPvj>
   d7c7c:	4620      	mov	r0, r4
   d7c7e:	bd10      	pop	{r4, pc}

000d7c80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7c80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c82:	7d03      	ldrb	r3, [r0, #20]
   d7c84:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7c86:	b08d      	sub	sp, #52	; 0x34
   d7c88:	460e      	mov	r6, r1
   d7c8a:	f100 0704 	add.w	r7, r0, #4
   d7c8e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c92:	d002      	beq.n	d7c9a <_ZNK9IPAddress7printToER5Print+0x1a>
   d7c94:	f100 0508 	add.w	r5, r0, #8
   d7c98:	e018      	b.n	d7ccc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c9a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c9c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c9e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7ca2:	232f      	movs	r3, #47	; 0x2f
   d7ca4:	462a      	mov	r2, r5
   d7ca6:	200a      	movs	r0, #10
   d7ca8:	f7ff fc4e 	bl	d7548 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7cac:	4628      	mov	r0, r5
   d7cae:	f000 ff77 	bl	d8ba0 <strlen>
   d7cb2:	6833      	ldr	r3, [r6, #0]
   d7cb4:	4602      	mov	r2, r0
   d7cb6:	68db      	ldr	r3, [r3, #12]
   d7cb8:	4629      	mov	r1, r5
   d7cba:	4630      	mov	r0, r6
   d7cbc:	4798      	blx	r3
   d7cbe:	e00f      	b.n	d7ce0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7cc0:	b124      	cbz	r4, d7ccc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7cc2:	212e      	movs	r1, #46	; 0x2e
   d7cc4:	4630      	mov	r0, r6
   d7cc6:	f000 f919 	bl	d7efc <_ZN5Print5printEc>
   d7cca:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7ccc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7cd0:	220a      	movs	r2, #10
   d7cd2:	4630      	mov	r0, r6
   d7cd4:	f000 f921 	bl	d7f1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7cd8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7cda:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7cdc:	d1f0      	bne.n	d7cc0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7cde:	4620      	mov	r0, r4
    }
    return n;
}
   d7ce0:	b00d      	add	sp, #52	; 0x34
   d7ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ce4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7ce4:	b510      	push	{r4, lr}
   d7ce6:	4b05      	ldr	r3, [pc, #20]	; (d7cfc <_ZN9IPAddressC1Ev+0x18>)
   d7ce8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7cea:	2211      	movs	r2, #17
   d7cec:	f840 3b04 	str.w	r3, [r0], #4
   d7cf0:	2100      	movs	r1, #0
   d7cf2:	f000 ff24 	bl	d8b3e <memset>
{
    clear();
}
   d7cf6:	4620      	mov	r0, r4
   d7cf8:	bd10      	pop	{r4, pc}
   d7cfa:	bf00      	nop
   d7cfc:	000d920c 	.word	0x000d920c

000d7d00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7d00:	4603      	mov	r3, r0
   d7d02:	4a07      	ldr	r2, [pc, #28]	; (d7d20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7d04:	b510      	push	{r4, lr}
   d7d06:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7d0a:	f101 0210 	add.w	r2, r1, #16
   d7d0e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7d12:	f843 4b04 	str.w	r4, [r3], #4
   d7d16:	4291      	cmp	r1, r2
   d7d18:	d1f9      	bne.n	d7d0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7d1a:	780a      	ldrb	r2, [r1, #0]
   d7d1c:	701a      	strb	r2, [r3, #0]
}
   d7d1e:	bd10      	pop	{r4, pc}
   d7d20:	000d920c 	.word	0x000d920c

000d7d24 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7d24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7d26:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7d2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7d2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7d32:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7d36:	2304      	movs	r3, #4
   d7d38:	6041      	str	r1, [r0, #4]
   d7d3a:	7503      	strb	r3, [r0, #20]
   d7d3c:	bd10      	pop	{r4, pc}

000d7d3e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7d3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7d40:	780d      	ldrb	r5, [r1, #0]
   d7d42:	788b      	ldrb	r3, [r1, #2]
   d7d44:	784a      	ldrb	r2, [r1, #1]
   d7d46:	78c9      	ldrb	r1, [r1, #3]
   d7d48:	9100      	str	r1, [sp, #0]
   d7d4a:	4629      	mov	r1, r5
   d7d4c:	f7ff ffea 	bl	d7d24 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7d50:	b003      	add	sp, #12
   d7d52:	bd30      	pop	{r4, r5, pc}

000d7d54 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7d54:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7d56:	4b0c      	ldr	r3, [pc, #48]	; (d7d88 <serialEventRun+0x34>)
   d7d58:	b133      	cbz	r3, d7d68 <serialEventRun+0x14>
   d7d5a:	f7ff ff63 	bl	d7c24 <_Z16_fetch_usbserialv>
   d7d5e:	6803      	ldr	r3, [r0, #0]
   d7d60:	691b      	ldr	r3, [r3, #16]
   d7d62:	4798      	blx	r3
   d7d64:	2800      	cmp	r0, #0
   d7d66:	dc09      	bgt.n	d7d7c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7d68:	4b08      	ldr	r3, [pc, #32]	; (d7d8c <serialEventRun+0x38>)
   d7d6a:	b163      	cbz	r3, d7d86 <serialEventRun+0x32>
   d7d6c:	f7ff fec8 	bl	d7b00 <_Z22__fetch_global_Serial1v>
   d7d70:	6803      	ldr	r3, [r0, #0]
   d7d72:	691b      	ldr	r3, [r3, #16]
   d7d74:	4798      	blx	r3
   d7d76:	2800      	cmp	r0, #0
   d7d78:	dc03      	bgt.n	d7d82 <serialEventRun+0x2e>
   d7d7a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7d7c:	f3af 8000 	nop.w
   d7d80:	e7f2      	b.n	d7d68 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7d82:	f3af 8000 	nop.w
   d7d86:	bd08      	pop	{r3, pc}
	...

000d7d90 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7d90:	b508      	push	{r3, lr}
	serialEventRun();
   d7d92:	f7ff ffdf 	bl	d7d54 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7d96:	f7ff fc0f 	bl	d75b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7d9a:	4b01      	ldr	r3, [pc, #4]	; (d7da0 <_post_loop+0x10>)
   d7d9c:	6018      	str	r0, [r3, #0]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	2003e74c 	.word	0x2003e74c

000d7da4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7da4:	4802      	ldr	r0, [pc, #8]	; (d7db0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7da6:	4a03      	ldr	r2, [pc, #12]	; (d7db4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7da8:	4903      	ldr	r1, [pc, #12]	; (d7db8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7daa:	1a12      	subs	r2, r2, r0
   d7dac:	f000 bebc 	b.w	d8b28 <memcpy>
   d7db0:	2003f400 	.word	0x2003f400
   d7db4:	2003f404 	.word	0x2003f404
   d7db8:	000d9400 	.word	0x000d9400

000d7dbc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7dbc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7dbe:	2300      	movs	r3, #0
   d7dc0:	9300      	str	r3, [sp, #0]
   d7dc2:	461a      	mov	r2, r3
   d7dc4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7dc8:	f7ff fc80 	bl	d76cc <system_ctrl_set_result>
}
   d7dcc:	b003      	add	sp, #12
   d7dce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7dd4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7dd4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7dd6:	8843      	ldrh	r3, [r0, #2]
   d7dd8:	2b0a      	cmp	r3, #10
   d7dda:	d008      	beq.n	d7dee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7ddc:	2b50      	cmp	r3, #80	; 0x50
   d7dde:	d109      	bne.n	d7df4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7de0:	4b09      	ldr	r3, [pc, #36]	; (d7e08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7de2:	681b      	ldr	r3, [r3, #0]
   d7de4:	b13b      	cbz	r3, d7df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7de6:	b003      	add	sp, #12
   d7de8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7dec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7dee:	f7ff ffe5 	bl	d7dbc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7df2:	e006      	b.n	d7e02 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7df4:	2300      	movs	r3, #0
   d7df6:	9300      	str	r3, [sp, #0]
   d7df8:	461a      	mov	r2, r3
   d7dfa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7dfe:	f7ff fc65 	bl	d76cc <system_ctrl_set_result>
        break;
    }
}
   d7e02:	b003      	add	sp, #12
   d7e04:	f85d fb04 	ldr.w	pc, [sp], #4
   d7e08:	2003e714 	.word	0x2003e714

000d7e0c <module_user_init_hook>:

void module_user_init_hook()
{
   d7e0c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e0e:	4c10      	ldr	r4, [pc, #64]	; (d7e50 <module_user_init_hook+0x44>)
   d7e10:	4d10      	ldr	r5, [pc, #64]	; (d7e54 <module_user_init_hook+0x48>)
   d7e12:	6823      	ldr	r3, [r4, #0]
   d7e14:	42ab      	cmp	r3, r5
   d7e16:	4b10      	ldr	r3, [pc, #64]	; (d7e58 <module_user_init_hook+0x4c>)
   d7e18:	bf0c      	ite	eq
   d7e1a:	2201      	moveq	r2, #1
   d7e1c:	2200      	movne	r2, #0
   d7e1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7e20:	d002      	beq.n	d7e28 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7e22:	f7ff ffbf 	bl	d7da4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7e26:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7e28:	f7ff fbbe 	bl	d75a8 <HAL_RNG_GetRandomNumber>
   d7e2c:	4604      	mov	r4, r0
    srand(seed);
   d7e2e:	f000 fe8f 	bl	d8b50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7e32:	4b0a      	ldr	r3, [pc, #40]	; (d7e5c <module_user_init_hook+0x50>)
   d7e34:	b113      	cbz	r3, d7e3c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7e36:	4620      	mov	r0, r4
   d7e38:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7e3c:	2100      	movs	r1, #0
   d7e3e:	4807      	ldr	r0, [pc, #28]	; (d7e5c <module_user_init_hook+0x50>)
   d7e40:	f7ff fbda 	bl	d75f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e44:	2100      	movs	r1, #0
   d7e46:	4806      	ldr	r0, [pc, #24]	; (d7e60 <module_user_init_hook+0x54>)
}
   d7e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e4c:	f7ff bc34 	b.w	d76b8 <system_ctrl_set_app_request_handler>
   d7e50:	2003f400 	.word	0x2003f400
   d7e54:	9a271c1e 	.word	0x9a271c1e
   d7e58:	2003e718 	.word	0x2003e718
   d7e5c:	00000000 	.word	0x00000000
   d7e60:	000d7dd5 	.word	0x000d7dd5

000d7e64 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7e64:	b510      	push	{r4, lr}
   d7e66:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7e68:	f7ff fe70 	bl	d7b4c <_ZNSt14_Function_baseD1Ev>
   d7e6c:	4620      	mov	r0, r4
   d7e6e:	bd10      	pop	{r4, pc}

000d7e70 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7e70:	4803      	ldr	r0, [pc, #12]	; (d7e80 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7e72:	4a04      	ldr	r2, [pc, #16]	; (d7e84 <_GLOBAL__sub_I_RGB+0x14>)
   d7e74:	4904      	ldr	r1, [pc, #16]	; (d7e88 <_GLOBAL__sub_I_RGB+0x18>)
   d7e76:	2300      	movs	r3, #0
   d7e78:	6083      	str	r3, [r0, #8]
   d7e7a:	f000 b92d 	b.w	d80d8 <__aeabi_atexit>
   d7e7e:	bf00      	nop
   d7e80:	2003e71c 	.word	0x2003e71c
   d7e84:	2003dd78 	.word	0x2003dd78
   d7e88:	000d7e65 	.word	0x000d7e65

000d7e8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7e8c:	4b02      	ldr	r3, [pc, #8]	; (d7e98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7e8e:	681a      	ldr	r2, [r3, #0]
   d7e90:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7e92:	601a      	str	r2, [r3, #0]
   d7e94:	4770      	bx	lr
   d7e96:	bf00      	nop
   d7e98:	2003dd10 	.word	0x2003dd10
   d7e9c:	2003e72c 	.word	0x2003e72c

000d7ea0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ea0:	4b01      	ldr	r3, [pc, #4]	; (d7ea8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7ea2:	4a02      	ldr	r2, [pc, #8]	; (d7eac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7ea4:	601a      	str	r2, [r3, #0]
   d7ea6:	4770      	bx	lr
   d7ea8:	2003e730 	.word	0x2003e730
   d7eac:	000d92b2 	.word	0x000d92b2

000d7eb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7eb2:	4606      	mov	r6, r0
   d7eb4:	460d      	mov	r5, r1
   d7eb6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7eb8:	2400      	movs	r4, #0
  while (size--) {
   d7eba:	42bd      	cmp	r5, r7
   d7ebc:	d00c      	beq.n	d7ed8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7ebe:	6833      	ldr	r3, [r6, #0]
   d7ec0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7ec4:	689b      	ldr	r3, [r3, #8]
   d7ec6:	4630      	mov	r0, r6
   d7ec8:	4798      	blx	r3
     if (chunk>=0)
   d7eca:	2800      	cmp	r0, #0
   d7ecc:	db01      	blt.n	d7ed2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7ece:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7ed0:	e7f3      	b.n	d7eba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7ed2:	2c00      	cmp	r4, #0
   d7ed4:	bf08      	it	eq
   d7ed6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ed8:	4620      	mov	r0, r4
   d7eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7edc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7edc:	b570      	push	{r4, r5, r6, lr}
   d7ede:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7ee0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7ee2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7ee4:	b149      	cbz	r1, d7efa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7ee6:	f000 fe5b 	bl	d8ba0 <strlen>
   d7eea:	682b      	ldr	r3, [r5, #0]
   d7eec:	4602      	mov	r2, r0
   d7eee:	4621      	mov	r1, r4
   d7ef0:	4628      	mov	r0, r5
   d7ef2:	68db      	ldr	r3, [r3, #12]
    }
   d7ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7ef8:	4718      	bx	r3
    }
   d7efa:	bd70      	pop	{r4, r5, r6, pc}

000d7efc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7efc:	6803      	ldr	r3, [r0, #0]
   d7efe:	689b      	ldr	r3, [r3, #8]
   d7f00:	4718      	bx	r3

000d7f02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7f04:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f06:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7f08:	f7ff fff8 	bl	d7efc <_ZN5Print5printEc>
  n += print('\n');
   d7f0c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7f0e:	4604      	mov	r4, r0
  n += print('\n');
   d7f10:	4628      	mov	r0, r5
   d7f12:	f7ff fff3 	bl	d7efc <_ZN5Print5printEc>
  return n;
}
   d7f16:	4420      	add	r0, r4
   d7f18:	bd38      	pop	{r3, r4, r5, pc}

000d7f1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f1a:	b530      	push	{r4, r5, lr}
   d7f1c:	b08b      	sub	sp, #44	; 0x2c
   d7f1e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f20:	2100      	movs	r1, #0
   d7f22:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f26:	2a01      	cmp	r2, #1
   d7f28:	bf98      	it	ls
   d7f2a:	220a      	movls	r2, #10
   d7f2c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7f30:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7f34:	fb05 3312 	mls	r3, r5, r2, r3
   d7f38:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7f3c:	2b09      	cmp	r3, #9
   d7f3e:	bf94      	ite	ls
   d7f40:	3330      	addls	r3, #48	; 0x30
   d7f42:	3337      	addhi	r3, #55	; 0x37
   d7f44:	b2db      	uxtb	r3, r3
   d7f46:	4621      	mov	r1, r4
   d7f48:	f804 3901 	strb.w	r3, [r4], #-1
   d7f4c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7f4e:	2d00      	cmp	r5, #0
   d7f50:	d1ee      	bne.n	d7f30 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7f52:	f7ff ffc3 	bl	d7edc <_ZN5Print5writeEPKc>
}
   d7f56:	b00b      	add	sp, #44	; 0x2c
   d7f58:	bd30      	pop	{r4, r5, pc}

000d7f5a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7f5a:	b40c      	push	{r2, r3}
   d7f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7f60:	b087      	sub	sp, #28
   d7f62:	af00      	add	r7, sp, #0
   d7f64:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7f68:	4605      	mov	r5, r0
   d7f6a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7f6e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7f70:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7f72:	4623      	mov	r3, r4
   d7f74:	464a      	mov	r2, r9
   d7f76:	2114      	movs	r1, #20
   d7f78:	1d38      	adds	r0, r7, #4
   d7f7a:	f7ff fbc1 	bl	d7700 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7f7e:	2813      	cmp	r0, #19
   d7f80:	d805      	bhi.n	d7f8e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7f82:	1d39      	adds	r1, r7, #4
   d7f84:	4628      	mov	r0, r5
   d7f86:	f7ff ffa9 	bl	d7edc <_ZN5Print5writeEPKc>
   d7f8a:	4604      	mov	r4, r0
   d7f8c:	e013      	b.n	d7fb6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7f8e:	f100 0308 	add.w	r3, r0, #8
   d7f92:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7f96:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7f98:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7f9c:	1c41      	adds	r1, r0, #1
   d7f9e:	4623      	mov	r3, r4
   d7fa0:	464a      	mov	r2, r9
   d7fa2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7fa4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7fa6:	f7ff fbab 	bl	d7700 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7faa:	4669      	mov	r1, sp
   d7fac:	4628      	mov	r0, r5
   d7fae:	f7ff ff95 	bl	d7edc <_ZN5Print5writeEPKc>
   d7fb2:	4604      	mov	r4, r0
   d7fb4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7fb6:	b11e      	cbz	r6, d7fc0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7fb8:	4628      	mov	r0, r5
   d7fba:	f7ff ffa2 	bl	d7f02 <_ZN5Print7printlnEv>
   d7fbe:	4404      	add	r4, r0
    return n;
}
   d7fc0:	4620      	mov	r0, r4
   d7fc2:	371c      	adds	r7, #28
   d7fc4:	46bd      	mov	sp, r7
   d7fc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7fca:	b002      	add	sp, #8
   d7fcc:	4770      	bx	lr

000d7fce <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d7fce:	b510      	push	{r4, lr}
   d7fd0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7fd2:	6800      	ldr	r0, [r0, #0]
   d7fd4:	b108      	cbz	r0, d7fda <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7fd6:	f7ff fadf 	bl	d7598 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7fda:	4620      	mov	r0, r4
   d7fdc:	bd10      	pop	{r4, pc}
	...

000d7fe0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7fe0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7fe2:	4c06      	ldr	r4, [pc, #24]	; (d7ffc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7fe4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7fe6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7fe8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7fea:	f7ff facd 	bl	d7588 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7fee:	4620      	mov	r0, r4
   d7ff0:	4a03      	ldr	r2, [pc, #12]	; (d8000 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7ff2:	4904      	ldr	r1, [pc, #16]	; (d8004 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7ff8:	f000 b86e 	b.w	d80d8 <__aeabi_atexit>
   d7ffc:	2003e734 	.word	0x2003e734
   d8000:	2003dd78 	.word	0x2003dd78
   d8004:	000d7fcf 	.word	0x000d7fcf

000d8008 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8008:	b510      	push	{r4, lr}
   d800a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d800c:	6800      	ldr	r0, [r0, #0]
   d800e:	b118      	cbz	r0, d8018 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d8010:	f7ff fb6e 	bl	d76f0 <free>
            wakeupSource_ = nullptr;
   d8014:	2300      	movs	r3, #0
   d8016:	6023      	str	r3, [r4, #0]
   d8018:	bd10      	pop	{r4, pc}

000d801a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d801a:	b510      	push	{r4, lr}
   d801c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d801e:	f7ff fff3 	bl	d8008 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8022:	4620      	mov	r0, r4
   d8024:	bd10      	pop	{r4, pc}
	...

000d8028 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8028:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d802a:	4c09      	ldr	r4, [pc, #36]	; (d8050 <_GLOBAL__sub_I_System+0x28>)
   d802c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d802e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8032:	6020      	str	r0, [r4, #0]
   d8034:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d8036:	71a0      	strb	r0, [r4, #6]
   d8038:	8120      	strh	r0, [r4, #8]
   d803a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d803c:	f7ff fb34 	bl	d76a8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d8040:	4620      	mov	r0, r4
   d8042:	4a04      	ldr	r2, [pc, #16]	; (d8054 <_GLOBAL__sub_I_System+0x2c>)
   d8044:	4904      	ldr	r1, [pc, #16]	; (d8058 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d804a:	f000 b845 	b.w	d80d8 <__aeabi_atexit>
   d804e:	bf00      	nop
   d8050:	2003e738 	.word	0x2003e738
   d8054:	2003dd78 	.word	0x2003dd78
   d8058:	000d801b 	.word	0x000d801b

000d805c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d805c:	2200      	movs	r2, #0
   d805e:	4611      	mov	r1, r2
   d8060:	6840      	ldr	r0, [r0, #4]
   d8062:	f7ff bb09 	b.w	d7678 <network_listening>

000d8066 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8066:	2200      	movs	r2, #0
   d8068:	4611      	mov	r1, r2
   d806a:	6840      	ldr	r0, [r0, #4]
   d806c:	f7ff bb14 	b.w	d7698 <network_get_listen_timeout>

000d8070 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8070:	2200      	movs	r2, #0
   d8072:	6840      	ldr	r0, [r0, #4]
   d8074:	f7ff bb08 	b.w	d7688 <network_set_listen_timeout>

000d8078 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8078:	2200      	movs	r2, #0
   d807a:	f081 0101 	eor.w	r1, r1, #1
   d807e:	6840      	ldr	r0, [r0, #4]
   d8080:	f7ff baf2 	b.w	d7668 <network_listen>

000d8084 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8084:	2300      	movs	r3, #0
   d8086:	461a      	mov	r2, r3
   d8088:	4619      	mov	r1, r3
   d808a:	6840      	ldr	r0, [r0, #4]
   d808c:	f7ff bae4 	b.w	d7658 <network_off>

000d8090 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8090:	2300      	movs	r3, #0
   d8092:	461a      	mov	r2, r3
   d8094:	4619      	mov	r1, r3
   d8096:	6840      	ldr	r0, [r0, #4]
   d8098:	f7ff bad6 	b.w	d7648 <network_on>

000d809c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d809c:	2200      	movs	r2, #0
   d809e:	4611      	mov	r1, r2
   d80a0:	6840      	ldr	r0, [r0, #4]
   d80a2:	f7ff bac9 	b.w	d7638 <network_ready>

000d80a6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d80a6:	2200      	movs	r2, #0
   d80a8:	4611      	mov	r1, r2
   d80aa:	6840      	ldr	r0, [r0, #4]
   d80ac:	f7ff bab4 	b.w	d7618 <network_connecting>

000d80b0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d80b0:	2200      	movs	r2, #0
   d80b2:	2102      	movs	r1, #2
   d80b4:	6840      	ldr	r0, [r0, #4]
   d80b6:	f7ff bab7 	b.w	d7628 <network_disconnect>

000d80ba <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d80ba:	2300      	movs	r3, #0
   d80bc:	461a      	mov	r2, r3
   d80be:	6840      	ldr	r0, [r0, #4]
   d80c0:	f7ff baa2 	b.w	d7608 <network_connect>

000d80c4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d80c4:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d80c6:	2203      	movs	r2, #3
   d80c8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d80ca:	4a02      	ldr	r2, [pc, #8]	; (d80d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d80cc:	601a      	str	r2, [r3, #0]
   d80ce:	4770      	bx	lr
   d80d0:	2003e744 	.word	0x2003e744
   d80d4:	000d9324 	.word	0x000d9324

000d80d8 <__aeabi_atexit>:
   d80d8:	460b      	mov	r3, r1
   d80da:	4601      	mov	r1, r0
   d80dc:	4618      	mov	r0, r3
   d80de:	f000 bd15 	b.w	d8b0c <__cxa_atexit>

000d80e2 <_ZdlPvj>:
   d80e2:	f7fb bfd8 	b.w	d4096 <_ZdlPv>
	...

000d80e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d80e8:	4b18      	ldr	r3, [pc, #96]	; (d814c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d80ea:	681a      	ldr	r2, [r3, #0]
   d80ec:	07d1      	lsls	r1, r2, #31
   d80ee:	bf5c      	itt	pl
   d80f0:	2201      	movpl	r2, #1
   d80f2:	601a      	strpl	r2, [r3, #0]
   d80f4:	4b16      	ldr	r3, [pc, #88]	; (d8150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d80f6:	681a      	ldr	r2, [r3, #0]
   d80f8:	07d2      	lsls	r2, r2, #31
   d80fa:	bf5c      	itt	pl
   d80fc:	2201      	movpl	r2, #1
   d80fe:	601a      	strpl	r2, [r3, #0]
   d8100:	4b14      	ldr	r3, [pc, #80]	; (d8154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8102:	681a      	ldr	r2, [r3, #0]
   d8104:	07d0      	lsls	r0, r2, #31
   d8106:	bf5c      	itt	pl
   d8108:	2201      	movpl	r2, #1
   d810a:	601a      	strpl	r2, [r3, #0]
   d810c:	4b12      	ldr	r3, [pc, #72]	; (d8158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d810e:	681a      	ldr	r2, [r3, #0]
   d8110:	07d1      	lsls	r1, r2, #31
   d8112:	bf5c      	itt	pl
   d8114:	2201      	movpl	r2, #1
   d8116:	601a      	strpl	r2, [r3, #0]
   d8118:	4b10      	ldr	r3, [pc, #64]	; (d815c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d811a:	681a      	ldr	r2, [r3, #0]
   d811c:	07d2      	lsls	r2, r2, #31
   d811e:	bf5c      	itt	pl
   d8120:	2201      	movpl	r2, #1
   d8122:	601a      	strpl	r2, [r3, #0]
   d8124:	4b0e      	ldr	r3, [pc, #56]	; (d8160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8126:	681a      	ldr	r2, [r3, #0]
   d8128:	07d0      	lsls	r0, r2, #31
   d812a:	bf5c      	itt	pl
   d812c:	2201      	movpl	r2, #1
   d812e:	601a      	strpl	r2, [r3, #0]
   d8130:	4b0c      	ldr	r3, [pc, #48]	; (d8164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8132:	681a      	ldr	r2, [r3, #0]
   d8134:	07d1      	lsls	r1, r2, #31
   d8136:	bf5c      	itt	pl
   d8138:	2201      	movpl	r2, #1
   d813a:	601a      	strpl	r2, [r3, #0]
   d813c:	4b0a      	ldr	r3, [pc, #40]	; (d8168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d813e:	681a      	ldr	r2, [r3, #0]
   d8140:	07d2      	lsls	r2, r2, #31
   d8142:	bf5c      	itt	pl
   d8144:	2201      	movpl	r2, #1
   d8146:	601a      	strpl	r2, [r3, #0]
   d8148:	4770      	bx	lr
   d814a:	bf00      	nop
   d814c:	2003e76c 	.word	0x2003e76c
   d8150:	2003e768 	.word	0x2003e768
   d8154:	2003e764 	.word	0x2003e764
   d8158:	2003e760 	.word	0x2003e760
   d815c:	2003e75c 	.word	0x2003e75c
   d8160:	2003e758 	.word	0x2003e758
   d8164:	2003e754 	.word	0x2003e754
   d8168:	2003e750 	.word	0x2003e750

000d816c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d816c:	4b24      	ldr	r3, [pc, #144]	; (d8200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d816e:	681a      	ldr	r2, [r3, #0]
   d8170:	07d0      	lsls	r0, r2, #31
   d8172:	bf5c      	itt	pl
   d8174:	2201      	movpl	r2, #1
   d8176:	601a      	strpl	r2, [r3, #0]
   d8178:	4b22      	ldr	r3, [pc, #136]	; (d8204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d817a:	681a      	ldr	r2, [r3, #0]
   d817c:	07d1      	lsls	r1, r2, #31
   d817e:	bf5c      	itt	pl
   d8180:	2201      	movpl	r2, #1
   d8182:	601a      	strpl	r2, [r3, #0]
   d8184:	4b20      	ldr	r3, [pc, #128]	; (d8208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8186:	681a      	ldr	r2, [r3, #0]
   d8188:	07d2      	lsls	r2, r2, #31
   d818a:	bf5c      	itt	pl
   d818c:	2201      	movpl	r2, #1
   d818e:	601a      	strpl	r2, [r3, #0]
   d8190:	4b1e      	ldr	r3, [pc, #120]	; (d820c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8192:	681a      	ldr	r2, [r3, #0]
   d8194:	07d0      	lsls	r0, r2, #31
   d8196:	bf5c      	itt	pl
   d8198:	2201      	movpl	r2, #1
   d819a:	601a      	strpl	r2, [r3, #0]
   d819c:	4b1c      	ldr	r3, [pc, #112]	; (d8210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d819e:	681a      	ldr	r2, [r3, #0]
   d81a0:	07d1      	lsls	r1, r2, #31
   d81a2:	bf5c      	itt	pl
   d81a4:	2201      	movpl	r2, #1
   d81a6:	601a      	strpl	r2, [r3, #0]
   d81a8:	4b1a      	ldr	r3, [pc, #104]	; (d8214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d81aa:	681a      	ldr	r2, [r3, #0]
   d81ac:	07d2      	lsls	r2, r2, #31
   d81ae:	bf5c      	itt	pl
   d81b0:	2201      	movpl	r2, #1
   d81b2:	601a      	strpl	r2, [r3, #0]
   d81b4:	4b18      	ldr	r3, [pc, #96]	; (d8218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d81b6:	681a      	ldr	r2, [r3, #0]
   d81b8:	07d0      	lsls	r0, r2, #31
   d81ba:	bf5c      	itt	pl
   d81bc:	2201      	movpl	r2, #1
   d81be:	601a      	strpl	r2, [r3, #0]
   d81c0:	4b16      	ldr	r3, [pc, #88]	; (d821c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d81c2:	681a      	ldr	r2, [r3, #0]
   d81c4:	07d1      	lsls	r1, r2, #31
   d81c6:	bf5c      	itt	pl
   d81c8:	2201      	movpl	r2, #1
   d81ca:	601a      	strpl	r2, [r3, #0]
   d81cc:	4b14      	ldr	r3, [pc, #80]	; (d8220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d81ce:	681a      	ldr	r2, [r3, #0]
   d81d0:	07d2      	lsls	r2, r2, #31
   d81d2:	bf5c      	itt	pl
   d81d4:	2201      	movpl	r2, #1
   d81d6:	601a      	strpl	r2, [r3, #0]
   d81d8:	4b12      	ldr	r3, [pc, #72]	; (d8224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d81da:	681a      	ldr	r2, [r3, #0]
   d81dc:	07d0      	lsls	r0, r2, #31
   d81de:	bf5c      	itt	pl
   d81e0:	2201      	movpl	r2, #1
   d81e2:	601a      	strpl	r2, [r3, #0]
   d81e4:	4b10      	ldr	r3, [pc, #64]	; (d8228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d81e6:	681a      	ldr	r2, [r3, #0]
   d81e8:	07d1      	lsls	r1, r2, #31
   d81ea:	bf5c      	itt	pl
   d81ec:	2201      	movpl	r2, #1
   d81ee:	601a      	strpl	r2, [r3, #0]
   d81f0:	4b0e      	ldr	r3, [pc, #56]	; (d822c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d81f2:	681a      	ldr	r2, [r3, #0]
   d81f4:	07d2      	lsls	r2, r2, #31
   d81f6:	bf5c      	itt	pl
   d81f8:	2201      	movpl	r2, #1
   d81fa:	601a      	strpl	r2, [r3, #0]
   d81fc:	4770      	bx	lr
   d81fe:	bf00      	nop
   d8200:	2003e79c 	.word	0x2003e79c
   d8204:	2003e798 	.word	0x2003e798
   d8208:	2003e794 	.word	0x2003e794
   d820c:	2003e790 	.word	0x2003e790
   d8210:	2003e78c 	.word	0x2003e78c
   d8214:	2003e788 	.word	0x2003e788
   d8218:	2003e784 	.word	0x2003e784
   d821c:	2003e780 	.word	0x2003e780
   d8220:	2003e77c 	.word	0x2003e77c
   d8224:	2003e778 	.word	0x2003e778
   d8228:	2003e774 	.word	0x2003e774
   d822c:	2003e770 	.word	0x2003e770

000d8230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8230:	4b24      	ldr	r3, [pc, #144]	; (d82c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8232:	681a      	ldr	r2, [r3, #0]
   d8234:	07d0      	lsls	r0, r2, #31
   d8236:	bf5c      	itt	pl
   d8238:	2201      	movpl	r2, #1
   d823a:	601a      	strpl	r2, [r3, #0]
   d823c:	4b22      	ldr	r3, [pc, #136]	; (d82c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d823e:	681a      	ldr	r2, [r3, #0]
   d8240:	07d1      	lsls	r1, r2, #31
   d8242:	bf5c      	itt	pl
   d8244:	2201      	movpl	r2, #1
   d8246:	601a      	strpl	r2, [r3, #0]
   d8248:	4b20      	ldr	r3, [pc, #128]	; (d82cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d824a:	681a      	ldr	r2, [r3, #0]
   d824c:	07d2      	lsls	r2, r2, #31
   d824e:	bf5c      	itt	pl
   d8250:	2201      	movpl	r2, #1
   d8252:	601a      	strpl	r2, [r3, #0]
   d8254:	4b1e      	ldr	r3, [pc, #120]	; (d82d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8256:	681a      	ldr	r2, [r3, #0]
   d8258:	07d0      	lsls	r0, r2, #31
   d825a:	bf5c      	itt	pl
   d825c:	2201      	movpl	r2, #1
   d825e:	601a      	strpl	r2, [r3, #0]
   d8260:	4b1c      	ldr	r3, [pc, #112]	; (d82d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8262:	681a      	ldr	r2, [r3, #0]
   d8264:	07d1      	lsls	r1, r2, #31
   d8266:	bf5c      	itt	pl
   d8268:	2201      	movpl	r2, #1
   d826a:	601a      	strpl	r2, [r3, #0]
   d826c:	4b1a      	ldr	r3, [pc, #104]	; (d82d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d826e:	681a      	ldr	r2, [r3, #0]
   d8270:	07d2      	lsls	r2, r2, #31
   d8272:	bf5c      	itt	pl
   d8274:	2201      	movpl	r2, #1
   d8276:	601a      	strpl	r2, [r3, #0]
   d8278:	4b18      	ldr	r3, [pc, #96]	; (d82dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d827a:	681a      	ldr	r2, [r3, #0]
   d827c:	07d0      	lsls	r0, r2, #31
   d827e:	bf5c      	itt	pl
   d8280:	2201      	movpl	r2, #1
   d8282:	601a      	strpl	r2, [r3, #0]
   d8284:	4b16      	ldr	r3, [pc, #88]	; (d82e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8286:	681a      	ldr	r2, [r3, #0]
   d8288:	07d1      	lsls	r1, r2, #31
   d828a:	bf5c      	itt	pl
   d828c:	2201      	movpl	r2, #1
   d828e:	601a      	strpl	r2, [r3, #0]
   d8290:	4b14      	ldr	r3, [pc, #80]	; (d82e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8292:	681a      	ldr	r2, [r3, #0]
   d8294:	07d2      	lsls	r2, r2, #31
   d8296:	bf5c      	itt	pl
   d8298:	2201      	movpl	r2, #1
   d829a:	601a      	strpl	r2, [r3, #0]
   d829c:	4b12      	ldr	r3, [pc, #72]	; (d82e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d829e:	681a      	ldr	r2, [r3, #0]
   d82a0:	07d0      	lsls	r0, r2, #31
   d82a2:	bf5c      	itt	pl
   d82a4:	2201      	movpl	r2, #1
   d82a6:	601a      	strpl	r2, [r3, #0]
   d82a8:	4b10      	ldr	r3, [pc, #64]	; (d82ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d82aa:	681a      	ldr	r2, [r3, #0]
   d82ac:	07d1      	lsls	r1, r2, #31
   d82ae:	bf5c      	itt	pl
   d82b0:	2201      	movpl	r2, #1
   d82b2:	601a      	strpl	r2, [r3, #0]
   d82b4:	4b0e      	ldr	r3, [pc, #56]	; (d82f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d82b6:	681a      	ldr	r2, [r3, #0]
   d82b8:	07d2      	lsls	r2, r2, #31
   d82ba:	bf5c      	itt	pl
   d82bc:	2201      	movpl	r2, #1
   d82be:	601a      	strpl	r2, [r3, #0]
   d82c0:	4770      	bx	lr
   d82c2:	bf00      	nop
   d82c4:	2003e7cc 	.word	0x2003e7cc
   d82c8:	2003e7c8 	.word	0x2003e7c8
   d82cc:	2003e7c4 	.word	0x2003e7c4
   d82d0:	2003e7c0 	.word	0x2003e7c0
   d82d4:	2003e7bc 	.word	0x2003e7bc
   d82d8:	2003e7b8 	.word	0x2003e7b8
   d82dc:	2003e7b4 	.word	0x2003e7b4
   d82e0:	2003e7b0 	.word	0x2003e7b0
   d82e4:	2003e7ac 	.word	0x2003e7ac
   d82e8:	2003e7a8 	.word	0x2003e7a8
   d82ec:	2003e7a4 	.word	0x2003e7a4
   d82f0:	2003e7a0 	.word	0x2003e7a0

000d82f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d82f4:	4b18      	ldr	r3, [pc, #96]	; (d8358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d82f6:	681a      	ldr	r2, [r3, #0]
   d82f8:	07d1      	lsls	r1, r2, #31
   d82fa:	bf5c      	itt	pl
   d82fc:	2201      	movpl	r2, #1
   d82fe:	601a      	strpl	r2, [r3, #0]
   d8300:	4b16      	ldr	r3, [pc, #88]	; (d835c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8302:	681a      	ldr	r2, [r3, #0]
   d8304:	07d2      	lsls	r2, r2, #31
   d8306:	bf5c      	itt	pl
   d8308:	2201      	movpl	r2, #1
   d830a:	601a      	strpl	r2, [r3, #0]
   d830c:	4b14      	ldr	r3, [pc, #80]	; (d8360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d830e:	681a      	ldr	r2, [r3, #0]
   d8310:	07d0      	lsls	r0, r2, #31
   d8312:	bf5c      	itt	pl
   d8314:	2201      	movpl	r2, #1
   d8316:	601a      	strpl	r2, [r3, #0]
   d8318:	4b12      	ldr	r3, [pc, #72]	; (d8364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d831a:	681a      	ldr	r2, [r3, #0]
   d831c:	07d1      	lsls	r1, r2, #31
   d831e:	bf5c      	itt	pl
   d8320:	2201      	movpl	r2, #1
   d8322:	601a      	strpl	r2, [r3, #0]
   d8324:	4b10      	ldr	r3, [pc, #64]	; (d8368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8326:	681a      	ldr	r2, [r3, #0]
   d8328:	07d2      	lsls	r2, r2, #31
   d832a:	bf5c      	itt	pl
   d832c:	2201      	movpl	r2, #1
   d832e:	601a      	strpl	r2, [r3, #0]
   d8330:	4b0e      	ldr	r3, [pc, #56]	; (d836c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8332:	681a      	ldr	r2, [r3, #0]
   d8334:	07d0      	lsls	r0, r2, #31
   d8336:	bf5c      	itt	pl
   d8338:	2201      	movpl	r2, #1
   d833a:	601a      	strpl	r2, [r3, #0]
   d833c:	4b0c      	ldr	r3, [pc, #48]	; (d8370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d833e:	681a      	ldr	r2, [r3, #0]
   d8340:	07d1      	lsls	r1, r2, #31
   d8342:	bf5c      	itt	pl
   d8344:	2201      	movpl	r2, #1
   d8346:	601a      	strpl	r2, [r3, #0]
   d8348:	4b0a      	ldr	r3, [pc, #40]	; (d8374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d834a:	681a      	ldr	r2, [r3, #0]
   d834c:	07d2      	lsls	r2, r2, #31
   d834e:	bf5c      	itt	pl
   d8350:	2201      	movpl	r2, #1
   d8352:	601a      	strpl	r2, [r3, #0]
   d8354:	4770      	bx	lr
   d8356:	bf00      	nop
   d8358:	2003e7ec 	.word	0x2003e7ec
   d835c:	2003e7e8 	.word	0x2003e7e8
   d8360:	2003e7e4 	.word	0x2003e7e4
   d8364:	2003e7e0 	.word	0x2003e7e0
   d8368:	2003e7dc 	.word	0x2003e7dc
   d836c:	2003e7d8 	.word	0x2003e7d8
   d8370:	2003e7d4 	.word	0x2003e7d4
   d8374:	2003e7d0 	.word	0x2003e7d0

000d8378 <__aeabi_drsub>:
   d8378:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d837c:	e002      	b.n	d8384 <__adddf3>
   d837e:	bf00      	nop

000d8380 <__aeabi_dsub>:
   d8380:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8384 <__adddf3>:
   d8384:	b530      	push	{r4, r5, lr}
   d8386:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d838a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d838e:	ea94 0f05 	teq	r4, r5
   d8392:	bf08      	it	eq
   d8394:	ea90 0f02 	teqeq	r0, r2
   d8398:	bf1f      	itttt	ne
   d839a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d839e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d83a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d83a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d83aa:	f000 80e2 	beq.w	d8572 <__adddf3+0x1ee>
   d83ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d83b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d83b6:	bfb8      	it	lt
   d83b8:	426d      	neglt	r5, r5
   d83ba:	dd0c      	ble.n	d83d6 <__adddf3+0x52>
   d83bc:	442c      	add	r4, r5
   d83be:	ea80 0202 	eor.w	r2, r0, r2
   d83c2:	ea81 0303 	eor.w	r3, r1, r3
   d83c6:	ea82 0000 	eor.w	r0, r2, r0
   d83ca:	ea83 0101 	eor.w	r1, r3, r1
   d83ce:	ea80 0202 	eor.w	r2, r0, r2
   d83d2:	ea81 0303 	eor.w	r3, r1, r3
   d83d6:	2d36      	cmp	r5, #54	; 0x36
   d83d8:	bf88      	it	hi
   d83da:	bd30      	pophi	{r4, r5, pc}
   d83dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d83e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d83e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d83e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d83ec:	d002      	beq.n	d83f4 <__adddf3+0x70>
   d83ee:	4240      	negs	r0, r0
   d83f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d83f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d83f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d83fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8400:	d002      	beq.n	d8408 <__adddf3+0x84>
   d8402:	4252      	negs	r2, r2
   d8404:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8408:	ea94 0f05 	teq	r4, r5
   d840c:	f000 80a7 	beq.w	d855e <__adddf3+0x1da>
   d8410:	f1a4 0401 	sub.w	r4, r4, #1
   d8414:	f1d5 0e20 	rsbs	lr, r5, #32
   d8418:	db0d      	blt.n	d8436 <__adddf3+0xb2>
   d841a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d841e:	fa22 f205 	lsr.w	r2, r2, r5
   d8422:	1880      	adds	r0, r0, r2
   d8424:	f141 0100 	adc.w	r1, r1, #0
   d8428:	fa03 f20e 	lsl.w	r2, r3, lr
   d842c:	1880      	adds	r0, r0, r2
   d842e:	fa43 f305 	asr.w	r3, r3, r5
   d8432:	4159      	adcs	r1, r3
   d8434:	e00e      	b.n	d8454 <__adddf3+0xd0>
   d8436:	f1a5 0520 	sub.w	r5, r5, #32
   d843a:	f10e 0e20 	add.w	lr, lr, #32
   d843e:	2a01      	cmp	r2, #1
   d8440:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8444:	bf28      	it	cs
   d8446:	f04c 0c02 	orrcs.w	ip, ip, #2
   d844a:	fa43 f305 	asr.w	r3, r3, r5
   d844e:	18c0      	adds	r0, r0, r3
   d8450:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8454:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8458:	d507      	bpl.n	d846a <__adddf3+0xe6>
   d845a:	f04f 0e00 	mov.w	lr, #0
   d845e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8462:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8466:	eb6e 0101 	sbc.w	r1, lr, r1
   d846a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d846e:	d31b      	bcc.n	d84a8 <__adddf3+0x124>
   d8470:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8474:	d30c      	bcc.n	d8490 <__adddf3+0x10c>
   d8476:	0849      	lsrs	r1, r1, #1
   d8478:	ea5f 0030 	movs.w	r0, r0, rrx
   d847c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8480:	f104 0401 	add.w	r4, r4, #1
   d8484:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8488:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d848c:	f080 809a 	bcs.w	d85c4 <__adddf3+0x240>
   d8490:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8494:	bf08      	it	eq
   d8496:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d849a:	f150 0000 	adcs.w	r0, r0, #0
   d849e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d84a2:	ea41 0105 	orr.w	r1, r1, r5
   d84a6:	bd30      	pop	{r4, r5, pc}
   d84a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d84ac:	4140      	adcs	r0, r0
   d84ae:	eb41 0101 	adc.w	r1, r1, r1
   d84b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d84b6:	f1a4 0401 	sub.w	r4, r4, #1
   d84ba:	d1e9      	bne.n	d8490 <__adddf3+0x10c>
   d84bc:	f091 0f00 	teq	r1, #0
   d84c0:	bf04      	itt	eq
   d84c2:	4601      	moveq	r1, r0
   d84c4:	2000      	moveq	r0, #0
   d84c6:	fab1 f381 	clz	r3, r1
   d84ca:	bf08      	it	eq
   d84cc:	3320      	addeq	r3, #32
   d84ce:	f1a3 030b 	sub.w	r3, r3, #11
   d84d2:	f1b3 0220 	subs.w	r2, r3, #32
   d84d6:	da0c      	bge.n	d84f2 <__adddf3+0x16e>
   d84d8:	320c      	adds	r2, #12
   d84da:	dd08      	ble.n	d84ee <__adddf3+0x16a>
   d84dc:	f102 0c14 	add.w	ip, r2, #20
   d84e0:	f1c2 020c 	rsb	r2, r2, #12
   d84e4:	fa01 f00c 	lsl.w	r0, r1, ip
   d84e8:	fa21 f102 	lsr.w	r1, r1, r2
   d84ec:	e00c      	b.n	d8508 <__adddf3+0x184>
   d84ee:	f102 0214 	add.w	r2, r2, #20
   d84f2:	bfd8      	it	le
   d84f4:	f1c2 0c20 	rsble	ip, r2, #32
   d84f8:	fa01 f102 	lsl.w	r1, r1, r2
   d84fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8500:	bfdc      	itt	le
   d8502:	ea41 010c 	orrle.w	r1, r1, ip
   d8506:	4090      	lslle	r0, r2
   d8508:	1ae4      	subs	r4, r4, r3
   d850a:	bfa2      	ittt	ge
   d850c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8510:	4329      	orrge	r1, r5
   d8512:	bd30      	popge	{r4, r5, pc}
   d8514:	ea6f 0404 	mvn.w	r4, r4
   d8518:	3c1f      	subs	r4, #31
   d851a:	da1c      	bge.n	d8556 <__adddf3+0x1d2>
   d851c:	340c      	adds	r4, #12
   d851e:	dc0e      	bgt.n	d853e <__adddf3+0x1ba>
   d8520:	f104 0414 	add.w	r4, r4, #20
   d8524:	f1c4 0220 	rsb	r2, r4, #32
   d8528:	fa20 f004 	lsr.w	r0, r0, r4
   d852c:	fa01 f302 	lsl.w	r3, r1, r2
   d8530:	ea40 0003 	orr.w	r0, r0, r3
   d8534:	fa21 f304 	lsr.w	r3, r1, r4
   d8538:	ea45 0103 	orr.w	r1, r5, r3
   d853c:	bd30      	pop	{r4, r5, pc}
   d853e:	f1c4 040c 	rsb	r4, r4, #12
   d8542:	f1c4 0220 	rsb	r2, r4, #32
   d8546:	fa20 f002 	lsr.w	r0, r0, r2
   d854a:	fa01 f304 	lsl.w	r3, r1, r4
   d854e:	ea40 0003 	orr.w	r0, r0, r3
   d8552:	4629      	mov	r1, r5
   d8554:	bd30      	pop	{r4, r5, pc}
   d8556:	fa21 f004 	lsr.w	r0, r1, r4
   d855a:	4629      	mov	r1, r5
   d855c:	bd30      	pop	{r4, r5, pc}
   d855e:	f094 0f00 	teq	r4, #0
   d8562:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8566:	bf06      	itte	eq
   d8568:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d856c:	3401      	addeq	r4, #1
   d856e:	3d01      	subne	r5, #1
   d8570:	e74e      	b.n	d8410 <__adddf3+0x8c>
   d8572:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8576:	bf18      	it	ne
   d8578:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d857c:	d029      	beq.n	d85d2 <__adddf3+0x24e>
   d857e:	ea94 0f05 	teq	r4, r5
   d8582:	bf08      	it	eq
   d8584:	ea90 0f02 	teqeq	r0, r2
   d8588:	d005      	beq.n	d8596 <__adddf3+0x212>
   d858a:	ea54 0c00 	orrs.w	ip, r4, r0
   d858e:	bf04      	itt	eq
   d8590:	4619      	moveq	r1, r3
   d8592:	4610      	moveq	r0, r2
   d8594:	bd30      	pop	{r4, r5, pc}
   d8596:	ea91 0f03 	teq	r1, r3
   d859a:	bf1e      	ittt	ne
   d859c:	2100      	movne	r1, #0
   d859e:	2000      	movne	r0, #0
   d85a0:	bd30      	popne	{r4, r5, pc}
   d85a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d85a6:	d105      	bne.n	d85b4 <__adddf3+0x230>
   d85a8:	0040      	lsls	r0, r0, #1
   d85aa:	4149      	adcs	r1, r1
   d85ac:	bf28      	it	cs
   d85ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d85b2:	bd30      	pop	{r4, r5, pc}
   d85b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d85b8:	bf3c      	itt	cc
   d85ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d85be:	bd30      	popcc	{r4, r5, pc}
   d85c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d85c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d85c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d85cc:	f04f 0000 	mov.w	r0, #0
   d85d0:	bd30      	pop	{r4, r5, pc}
   d85d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d85d6:	bf1a      	itte	ne
   d85d8:	4619      	movne	r1, r3
   d85da:	4610      	movne	r0, r2
   d85dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d85e0:	bf1c      	itt	ne
   d85e2:	460b      	movne	r3, r1
   d85e4:	4602      	movne	r2, r0
   d85e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d85ea:	bf06      	itte	eq
   d85ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d85f0:	ea91 0f03 	teqeq	r1, r3
   d85f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d85f8:	bd30      	pop	{r4, r5, pc}
   d85fa:	bf00      	nop

000d85fc <__aeabi_ui2d>:
   d85fc:	f090 0f00 	teq	r0, #0
   d8600:	bf04      	itt	eq
   d8602:	2100      	moveq	r1, #0
   d8604:	4770      	bxeq	lr
   d8606:	b530      	push	{r4, r5, lr}
   d8608:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d860c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8610:	f04f 0500 	mov.w	r5, #0
   d8614:	f04f 0100 	mov.w	r1, #0
   d8618:	e750      	b.n	d84bc <__adddf3+0x138>
   d861a:	bf00      	nop

000d861c <__aeabi_i2d>:
   d861c:	f090 0f00 	teq	r0, #0
   d8620:	bf04      	itt	eq
   d8622:	2100      	moveq	r1, #0
   d8624:	4770      	bxeq	lr
   d8626:	b530      	push	{r4, r5, lr}
   d8628:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d862c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8630:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8634:	bf48      	it	mi
   d8636:	4240      	negmi	r0, r0
   d8638:	f04f 0100 	mov.w	r1, #0
   d863c:	e73e      	b.n	d84bc <__adddf3+0x138>
   d863e:	bf00      	nop

000d8640 <__aeabi_f2d>:
   d8640:	0042      	lsls	r2, r0, #1
   d8642:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8646:	ea4f 0131 	mov.w	r1, r1, rrx
   d864a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d864e:	bf1f      	itttt	ne
   d8650:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8654:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8658:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d865c:	4770      	bxne	lr
   d865e:	f092 0f00 	teq	r2, #0
   d8662:	bf14      	ite	ne
   d8664:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8668:	4770      	bxeq	lr
   d866a:	b530      	push	{r4, r5, lr}
   d866c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8678:	e720      	b.n	d84bc <__adddf3+0x138>
   d867a:	bf00      	nop

000d867c <__aeabi_ul2d>:
   d867c:	ea50 0201 	orrs.w	r2, r0, r1
   d8680:	bf08      	it	eq
   d8682:	4770      	bxeq	lr
   d8684:	b530      	push	{r4, r5, lr}
   d8686:	f04f 0500 	mov.w	r5, #0
   d868a:	e00a      	b.n	d86a2 <__aeabi_l2d+0x16>

000d868c <__aeabi_l2d>:
   d868c:	ea50 0201 	orrs.w	r2, r0, r1
   d8690:	bf08      	it	eq
   d8692:	4770      	bxeq	lr
   d8694:	b530      	push	{r4, r5, lr}
   d8696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d869a:	d502      	bpl.n	d86a2 <__aeabi_l2d+0x16>
   d869c:	4240      	negs	r0, r0
   d869e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d86a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d86a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d86aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d86ae:	f43f aedc 	beq.w	d846a <__adddf3+0xe6>
   d86b2:	f04f 0203 	mov.w	r2, #3
   d86b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d86ba:	bf18      	it	ne
   d86bc:	3203      	addne	r2, #3
   d86be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d86c2:	bf18      	it	ne
   d86c4:	3203      	addne	r2, #3
   d86c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d86ca:	f1c2 0320 	rsb	r3, r2, #32
   d86ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d86d2:	fa20 f002 	lsr.w	r0, r0, r2
   d86d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d86da:	ea40 000e 	orr.w	r0, r0, lr
   d86de:	fa21 f102 	lsr.w	r1, r1, r2
   d86e2:	4414      	add	r4, r2
   d86e4:	e6c1      	b.n	d846a <__adddf3+0xe6>
   d86e6:	bf00      	nop

000d86e8 <__aeabi_dmul>:
   d86e8:	b570      	push	{r4, r5, r6, lr}
   d86ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d86ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86f6:	bf1d      	ittte	ne
   d86f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86fc:	ea94 0f0c 	teqne	r4, ip
   d8700:	ea95 0f0c 	teqne	r5, ip
   d8704:	f000 f8de 	bleq	d88c4 <__aeabi_dmul+0x1dc>
   d8708:	442c      	add	r4, r5
   d870a:	ea81 0603 	eor.w	r6, r1, r3
   d870e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d871a:	bf18      	it	ne
   d871c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8728:	d038      	beq.n	d879c <__aeabi_dmul+0xb4>
   d872a:	fba0 ce02 	umull	ip, lr, r0, r2
   d872e:	f04f 0500 	mov.w	r5, #0
   d8732:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d873a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d873e:	f04f 0600 	mov.w	r6, #0
   d8742:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8746:	f09c 0f00 	teq	ip, #0
   d874a:	bf18      	it	ne
   d874c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d875c:	d204      	bcs.n	d8768 <__aeabi_dmul+0x80>
   d875e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8762:	416d      	adcs	r5, r5
   d8764:	eb46 0606 	adc.w	r6, r6, r6
   d8768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d876c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d877c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8780:	bf88      	it	hi
   d8782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8786:	d81e      	bhi.n	d87c6 <__aeabi_dmul+0xde>
   d8788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d878c:	bf08      	it	eq
   d878e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8792:	f150 0000 	adcs.w	r0, r0, #0
   d8796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d879a:	bd70      	pop	{r4, r5, r6, pc}
   d879c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d87a0:	ea46 0101 	orr.w	r1, r6, r1
   d87a4:	ea40 0002 	orr.w	r0, r0, r2
   d87a8:	ea81 0103 	eor.w	r1, r1, r3
   d87ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d87b0:	bfc2      	ittt	gt
   d87b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d87b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d87ba:	bd70      	popgt	{r4, r5, r6, pc}
   d87bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87c0:	f04f 0e00 	mov.w	lr, #0
   d87c4:	3c01      	subs	r4, #1
   d87c6:	f300 80ab 	bgt.w	d8920 <__aeabi_dmul+0x238>
   d87ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d87ce:	bfde      	ittt	le
   d87d0:	2000      	movle	r0, #0
   d87d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d87d6:	bd70      	pople	{r4, r5, r6, pc}
   d87d8:	f1c4 0400 	rsb	r4, r4, #0
   d87dc:	3c20      	subs	r4, #32
   d87de:	da35      	bge.n	d884c <__aeabi_dmul+0x164>
   d87e0:	340c      	adds	r4, #12
   d87e2:	dc1b      	bgt.n	d881c <__aeabi_dmul+0x134>
   d87e4:	f104 0414 	add.w	r4, r4, #20
   d87e8:	f1c4 0520 	rsb	r5, r4, #32
   d87ec:	fa00 f305 	lsl.w	r3, r0, r5
   d87f0:	fa20 f004 	lsr.w	r0, r0, r4
   d87f4:	fa01 f205 	lsl.w	r2, r1, r5
   d87f8:	ea40 0002 	orr.w	r0, r0, r2
   d87fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8808:	fa21 f604 	lsr.w	r6, r1, r4
   d880c:	eb42 0106 	adc.w	r1, r2, r6
   d8810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8814:	bf08      	it	eq
   d8816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d881a:	bd70      	pop	{r4, r5, r6, pc}
   d881c:	f1c4 040c 	rsb	r4, r4, #12
   d8820:	f1c4 0520 	rsb	r5, r4, #32
   d8824:	fa00 f304 	lsl.w	r3, r0, r4
   d8828:	fa20 f005 	lsr.w	r0, r0, r5
   d882c:	fa01 f204 	lsl.w	r2, r1, r4
   d8830:	ea40 0002 	orr.w	r0, r0, r2
   d8834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d883c:	f141 0100 	adc.w	r1, r1, #0
   d8840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8844:	bf08      	it	eq
   d8846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d884a:	bd70      	pop	{r4, r5, r6, pc}
   d884c:	f1c4 0520 	rsb	r5, r4, #32
   d8850:	fa00 f205 	lsl.w	r2, r0, r5
   d8854:	ea4e 0e02 	orr.w	lr, lr, r2
   d8858:	fa20 f304 	lsr.w	r3, r0, r4
   d885c:	fa01 f205 	lsl.w	r2, r1, r5
   d8860:	ea43 0302 	orr.w	r3, r3, r2
   d8864:	fa21 f004 	lsr.w	r0, r1, r4
   d8868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d886c:	fa21 f204 	lsr.w	r2, r1, r4
   d8870:	ea20 0002 	bic.w	r0, r0, r2
   d8874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d887c:	bf08      	it	eq
   d887e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8882:	bd70      	pop	{r4, r5, r6, pc}
   d8884:	f094 0f00 	teq	r4, #0
   d8888:	d10f      	bne.n	d88aa <__aeabi_dmul+0x1c2>
   d888a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d888e:	0040      	lsls	r0, r0, #1
   d8890:	eb41 0101 	adc.w	r1, r1, r1
   d8894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8898:	bf08      	it	eq
   d889a:	3c01      	subeq	r4, #1
   d889c:	d0f7      	beq.n	d888e <__aeabi_dmul+0x1a6>
   d889e:	ea41 0106 	orr.w	r1, r1, r6
   d88a2:	f095 0f00 	teq	r5, #0
   d88a6:	bf18      	it	ne
   d88a8:	4770      	bxne	lr
   d88aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d88ae:	0052      	lsls	r2, r2, #1
   d88b0:	eb43 0303 	adc.w	r3, r3, r3
   d88b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d88b8:	bf08      	it	eq
   d88ba:	3d01      	subeq	r5, #1
   d88bc:	d0f7      	beq.n	d88ae <__aeabi_dmul+0x1c6>
   d88be:	ea43 0306 	orr.w	r3, r3, r6
   d88c2:	4770      	bx	lr
   d88c4:	ea94 0f0c 	teq	r4, ip
   d88c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d88cc:	bf18      	it	ne
   d88ce:	ea95 0f0c 	teqne	r5, ip
   d88d2:	d00c      	beq.n	d88ee <__aeabi_dmul+0x206>
   d88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88d8:	bf18      	it	ne
   d88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88de:	d1d1      	bne.n	d8884 <__aeabi_dmul+0x19c>
   d88e0:	ea81 0103 	eor.w	r1, r1, r3
   d88e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88e8:	f04f 0000 	mov.w	r0, #0
   d88ec:	bd70      	pop	{r4, r5, r6, pc}
   d88ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88f2:	bf06      	itte	eq
   d88f4:	4610      	moveq	r0, r2
   d88f6:	4619      	moveq	r1, r3
   d88f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88fc:	d019      	beq.n	d8932 <__aeabi_dmul+0x24a>
   d88fe:	ea94 0f0c 	teq	r4, ip
   d8902:	d102      	bne.n	d890a <__aeabi_dmul+0x222>
   d8904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8908:	d113      	bne.n	d8932 <__aeabi_dmul+0x24a>
   d890a:	ea95 0f0c 	teq	r5, ip
   d890e:	d105      	bne.n	d891c <__aeabi_dmul+0x234>
   d8910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8914:	bf1c      	itt	ne
   d8916:	4610      	movne	r0, r2
   d8918:	4619      	movne	r1, r3
   d891a:	d10a      	bne.n	d8932 <__aeabi_dmul+0x24a>
   d891c:	ea81 0103 	eor.w	r1, r1, r3
   d8920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d892c:	f04f 0000 	mov.w	r0, #0
   d8930:	bd70      	pop	{r4, r5, r6, pc}
   d8932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d893a:	bd70      	pop	{r4, r5, r6, pc}

000d893c <__aeabi_ddiv>:
   d893c:	b570      	push	{r4, r5, r6, lr}
   d893e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d894a:	bf1d      	ittte	ne
   d894c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8950:	ea94 0f0c 	teqne	r4, ip
   d8954:	ea95 0f0c 	teqne	r5, ip
   d8958:	f000 f8a7 	bleq	d8aaa <__aeabi_ddiv+0x16e>
   d895c:	eba4 0405 	sub.w	r4, r4, r5
   d8960:	ea81 0e03 	eor.w	lr, r1, r3
   d8964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8968:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d896c:	f000 8088 	beq.w	d8a80 <__aeabi_ddiv+0x144>
   d8970:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d897c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8980:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d898c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8994:	429d      	cmp	r5, r3
   d8996:	bf08      	it	eq
   d8998:	4296      	cmpeq	r6, r2
   d899a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d899e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d89a2:	d202      	bcs.n	d89aa <__aeabi_ddiv+0x6e>
   d89a4:	085b      	lsrs	r3, r3, #1
   d89a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d89aa:	1ab6      	subs	r6, r6, r2
   d89ac:	eb65 0503 	sbc.w	r5, r5, r3
   d89b0:	085b      	lsrs	r3, r3, #1
   d89b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d89b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d89ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d89be:	ebb6 0e02 	subs.w	lr, r6, r2
   d89c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89c6:	bf22      	ittt	cs
   d89c8:	1ab6      	subcs	r6, r6, r2
   d89ca:	4675      	movcs	r5, lr
   d89cc:	ea40 000c 	orrcs.w	r0, r0, ip
   d89d0:	085b      	lsrs	r3, r3, #1
   d89d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d89d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d89da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89de:	bf22      	ittt	cs
   d89e0:	1ab6      	subcs	r6, r6, r2
   d89e2:	4675      	movcs	r5, lr
   d89e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d89e8:	085b      	lsrs	r3, r3, #1
   d89ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d89ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d89f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89f6:	bf22      	ittt	cs
   d89f8:	1ab6      	subcs	r6, r6, r2
   d89fa:	4675      	movcs	r5, lr
   d89fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8a00:	085b      	lsrs	r3, r3, #1
   d8a02:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a06:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a0e:	bf22      	ittt	cs
   d8a10:	1ab6      	subcs	r6, r6, r2
   d8a12:	4675      	movcs	r5, lr
   d8a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8a18:	ea55 0e06 	orrs.w	lr, r5, r6
   d8a1c:	d018      	beq.n	d8a50 <__aeabi_ddiv+0x114>
   d8a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8a3a:	d1c0      	bne.n	d89be <__aeabi_ddiv+0x82>
   d8a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a40:	d10b      	bne.n	d8a5a <__aeabi_ddiv+0x11e>
   d8a42:	ea41 0100 	orr.w	r1, r1, r0
   d8a46:	f04f 0000 	mov.w	r0, #0
   d8a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8a4e:	e7b6      	b.n	d89be <__aeabi_ddiv+0x82>
   d8a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a54:	bf04      	itt	eq
   d8a56:	4301      	orreq	r1, r0
   d8a58:	2000      	moveq	r0, #0
   d8a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a5e:	bf88      	it	hi
   d8a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a64:	f63f aeaf 	bhi.w	d87c6 <__aeabi_dmul+0xde>
   d8a68:	ebb5 0c03 	subs.w	ip, r5, r3
   d8a6c:	bf04      	itt	eq
   d8a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a76:	f150 0000 	adcs.w	r0, r0, #0
   d8a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a7e:	bd70      	pop	{r4, r5, r6, pc}
   d8a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8a8c:	bfc2      	ittt	gt
   d8a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8a96:	bd70      	popgt	{r4, r5, r6, pc}
   d8a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a9c:	f04f 0e00 	mov.w	lr, #0
   d8aa0:	3c01      	subs	r4, #1
   d8aa2:	e690      	b.n	d87c6 <__aeabi_dmul+0xde>
   d8aa4:	ea45 0e06 	orr.w	lr, r5, r6
   d8aa8:	e68d      	b.n	d87c6 <__aeabi_dmul+0xde>
   d8aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8aae:	ea94 0f0c 	teq	r4, ip
   d8ab2:	bf08      	it	eq
   d8ab4:	ea95 0f0c 	teqeq	r5, ip
   d8ab8:	f43f af3b 	beq.w	d8932 <__aeabi_dmul+0x24a>
   d8abc:	ea94 0f0c 	teq	r4, ip
   d8ac0:	d10a      	bne.n	d8ad8 <__aeabi_ddiv+0x19c>
   d8ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8ac6:	f47f af34 	bne.w	d8932 <__aeabi_dmul+0x24a>
   d8aca:	ea95 0f0c 	teq	r5, ip
   d8ace:	f47f af25 	bne.w	d891c <__aeabi_dmul+0x234>
   d8ad2:	4610      	mov	r0, r2
   d8ad4:	4619      	mov	r1, r3
   d8ad6:	e72c      	b.n	d8932 <__aeabi_dmul+0x24a>
   d8ad8:	ea95 0f0c 	teq	r5, ip
   d8adc:	d106      	bne.n	d8aec <__aeabi_ddiv+0x1b0>
   d8ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ae2:	f43f aefd 	beq.w	d88e0 <__aeabi_dmul+0x1f8>
   d8ae6:	4610      	mov	r0, r2
   d8ae8:	4619      	mov	r1, r3
   d8aea:	e722      	b.n	d8932 <__aeabi_dmul+0x24a>
   d8aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8af0:	bf18      	it	ne
   d8af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8af6:	f47f aec5 	bne.w	d8884 <__aeabi_dmul+0x19c>
   d8afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8afe:	f47f af0d 	bne.w	d891c <__aeabi_dmul+0x234>
   d8b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8b06:	f47f aeeb 	bne.w	d88e0 <__aeabi_dmul+0x1f8>
   d8b0a:	e712      	b.n	d8932 <__aeabi_dmul+0x24a>

000d8b0c <__cxa_atexit>:
   d8b0c:	b510      	push	{r4, lr}
   d8b0e:	4c05      	ldr	r4, [pc, #20]	; (d8b24 <__cxa_atexit+0x18>)
   d8b10:	4613      	mov	r3, r2
   d8b12:	b12c      	cbz	r4, d8b20 <__cxa_atexit+0x14>
   d8b14:	460a      	mov	r2, r1
   d8b16:	4601      	mov	r1, r0
   d8b18:	2002      	movs	r0, #2
   d8b1a:	f3af 8000 	nop.w
   d8b1e:	bd10      	pop	{r4, pc}
   d8b20:	4620      	mov	r0, r4
   d8b22:	bd10      	pop	{r4, pc}
   d8b24:	00000000 	.word	0x00000000

000d8b28 <memcpy>:
   d8b28:	b510      	push	{r4, lr}
   d8b2a:	1e43      	subs	r3, r0, #1
   d8b2c:	440a      	add	r2, r1
   d8b2e:	4291      	cmp	r1, r2
   d8b30:	d004      	beq.n	d8b3c <memcpy+0x14>
   d8b32:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b36:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b3a:	e7f8      	b.n	d8b2e <memcpy+0x6>
   d8b3c:	bd10      	pop	{r4, pc}

000d8b3e <memset>:
   d8b3e:	4402      	add	r2, r0
   d8b40:	4603      	mov	r3, r0
   d8b42:	4293      	cmp	r3, r2
   d8b44:	d002      	beq.n	d8b4c <memset+0xe>
   d8b46:	f803 1b01 	strb.w	r1, [r3], #1
   d8b4a:	e7fa      	b.n	d8b42 <memset+0x4>
   d8b4c:	4770      	bx	lr
	...

000d8b50 <srand>:
   d8b50:	b538      	push	{r3, r4, r5, lr}
   d8b52:	4b12      	ldr	r3, [pc, #72]	; (d8b9c <srand+0x4c>)
   d8b54:	681c      	ldr	r4, [r3, #0]
   d8b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b58:	4605      	mov	r5, r0
   d8b5a:	b9d3      	cbnz	r3, d8b92 <srand+0x42>
   d8b5c:	2018      	movs	r0, #24
   d8b5e:	f7fe fdbf 	bl	d76e0 <malloc>
   d8b62:	f243 330e 	movw	r3, #13070	; 0x330e
   d8b66:	63a0      	str	r0, [r4, #56]	; 0x38
   d8b68:	8003      	strh	r3, [r0, #0]
   d8b6a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8b6e:	8043      	strh	r3, [r0, #2]
   d8b70:	f241 2334 	movw	r3, #4660	; 0x1234
   d8b74:	8083      	strh	r3, [r0, #4]
   d8b76:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8b7a:	80c3      	strh	r3, [r0, #6]
   d8b7c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8b80:	8103      	strh	r3, [r0, #8]
   d8b82:	2305      	movs	r3, #5
   d8b84:	8143      	strh	r3, [r0, #10]
   d8b86:	230b      	movs	r3, #11
   d8b88:	8183      	strh	r3, [r0, #12]
   d8b8a:	2201      	movs	r2, #1
   d8b8c:	2300      	movs	r3, #0
   d8b8e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8b94:	2200      	movs	r2, #0
   d8b96:	611d      	str	r5, [r3, #16]
   d8b98:	615a      	str	r2, [r3, #20]
   d8b9a:	bd38      	pop	{r3, r4, r5, pc}
   d8b9c:	2003dd74 	.word	0x2003dd74

000d8ba0 <strlen>:
   d8ba0:	4603      	mov	r3, r0
   d8ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8ba6:	2a00      	cmp	r2, #0
   d8ba8:	d1fb      	bne.n	d8ba2 <strlen+0x2>
   d8baa:	1a18      	subs	r0, r3, r0
   d8bac:	3801      	subs	r0, #1
   d8bae:	4770      	bx	lr

000d8bb0 <dynalib_user>:
   d8bb0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d8bc0:	0000 0000 6144 2074 756e 626d 7265 2520     ....Dat number %
   d8bd0:	0064 7453 7261 0074 4242 4d56 5320 4154     d.Start.BBVM STA
   d8be0:	5452 4445 3a20 2044 5200 6765 7369 6574     RTED :D .Registe
   d8bf0:	6972 676e 6620 6e75 7463 6f69 736e 4600     ring functions.F
   d8c00:	7269 7473 6420 6e6f 2065 4900 494e 2054     irst done .INIT 
   d8c10:	4f44 454e 4400 5645 4349 2045 5243 5341     DONE.DEVICE CRAS
   d8c20:	4548 0044 5245 4f52 2052 6425 0020          HED.ERROR %d .

000d8c2e <_ZL5bcode>:
   d8c2e:	0004 0025 2600 0012 251d 0001 1326 1d00     ..%..&...%..&...
   d8c3e:	0100 0205 0225 1c00 0424 2400 0001 0021     ....%...$..$..!.
   d8c4e:	0000 0000 241c 01f4 0124 2100 0000 2f4e     .....$..$..!..N/
   d8c5e:	0041 4d56 0a3a 7309 6174 6574 203a 6425     A.VM:..state: %d
   d8c6e:	2520 0a73 7009 3a63 2520 0a64 6909 736e      %s..pc: %d..ins
   d8c7e:	7274 203a 7325 090a 7265 6f72 2072 7473     tr: %s..error st
   d8c8e:	7461 3a65 2520 0a73 5400 7365 2074 2e34     ate: %s..Test 4.
   d8c9e:	0031 6554 7473 3420 322e 5400 7365 2074     1.Test 4.2.Test 
   d8cae:	2e34 0033 6554 7473 3420 342e 5400 7365     4.3.Test 4.4.Tes
   d8cbe:	2074 0030 6554 7473 3120 5400 7365 2074     t 0.Test 1.Test 
   d8cce:	0032 6554 7473 3320 5400 7365 2074 0034     2.Test 3.Test 4.
   d8cde:	6554 7473 3520 4e00 504f 5000 5355 4e48     Test 5.NOP.PUSHN
   d8cee:	4c49 4400 5055 5000 504f 5200 5445 0030     IL.DUP.POP.RET0.
   d8cfe:	4552 3154 4100 4444 5300 4255 4d00 4c55     RET1.ADD.SUB.MUL
   d8d0e:	4400 5649 4d00 444f 5000 574f 5500 4d4e     .DIV.MOD.POW.UNM
   d8d1e:	4100 444e 4e00 544f 4e00 5145 4700 0054     .AND.NOT.NEQ.GT.
   d8d2e:	5447 0045 544c 4c00 4554 4700 4f4c 4441     GTE.LT.LTE.GLOAD
   d8d3e:	4700 5453 524f 0045 5550 4853 0054 5054     .GSTORE.PUSHT.TP
   d8d4e:	5455 5400 4547 0054 4143 4c4c 0043 4143     UT.TGET.CALLC.CA
   d8d5e:	4c4c 0053 5550 4853 0046 5550 4853 0049     LLS.PUSHF.PUSHI.
   d8d6e:	5550 4853 0053 5550 4853 4e43 5000 5355     PUSHS.PUSHCN.PUS
   d8d7e:	4348 0043 5550 4853 004c 4c4c 414f 0044     HCC.PUSHL.LLOAD.
   d8d8e:	534c 4f54 4552 4a00 4d55 0050 554a 504d     LSTORE.JUMP.JUMP
   d8d9e:	005a 554a 504d 5a4e 4200 5a42 4d56 455f     Z.JUMPNZ.BBZVM_E
   d8dae:	5252 524f 4e5f 4e4f 0045 4242 565a 5f4d     RROR_NONE.BBZVM_
   d8dbe:	5245 4f52 5f52 4e49 5453 0052 4242 565a     ERROR_INSTR.BBZV
   d8dce:	5f4d 5245 4f52 5f52 5453 4341 004b 4242     M_ERROR_STACK.BB
   d8dde:	565a 5f4d 5245 4f52 5f52 4e4c 4d55 4200     ZVM_ERROR_LNUM.B
   d8dee:	5a42 4d56 455f 5252 524f 505f 0043 4242     BZVM_ERROR_PC.BB
   d8dfe:	565a 5f4d 5245 4f52 5f52 4c46 5349 0054     ZVM_ERROR_FLIST.
   d8e0e:	4242 565a 5f4d 5245 4f52 5f52 5954 4550     BBZVM_ERROR_TYPE
   d8e1e:	4200 5a42 4d56 455f 5252 524f 4f5f 5455     .BBZVM_ERROR_OUT
   d8e2e:	464f 4152 474e 0045 4242 565a 5f4d 5245     OFRANGE.BBZVM_ER
   d8e3e:	4f52 5f52 4f4e 4954 504d 004c 4242 565a     ROR_NOTIMPL.BBZV
   d8e4e:	5f4d 5245 4f52 5f52 4552 0054 4242 565a     M_ERROR_RET.BBZV
   d8e5e:	5f4d 5245 4f52 5f52 5453 4952 474e 4200     M_ERROR_STRING.B
   d8e6e:	5a42 4d56 455f 5252 524f 535f 4157 4d52     BZVM_ERROR_SWARM
   d8e7e:	4200 5a42 4d56 455f 5252 524f 565f 5453     .BBZVM_ERROR_VST
   d8e8e:	4749 4200 5a42 4d56 455f 5252 524f 4d5f     IG.BBZVM_ERROR_M
   d8e9e:	4d45 4200 5a42 4d56 455f 5252 524f 4d5f     EM.BBZVM_ERROR_M
   d8eae:	5441 0048 4242 565a 5f4d 5453 5441 5f45     ATH.BBZVM_STATE_
   d8ebe:	4f4e 4f43 4544 4200 5a42 4d56 535f 4154     NOCODE.BBZVM_STA
   d8ece:	4554 525f 4145 5944 4200 5a42 4d56 535f     TE_READY.BBZVM_S
   d8ede:	4154 4554 535f 4f54 5050 4445 4200 5a42     TATE_STOPPED.BBZ
   d8eee:	4d56 535f 4154 4554 445f 4e4f 0045 4242     VM_STATE_DONE.BB
   d8efe:	565a 5f4d 5453 5441 5f45 5245 4f52 0052     ZVM_STATE_ERROR.
   d8f0e:	4242 565a 5f4d 5453 5441 5f45 4f43 4e55     BBZVM_STATE_COUN
   d8f1e:	0054                                        T.

000d8f20 <_ZL16bbzvm_types_desc>:
   d8f20:	90d8 000d 90dc 000d 90e4 000d 90ea 000d     ................
   d8f30:	90f1 000d 90f7 000d 90ff 000d 2d2d 2d2d     ............----
   d8f40:	2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 2d00 4820     -----------..- H
   d8f50:	4145 2050 5453 5441 5355 2d20 000a 2d2d     EAP STATUS -..--
   d8f60:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 0a2d 000a     -------------...
   d8f70:	614d 2078 626f 656a 7463 6920 646e 7865     Max object index
   d8f80:	203a 6425 000a 6156 696c 2064 626f 656a     : %d..Valid obje
   d8f90:	7463 3a73 2520 0a64 5300 7a69 2065 6570     cts: %d..Size pe
   d8fa0:	2072 626f 656a 7463 203a 7a25 0a75 0900     r object: %zu...
   d8fb0:	2523 3a64 5b20 7325 005d 002a 2520 0066     #%d: [%s].*. %f.
   d8fc0:	2520 7568 2000 5825 5b00 5d6e 5b00 5d6c      %hu. %X.[n].[l]
   d8fd0:	7b20 6425 253b 7d64 4d00 7861 7420 6261      {%d;%d}.Max tab
   d8fe0:	656c 7320 6765 656d 746e 6920 646e 7865     le segment index
   d8ff0:	203a 6425 000a 6156 696c 2064 6174 6c62     : %d..Valid tabl
   d9000:	2065 6573 6d67 6e65 7374 203a 6425 000a     e segments: %d..
   d9010:	6953 657a 7020 7265 7420 6261 656c 7320     Size per table s
   d9020:	6765 656d 746e 203a 7a25 0a75 0900 2523     egment: %zu...#%
   d9030:	3a64 7b20 2000 2528 2c64 6425 0029 2f20     d: {. (%d,%d). /
   d9040:	656e 7478 283d 7825 257c 2964 7d20 000a     next=(%x|%d) }..
   d9050:	6548 7061 7520 6173 6567 2820 2942 203a     Heap usage (B): 
   d9060:	3025 6434 252f 3430 2064 2528 312e 2566     %04d/%04d (%.1f%
   d9070:	2925 000a 6548 7061 7520 6173 6567 2820     %)..Heap usage (
   d9080:	2942 6620 726f 3120 2d36 6962 2074 6f70     B) for 16-bit po
   d9090:	6e69 6574 7372 203a 3025 6434 000a 6e55     inters: %04d..Un
   d90a0:	6c63 6961 656d 2064 7073 6361 2065 4228     claimed space (B
   d90b0:	3a29 2520 2064 3d28 6425 6f20 6a62 6365     ): %d (=%d objec
   d90c0:	2874 2973 6f20 2072 6425 7320 6765 656d     t(s) or %d segme
   d90d0:	746e 7328 2929 000a 696e 006c 6e69 6574     nt(s))..nil.inte
   d90e0:	6567 0072 6c66 616f 0074 7473 6972 676e     ger.float.string
   d90f0:	7400 6261 656c 6300 6f6c 7573 6572 7500     .table.closure.u
   d9100:	6573 6472 7461 0061                         serdata.

000d9108 <_ZTVN5spark12NetworkClassE>:
	...
   d9110:	7711 000d 771b 000d 7725 000d 772f 000d     .w...w..%w../w..
   d9120:	7739 000d 7745 000d 7751 000d 775d 000d     9w..Ew..Qw..]w..
   d9130:	7765 000d 776f 000d 7779 000d               ew..ow..yw..

000d913c <_ZTVN5spark9WiFiClassE>:
	...
   d9144:	78b7 000d 78ad 000d 78a3 000d 7859 000d     .x...x...x..Yx..
   d9154:	7897 000d 788b 000d 787f 000d 7877 000d     .x...x...x..wx..
   d9164:	786d 000d 7863 000d 7779 000d               mx..cx..yw..

000d9170 <_ZTVN5spark9MeshClassE>:
	...
   d9178:	7933 000d 7929 000d 791f 000d 7915 000d     3y..)y...y...y..
   d9188:	7909 000d 78fd 000d 78f1 000d 78e9 000d     .y...x...x...x..
   d9198:	78df 000d 78d5 000d 7779 000d               .x...x..yw..

000d91a4 <_ZTV11USARTSerial>:
	...
   d91ac:	7a51 000d 7aa1 000d 7aaf 000d 7eb1 000d     Qz...z...z...~..
   d91bc:	7a65 000d 7a87 000d 7a73 000d 7a9b 000d     ez...z..sz...z..
   d91cc:	7a53 000d 7a57 000d                         Sz..Wz..

000d91d4 <_ZTV9USBSerial>:
	...
   d91dc:	7b63 000d 7bb3 000d 7bc1 000d 7eb1 000d     c{...{...{...~..
   d91ec:	7b9f 000d 7b65 000d 7b7b 000d 7bad 000d     .{..e{..{{...{..
   d91fc:	7b91 000d 7b5f 000d                         .{.._{..

000d9204 <_ZTV9IPAddress>:
	...
   d920c:	7c81 000d 7c71 000d 7c73 000d 2b25 3330     .|..q|..s|..%+03
   d921c:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d922c:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d923c:	656d 6200 7561 0064 6553 6972 6c61 5300     me.baud.Serial.S
   d924c:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
   d925c:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
   d926c:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
   d927c:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
   d928c:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
   d929c:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
   d92ac:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
   d92bc:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
   d92cc:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d92dc:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
   d92ec:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
   d92fc:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   d930c:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

000d931c <_ZTVN5spark13EthernetClassE>:
	...
   d9324:	80bb 000d 80b1 000d 80a7 000d 809d 000d     ................
   d9334:	8091 000d 8085 000d 8079 000d 8071 000d     ........y...q...
   d9344:	8067 000d 805d 000d 7779 000d               g...]...yw..

000d9350 <__sf_fake_stdin>:
	...

000d9370 <__sf_fake_stdout>:
	...

000d9390 <__sf_fake_stderr>:
	...

000d93b0 <link_const_variable_data_end>:
   d93b0:	000d40e9 	.word	0x000d40e9
   d93b4:	000d40ed 	.word	0x000d40ed
   d93b8:	000d41fd 	.word	0x000d41fd
   d93bc:	000d422b 	.word	0x000d422b
   d93c0:	000d55c9 	.word	0x000d55c9
   d93c4:	000d66d5 	.word	0x000d66d5
   d93c8:	000d7845 	.word	0x000d7845
   d93cc:	000d78c1 	.word	0x000d78c1
   d93d0:	000d7a01 	.word	0x000d7a01
   d93d4:	000d7e71 	.word	0x000d7e71
   d93d8:	000d7e8d 	.word	0x000d7e8d
   d93dc:	000d7ea1 	.word	0x000d7ea1
   d93e0:	000d7fe1 	.word	0x000d7fe1
   d93e4:	000d8029 	.word	0x000d8029
   d93e8:	000d80c5 	.word	0x000d80c5
   d93ec:	000d80e9 	.word	0x000d80e9
   d93f0:	000d816d 	.word	0x000d816d
   d93f4:	000d8231 	.word	0x000d8231
   d93f8:	000d82f5 	.word	0x000d82f5

000d93fc <link_constructors_end>:
   d93fc:	00000000 	.word	0x00000000
